
Pulse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08006b48  08006b48  00016b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c80  08006c80  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c88  08006c88  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c88  08006c88  00016c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c8c  08006c8c  00016c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000008c  08006d1c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08006d1c  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ce4  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002454  00000000  00000000  00031da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  000341f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  00035258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ff6  00000000  00000000  00036208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a1c  00000000  00000000  0004f1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dc08  00000000  00000000  00060c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe822  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000523c  00000000  00000000  000fe878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b2c 	.word	0x08006b2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08006b2c 	.word	0x08006b2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <lcd_send_cmd>:
#define Read_Add_LCD 0x4F
//
//#define Write_Add_LCD 0x3F // LCD的I2C模块地址，参考模块的规格书，0x3F为高7位地址，STM32需要手动左移地址

void lcd_send_cmd (char cmd)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f023 030f 	bic.w	r3, r3, #15
 8000f50:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	f043 030c 	orr.w	r3, r3, #12
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	f043 030c 	orr.w	r3, r3, #12
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f76:	7bbb      	ldrb	r3, [r7, #14]
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	72fb      	strb	r3, [r7, #11]
	while (HAL_I2C_Master_Transmit (&hi2c1, Write_Add_LCD,(uint8_t *) data_t, 4, 1000)!= HAL_OK)
 8000f80:	e007      	b.n	8000f92 <lcd_send_cmd+0x52>
	    {
	        if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000f82:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <lcd_send_cmd+0x78>)
 8000f84:	f002 f878 	bl	8003078 <HAL_I2C_GetError>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d001      	beq.n	8000f92 <lcd_send_cmd+0x52>
	                {
	                  Error_Handler();
 8000f8e:	f000 fd41 	bl	8001a14 <Error_Handler>
	while (HAL_I2C_Master_Transmit (&hi2c1, Write_Add_LCD,(uint8_t *) data_t, 4, 1000)!= HAL_OK)
 8000f92:	f107 0208 	add.w	r2, r7, #8
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	214e      	movs	r1, #78	; 0x4e
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <lcd_send_cmd+0x78>)
 8000fa2:	f001 ff6b 	bl	8002e7c <HAL_I2C_Master_Transmit>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ea      	bne.n	8000f82 <lcd_send_cmd+0x42>
	                }
	    }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200000fc 	.word	0x200000fc

08000fbc <lcd_send_data>:



void lcd_send_data (char data)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f023 030f 	bic.w	r3, r3, #15
 8000fcc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	f043 030d 	orr.w	r3, r3, #13
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	f043 0309 	orr.w	r3, r3, #9
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	f043 030d 	orr.w	r3, r3, #13
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	f043 0309 	orr.w	r3, r3, #9
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (&hi2c1, Write_Add_LCD,(uint8_t *) data_t, 4, 100);
	while (HAL_I2C_Master_Transmit (&hi2c1, Write_Add_LCD,(uint8_t *) data_t, 4, 1000)!= HAL_OK)
 8000ffc:	e007      	b.n	800100e <lcd_send_data+0x52>
//	   while(HAL_I2C_Master_Transmit(&hi2c1,I2C1_WRITE_ADDRESS,(uint8_t*)TxData,2,1000) != HAL_OK)
	    {
	        if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000ffe:	480d      	ldr	r0, [pc, #52]	; (8001034 <lcd_send_data+0x78>)
 8001000:	f002 f83a 	bl	8003078 <HAL_I2C_GetError>
 8001004:	4603      	mov	r3, r0
 8001006:	2b04      	cmp	r3, #4
 8001008:	d001      	beq.n	800100e <lcd_send_data+0x52>
	                {
	                  Error_Handler();
 800100a:	f000 fd03 	bl	8001a14 <Error_Handler>
	while (HAL_I2C_Master_Transmit (&hi2c1, Write_Add_LCD,(uint8_t *) data_t, 4, 1000)!= HAL_OK)
 800100e:	f107 0208 	add.w	r2, r7, #8
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2304      	movs	r3, #4
 800101a:	214e      	movs	r1, #78	; 0x4e
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <lcd_send_data+0x78>)
 800101e:	f001 ff2d 	bl	8002e7c <HAL_I2C_Master_Transmit>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1ea      	bne.n	8000ffe <lcd_send_data+0x42>
	                }
	    }
}
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200000fc 	.word	0x200000fc

08001038 <lcd_init>:



void lcd_init (void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);//
 800103c:	2002      	movs	r0, #2
 800103e:	f7ff ff7f 	bl	8000f40 <lcd_send_cmd>
	HAL_Delay(5);
 8001042:	2005      	movs	r0, #5
 8001044:	f000 ff9e 	bl	8001f84 <HAL_Delay>
	lcd_send_cmd (0x28);
 8001048:	2028      	movs	r0, #40	; 0x28
 800104a:	f7ff ff79 	bl	8000f40 <lcd_send_cmd>
	HAL_Delay(5);
 800104e:	2005      	movs	r0, #5
 8001050:	f000 ff98 	bl	8001f84 <HAL_Delay>
	lcd_send_cmd (0x0c);//开启显示屏,关光标,光标不闪烁
 8001054:	200c      	movs	r0, #12
 8001056:	f7ff ff73 	bl	8000f40 <lcd_send_cmd>
	HAL_Delay(5);
 800105a:	2005      	movs	r0, #5
 800105c:	f000 ff92 	bl	8001f84 <HAL_Delay>
	lcd_send_cmd (0x80);//光标定位到左上角
 8001060:	2080      	movs	r0, #128	; 0x80
 8001062:	f7ff ff6d 	bl	8000f40 <lcd_send_cmd>
	HAL_Delay(5);
 8001066:	2005      	movs	r0, #5
 8001068:	f000 ff8c 	bl	8001f84 <HAL_Delay>
//	lcd_send_cmd (0x06);//显示地址递增,即写一个数据后,显示位置右移一位
	HAL_Delay(15);
 800106c:	200f      	movs	r0, #15
 800106e:	f000 ff89 	bl	8001f84 <HAL_Delay>
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}

08001076 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800107e:	e006      	b.n	800108e <lcd_send_string+0x18>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff97 	bl	8000fbc <lcd_send_data>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f4      	bne.n	8001080 <lcd_send_string+0xa>
}
 8001096:	bf00      	nop
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <lcd_setCursor>:

void lcd_setCursor (char col, char row) //col代表列数，从0开始计算；row代表行数，row =0,1,2,3分别代表第1/2/3/4行, LCD1602只有2行，LCD2004有4行
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	460a      	mov	r2, r1
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	4613      	mov	r3, r2
 80010ae:	71bb      	strb	r3, [r7, #6]
	char lineAdd = 0x80;
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	73fb      	strb	r3, [r7, #15]
	switch(row)
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d81a      	bhi.n	80010f0 <lcd_setCursor+0x50>
 80010ba:	a201      	add	r2, pc, #4	; (adr r2, 80010c0 <lcd_setCursor+0x20>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	080010d1 	.word	0x080010d1
 80010c4:	080010d9 	.word	0x080010d9
 80010c8:	080010e1 	.word	0x080010e1
 80010cc:	080010e9 	.word	0x080010e9
	{
		case 0: lineAdd = 0x80 + col;
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	3b80      	subs	r3, #128	; 0x80
 80010d4:	73fb      	strb	r3, [r7, #15]
				break;
 80010d6:	e00b      	b.n	80010f0 <lcd_setCursor+0x50>
		case 1: lineAdd = 0xC0 + col;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	3b40      	subs	r3, #64	; 0x40
 80010dc:	73fb      	strb	r3, [r7, #15]
				break;
 80010de:	e007      	b.n	80010f0 <lcd_setCursor+0x50>
		case 2: lineAdd = 0x94 + col;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	3b6c      	subs	r3, #108	; 0x6c
 80010e4:	73fb      	strb	r3, [r7, #15]
				break;
 80010e6:	e003      	b.n	80010f0 <lcd_setCursor+0x50>
		case 3: lineAdd = 0xD4 + col;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	3b2c      	subs	r3, #44	; 0x2c
 80010ec:	73fb      	strb	r3, [r7, #15]
				break;
 80010ee:	bf00      	nop

	}
	lcd_send_cmd(lineAdd);
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff24 	bl	8000f40 <lcd_send_cmd>
	HAL_Delay(15);
 80010f8:	200f      	movs	r0, #15
 80010fa:	f000 ff43 	bl	8001f84 <HAL_Delay>
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop

08001108 <lcd_clear>:



void lcd_clear(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 800110c:	2001      	movs	r0, #1
 800110e:	f7ff ff17 	bl	8000f40 <lcd_send_cmd>
	HAL_Delay(15);
 8001112:	200f      	movs	r0, #15
 8001114:	f000 ff36 	bl	8001f84 <HAL_Delay>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001122:	f000 febd 	bl	8001ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001126:	f000 f8a3 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112a:	f000 f9f7 	bl	800151c <MX_GPIO_Init>
  MX_ADC1_Init();
 800112e:	f000 f8fd 	bl	800132c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001132:	f000 f97b 	bl	800142c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001136:	f000 f9c7 	bl	80014c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800113a:	f000 f949 	bl	80013d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 800113e:	4840      	ldr	r0, [pc, #256]	; (8001240 <main+0x124>)
 8001140:	f002 fe74 	bl	8003e2c <HAL_TIM_Base_Start_IT>
	lcd_init();
 8001144:	f7ff ff78 	bl	8001038 <lcd_init>
	lcd_clear();
 8001148:	f7ff ffde 	bl	8001108 <lcd_clear>
	lcd_send_string ("Heart pulse:");
 800114c:	483d      	ldr	r0, [pc, #244]	; (8001244 <main+0x128>)
 800114e:	f7ff ff92 	bl	8001076 <lcd_send_string>
	HAL_Delay(2000);
 8001152:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001156:	f000 ff15 	bl	8001f84 <HAL_Delay>
	lcd_clear();
 800115a:	f7ff ffd5 	bl	8001108 <lcd_clear>
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  //sendDataToProcessing('S', ADCValue);     // send Processing the raw Pulse Sensor data
	  float star;
	  star = ADCValue / 10.0;
 800115e:	4b3a      	ldr	r3, [pc, #232]	; (8001248 <main+0x12c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f9de 	bl	8000524 <__aeabi_i2d>
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	4b37      	ldr	r3, [pc, #220]	; (800124c <main+0x130>)
 800116e:	f7ff fb6d 	bl	800084c <__aeabi_ddiv>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fd15 	bl	8000ba8 <__aeabi_d2f>
 800117e:	4603      	mov	r3, r0
 8001180:	603b      	str	r3, [r7, #0]
	  int i;
	  for (i = 0; i < 110; i++)
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	e015      	b.n	80011b4 <main+0x98>
	  {
	  	  if (i<star)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	ee07 3a90 	vmov	s15, r3
 800118e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001192:	ed97 7a00 	vldr	s14, [r7]
 8001196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	dd03      	ble.n	80011a8 <main+0x8c>
	  	      printf("*");
 80011a0:	202a      	movs	r0, #42	; 0x2a
 80011a2:	f003 fd71 	bl	8004c88 <putchar>
 80011a6:	e002      	b.n	80011ae <main+0x92>
	  	  else
	  	      printf(" ");
 80011a8:	2020      	movs	r0, #32
 80011aa:	f003 fd6d 	bl	8004c88 <putchar>
	  for (i = 0; i < 110; i++)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3301      	adds	r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b6d      	cmp	r3, #109	; 0x6d
 80011b8:	dde6      	ble.n	8001188 <main+0x6c>
	  }
	  printf("|");
 80011ba:	207c      	movs	r0, #124	; 0x7c
 80011bc:	f003 fd64 	bl	8004c88 <putchar>

		  //sendDataToProcessing('B',BPM);   // send heart rate with a 'B' prefix
		  printf("BPM: %4d beat/Sec | IBI: %3dms\r\n",BPM,IBI);
 80011c0:	4b23      	ldr	r3, [pc, #140]	; (8001250 <main+0x134>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a23      	ldr	r2, [pc, #140]	; (8001254 <main+0x138>)
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4823      	ldr	r0, [pc, #140]	; (8001258 <main+0x13c>)
 80011cc:	f003 fd44 	bl	8004c58 <iprintf>
		  //sendDataToProcessing('Q',IBI);   // send time between beats with a 'Q' prefix
		  lcd_send_string ("Number of HB:");
 80011d0:	4822      	ldr	r0, [pc, #136]	; (800125c <main+0x140>)
 80011d2:	f7ff ff50 	bl	8001076 <lcd_send_string>
		  t3 = getDigits(Count,3) + 48;
 80011d6:	4b22      	ldr	r3, [pc, #136]	; (8001260 <main+0x144>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2103      	movs	r1, #3
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fbdb 	bl	8001998 <getDigits>
 80011e2:	4603      	mov	r3, r0
 80011e4:	3330      	adds	r3, #48	; 0x30
 80011e6:	4a1f      	ldr	r2, [pc, #124]	; (8001264 <main+0x148>)
 80011e8:	6013      	str	r3, [r2, #0]
		  t2 = getDigits(Count,2) + 48;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <main+0x144>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2102      	movs	r1, #2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fbd1 	bl	8001998 <getDigits>
 80011f6:	4603      	mov	r3, r0
 80011f8:	3330      	adds	r3, #48	; 0x30
 80011fa:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <main+0x14c>)
 80011fc:	6013      	str	r3, [r2, #0]
		  t1 = getDigits(Count,1) + 48;
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <main+0x144>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2101      	movs	r1, #1
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fbc7 	bl	8001998 <getDigits>
 800120a:	4603      	mov	r3, r0
 800120c:	3330      	adds	r3, #48	; 0x30
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <main+0x150>)
 8001210:	6013      	str	r3, [r2, #0]
		  lcd_send_data (t3);
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <main+0x148>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fecf 	bl	8000fbc <lcd_send_data>
		  lcd_send_data (t2);
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <main+0x14c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fec9 	bl	8000fbc <lcd_send_data>
		  lcd_send_data (t1);
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <main+0x150>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fec3 	bl	8000fbc <lcd_send_data>
		  lcd_setCursor (0,0);
 8001236:	2100      	movs	r1, #0
 8001238:	2000      	movs	r0, #0
 800123a:	f7ff ff31 	bl	80010a0 <lcd_setCursor>
  {
 800123e:	e78e      	b.n	800115e <main+0x42>
 8001240:	20000150 	.word	0x20000150
 8001244:	08006b48 	.word	0x08006b48
 8001248:	200001e8 	.word	0x200001e8
 800124c:	40240000 	.word	0x40240000
 8001250:	200001e0 	.word	0x200001e0
 8001254:	20000000 	.word	0x20000000
 8001258:	08006b58 	.word	0x08006b58
 800125c:	08006b7c 	.word	0x08006b7c
 8001260:	200000ac 	.word	0x200000ac
 8001264:	200000c4 	.word	0x200000c4
 8001268:	200000c0 	.word	0x200000c0
 800126c:	200000bc 	.word	0x200000bc

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b094      	sub	sp, #80	; 0x50
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	2230      	movs	r2, #48	; 0x30
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f003 fce2 	bl	8004c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <SystemClock_Config+0xb4>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	4a21      	ldr	r2, [pc, #132]	; (8001324 <SystemClock_Config+0xb4>)
 800129e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a2:	6413      	str	r3, [r2, #64]	; 0x40
 80012a4:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <SystemClock_Config+0xb4>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <SystemClock_Config+0xb8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <SystemClock_Config+0xb8>)
 80012ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <SystemClock_Config+0xb8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012cc:	2302      	movs	r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d4:	2310      	movs	r3, #16
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012d8:	2300      	movs	r3, #0
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 f8df 	bl	80034a4 <HAL_RCC_OscConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80012ec:	f000 fb92 	bl	8001a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f0:	230f      	movs	r3, #15
 80012f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f002 fb42 	bl	8003994 <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001316:	f000 fb7d 	bl	8001a14 <Error_Handler>
  }
}
 800131a:	bf00      	nop
 800131c:	3750      	adds	r7, #80	; 0x50
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001332:	463b      	mov	r3, r7
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and PulseTimeber of conversion)
  */
  hadc1.Instance = ADC1;
 800133e:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001340:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <MX_ADC1_Init+0x9c>)
 8001342:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001346:	2200      	movs	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_ADC1_Init+0x98>)
 800134c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001350:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_ADC1_Init+0x98>)
 800135a:	2200      	movs	r2, #0
 800135c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800135e:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_ADC1_Init+0x98>)
 800136e:	4a17      	ldr	r2, [pc, #92]	; (80013cc <MX_ADC1_Init+0xa0>)
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001374:	2200      	movs	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_ADC1_Init+0x98>)
 800137a:	2201      	movs	r2, #1
 800137c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_ADC1_Init+0x98>)
 8001388:	2201      	movs	r2, #1
 800138a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <MX_ADC1_Init+0x98>)
 800138e:	f000 fe1d 	bl	8001fcc <HAL_ADC_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001398:	f000 fb3c 	bl	8001a14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800139c:	2300      	movs	r3, #0
 800139e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80013a4:	2301      	movs	r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_ADC1_Init+0x98>)
 80013ae:	f000 ff13 	bl	80021d8 <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013b8:	f000 fb2c 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000198 	.word	0x20000198
 80013c8:	40012000 	.word	0x40012000
 80013cc:	0f000001 	.word	0x0f000001

080013d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_I2C1_Init+0x50>)
 80013d6:	4a13      	ldr	r2, [pc, #76]	; (8001424 <MX_I2C1_Init+0x54>)
 80013d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_I2C1_Init+0x50>)
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <MX_I2C1_Init+0x58>)
 80013de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_I2C1_Init+0x50>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_I2C1_Init+0x50>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_I2C1_Init+0x50>)
 80013ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <MX_I2C1_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_I2C1_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <MX_I2C1_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_I2C1_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <MX_I2C1_Init+0x50>)
 800140e:	f001 fbf1 	bl	8002bf4 <HAL_I2C_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001418:	f000 fafc 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200000fc 	.word	0x200000fc
 8001424:	40005400 	.word	0x40005400
 8001428:	000186a0 	.word	0x000186a0

0800142c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <MX_TIM3_Init+0x94>)
 800144a:	4a1e      	ldr	r2, [pc, #120]	; (80014c4 <MX_TIM3_Init+0x98>)
 800144c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001450:	220f      	movs	r2, #15
 8001452:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_TIM3_Init+0x94>)
 800145c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001460:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_TIM3_Init+0x94>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800146e:	4814      	ldr	r0, [pc, #80]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001470:	f002 fc8c 	bl	8003d8c <HAL_TIM_Base_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800147a:	f000 facb 	bl	8001a14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001482:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	4619      	mov	r1, r3
 800148a:	480d      	ldr	r0, [pc, #52]	; (80014c0 <MX_TIM3_Init+0x94>)
 800148c:	f002 fe38 	bl	8004100 <HAL_TIM_ConfigClockSource>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001496:	f000 fabd 	bl	8001a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a2:	463b      	mov	r3, r7
 80014a4:	4619      	mov	r1, r3
 80014a6:	4806      	ldr	r0, [pc, #24]	; (80014c0 <MX_TIM3_Init+0x94>)
 80014a8:	f003 f830 	bl	800450c <HAL_TIMEx_MasterConfigSynchronization>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014b2:	f000 faaf 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000150 	.word	0x20000150
 80014c4:	40000400 	.word	0x40000400

080014c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_USART2_UART_Init+0x50>)
 80014d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_USART2_UART_Init+0x4c>)
 8001500:	f003 f886 	bl	8004610 <HAL_UART_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800150a:	f000 fa83 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200001ec 	.word	0x200001ec
 8001518:	40004400 	.word	0x40004400

0800151c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <MX_GPIO_Init+0xc4>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a29      	ldr	r2, [pc, #164]	; (80015e0 <MX_GPIO_Init+0xc4>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <MX_GPIO_Init+0xc4>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <MX_GPIO_Init+0xc4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <MX_GPIO_Init+0xc4>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <MX_GPIO_Init+0xc4>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <MX_GPIO_Init+0xc4>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <MX_GPIO_Init+0xc4>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <MX_GPIO_Init+0xc4>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	2120      	movs	r1, #32
 800158a:	4816      	ldr	r0, [pc, #88]	; (80015e4 <MX_GPIO_Init+0xc8>)
 800158c:	f001 fb00 	bl	8002b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001594:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_GPIO_Init+0xcc>)
 8001598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	4619      	mov	r1, r3
 80015a4:	4811      	ldr	r0, [pc, #68]	; (80015ec <MX_GPIO_Init+0xd0>)
 80015a6:	f001 f957 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015aa:	2320      	movs	r3, #32
 80015ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	4619      	mov	r1, r3
 80015c0:	4808      	ldr	r0, [pc, #32]	; (80015e4 <MX_GPIO_Init+0xc8>)
 80015c2:	f001 f949 	bl	8002858 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2028      	movs	r0, #40	; 0x28
 80015cc:	f001 f90d 	bl	80027ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015d0:	2028      	movs	r0, #40	; 0x28
 80015d2:	f001 f926 	bl	8002822 <HAL_NVIC_EnableIRQ>

}
 80015d6:	bf00      	nop
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	10210000 	.word	0x10210000
 80015ec:	40020800 	.word	0x40020800

080015f0 <HAL_GPIO_EXTI_Callback>:
//  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
//
//  return ch;
//}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0)
 80015fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fe:	4823      	ldr	r0, [pc, #140]	; (800168c <HAL_GPIO_EXTI_Callback+0x9c>)
 8001600:	f001 faae 	bl	8002b60 <HAL_GPIO_ReadPin>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d13b      	bne.n	8001682 <HAL_GPIO_EXTI_Callback+0x92>
	{
		BPM = 0;                   // used to hold the pulse rate
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_GPIO_EXTI_Callback+0xa0>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
		ADCValue = 0;                // holds the incoming raw data
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
		IBI = 600;             // holds the time between beats, must be seeded!
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001618:	f44f 7216 	mov.w	r2, #600	; 0x258
 800161c:	601a      	str	r2, [r3, #0]
		Pulse = false;     // true when pulse wave is high, false when it's low
 800161e:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_GPIO_EXTI_Callback+0xac>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<=9; i++)            // seed the running total to get a realisitic BPM at startup
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	e007      	b.n	800163a <HAL_GPIO_EXTI_Callback+0x4a>
          rate[i] = 0;                    // array to hold last ten IBI values
 800162a:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <HAL_GPIO_EXTI_Callback+0xb0>)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2100      	movs	r1, #0
 8001630:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for(int i=0; i<=9; i++)            // seed the running total to get a realisitic BPM at startup
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b09      	cmp	r3, #9
 800163e:	ddf4      	ble.n	800162a <HAL_GPIO_EXTI_Callback+0x3a>
		sampleCounter = 0;          // used to determine pulse timing
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
		lastBeatTime = 0;           // used to find IBI
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
		Count = 0;
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HAL_GPIO_EXTI_Callback+0xbc>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
		P =512;                      // used to find peak in pulse wave, seeded
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001658:	601a      	str	r2, [r3, #0]
		T = 512;                     // used to find trough in pulse wave, seeded
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_GPIO_EXTI_Callback+0xc4>)
 800165c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001660:	601a      	str	r2, [r3, #0]
		thresh = 512;                // used to find instant moment of heart beat, seeded
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001668:	601a      	str	r2, [r3, #0]
		amp = 100;                   // used to hold amplitude of pulse waveform, seeded
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <HAL_GPIO_EXTI_Callback+0xcc>)
 800166c:	2264      	movs	r2, #100	; 0x64
 800166e:	601a      	str	r2, [r3, #0]
		PulseTime = 0;
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
		firstBeat = true;        // used to seed rate array so we startup with reasonable BPM
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
		secondBeat = false;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_GPIO_EXTI_Callback+0xd8>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
	}
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40020800 	.word	0x40020800
 8001690:	200001e0 	.word	0x200001e0
 8001694:	200001e8 	.word	0x200001e8
 8001698:	20000000 	.word	0x20000000
 800169c:	200000a8 	.word	0x200000a8
 80016a0:	200000d4 	.word	0x200000d4
 80016a4:	200000b0 	.word	0x200000b0
 80016a8:	200000b4 	.word	0x200000b4
 80016ac:	200000ac 	.word	0x200000ac
 80016b0:	20000004 	.word	0x20000004
 80016b4:	20000008 	.word	0x20000008
 80016b8:	2000000c 	.word	0x2000000c
 80016bc:	20000010 	.word	0x20000010
 80016c0:	200001e4 	.word	0x200001e4
 80016c4:	20000014 	.word	0x20000014
 80016c8:	200000b8 	.word	0x200000b8

080016cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	unsigned int runningTotal;
	if(htim->Instance==htim3.Instance)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b91      	ldr	r3, [pc, #580]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 811b 	bne.w	8001918 <HAL_TIM_PeriodElapsedCallback+0x24c>
	{
		ADCValue=HAL_ADC_GetValue(&hadc1);					 // read the Pulse Senso
 80016e2:	4890      	ldr	r0, [pc, #576]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80016e4:	f000 fd6a 	bl	80021bc <HAL_ADC_GetValue>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b8e      	ldr	r3, [pc, #568]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80016ee:	601a      	str	r2, [r3, #0]
		sampleCounter += 2;                         // keep track of the time in mS with this variable
 80016f0:	4b8e      	ldr	r3, [pc, #568]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	3302      	adds	r3, #2
 80016f6:	4a8d      	ldr	r2, [pc, #564]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80016f8:	6013      	str	r3, [r2, #0]
		PulseTime = sampleCounter - lastBeatTime;       // monitor the time since the last beat to avoid noise
 80016fa:	4b8c      	ldr	r3, [pc, #560]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4b8c      	ldr	r3, [pc, #560]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	461a      	mov	r2, r3
 8001706:	4b8b      	ldr	r3, [pc, #556]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001708:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);									//restart ADC conversion
 800170a:	4886      	ldr	r0, [pc, #536]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800170c:	f000 fca2 	bl	8002054 <HAL_ADC_Start>

		//  find the peak and trough of the pulse wave
  if(ADCValue < thresh && PulseTime > (IBI/5)*3){       // avoid dichrotic noise by waiting 3/5 of last IBI
 8001710:	4b85      	ldr	r3, [pc, #532]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	da18      	bge.n	800174e <HAL_TIM_PeriodElapsedCallback+0x82>
 800171c:	4b87      	ldr	r3, [pc, #540]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x270>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a87      	ldr	r2, [pc, #540]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001722:	fb82 1203 	smull	r1, r2, r2, r3
 8001726:	1052      	asrs	r2, r2, #1
 8001728:	17db      	asrs	r3, r3, #31
 800172a:	1ad2      	subs	r2, r2, r3
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	441a      	add	r2, r3
 8001732:	4b80      	ldr	r3, [pc, #512]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	da09      	bge.n	800174e <HAL_TIM_PeriodElapsedCallback+0x82>
    if (ADCValue < T){                        // T is the trough
 800173a:	4b7b      	ldr	r3, [pc, #492]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b81      	ldr	r3, [pc, #516]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	da03      	bge.n	800174e <HAL_TIM_PeriodElapsedCallback+0x82>
      T = ADCValue;                         // keep track of lowest point in pulse wave
 8001746:	4b78      	ldr	r3, [pc, #480]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a7e      	ldr	r2, [pc, #504]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800174c:	6013      	str	r3, [r2, #0]
    }
  }

  if(ADCValue > thresh && ADCValue > P){          // thresh condition helps avoid noise
 800174e:	4b76      	ldr	r3, [pc, #472]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b79      	ldr	r3, [pc, #484]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	dd09      	ble.n	800176e <HAL_TIM_PeriodElapsedCallback+0xa2>
 800175a:	4b73      	ldr	r3, [pc, #460]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b7a      	ldr	r3, [pc, #488]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	dd03      	ble.n	800176e <HAL_TIM_PeriodElapsedCallback+0xa2>
    P = ADCValue;                             // P is the peak
 8001766:	4b70      	ldr	r3, [pc, #448]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a77      	ldr	r2, [pc, #476]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800176c:	6013      	str	r3, [r2, #0]
  }                                        // keep track of highest point in pulse wave

  //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
  // ADCValue surges up in value every time there is a pulse
  if (PulseTime > 250){                                   // avoid high frequency noise
 800176e:	4b71      	ldr	r3, [pc, #452]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2bfa      	cmp	r3, #250	; 0xfa
 8001774:	f340 8088 	ble.w	8001888 <HAL_TIM_PeriodElapsedCallback+0x1bc>
    if ( (ADCValue > thresh) && (Pulse == false) && (PulseTime > (IBI/5)*3) ){
 8001778:	4b6b      	ldr	r3, [pc, #428]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b6e      	ldr	r3, [pc, #440]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	f340 8081 	ble.w	8001888 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8001786:	4b71      	ldr	r3, [pc, #452]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d17c      	bne.n	8001888 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 800178e:	4b6b      	ldr	r3, [pc, #428]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a6b      	ldr	r2, [pc, #428]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001794:	fb82 1203 	smull	r1, r2, r2, r3
 8001798:	1052      	asrs	r2, r2, #1
 800179a:	17db      	asrs	r3, r3, #31
 800179c:	1ad2      	subs	r2, r2, r3
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	441a      	add	r2, r3
 80017a4:	4b63      	ldr	r3, [pc, #396]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	da6d      	bge.n	8001888 <HAL_TIM_PeriodElapsedCallback+0x1bc>
      Pulse = true;                               // set the Pulse flag when we think there is a pulse
 80017ac:	4b67      	ldr	r3, [pc, #412]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x280>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);                // turn on pin 13 LED
 80017b2:	2200      	movs	r2, #0
 80017b4:	2120      	movs	r1, #32
 80017b6:	4866      	ldr	r0, [pc, #408]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80017b8:	f001 f9ea 	bl	8002b90 <HAL_GPIO_WritePin>
      IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS
 80017bc:	4b5b      	ldr	r3, [pc, #364]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b5b      	ldr	r3, [pc, #364]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b5c      	ldr	r3, [pc, #368]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x270>)
 80017ca:	601a      	str	r2, [r3, #0]
      lastBeatTime = sampleCounter;               // keep track of time for next pulse
 80017cc:	4b57      	ldr	r3, [pc, #348]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a57      	ldr	r2, [pc, #348]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80017d2:	6013      	str	r3, [r2, #0]

      if(secondBeat){                        // if this is the second beat, if secondBeat == TRUE
 80017d4:	4b5f      	ldr	r3, [pc, #380]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d011      	beq.n	8001800 <HAL_TIM_PeriodElapsedCallback+0x134>
        secondBeat = false;                  // clear secondBeat flag
 80017dc:	4b5d      	ldr	r3, [pc, #372]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<=9; i++){             // seed the running total to get a realisitic BPM at startup
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	e008      	b.n	80017fa <HAL_TIM_PeriodElapsedCallback+0x12e>
          rate[i] = IBI;                      
 80017e8:	4b54      	ldr	r3, [pc, #336]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x270>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	495a      	ldr	r1, [pc, #360]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for(int i=0; i<=9; i++){             // seed the running total to get a realisitic BPM at startup
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	3301      	adds	r3, #1
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	ddf3      	ble.n	80017e8 <HAL_TIM_PeriodElapsedCallback+0x11c>
        }
      }

      if(firstBeat){                         // if it's the first time we found a beat, if firstBeat == TRUE
 8001800:	4b56      	ldr	r3, [pc, #344]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <HAL_TIM_PeriodElapsedCallback+0x14a>
        firstBeat = false;                   // clear firstBeat flag
 8001808:	4b54      	ldr	r3, [pc, #336]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x290>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
        secondBeat = true;                   // set the second beat flag
 800180e:	4b51      	ldr	r3, [pc, #324]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
        return;                              // IBI value is unreliable so discard it
 8001814:	e080      	b.n	8001918 <HAL_TIM_PeriodElapsedCallback+0x24c>
      }   


      // keep a running total of the last 10 IBI values
      runningTotal = 0;                  // clear the runningTotal variable    
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]

      for(int i=0; i<=8; i++){                // shift data in the rate array
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e013      	b.n	8001848 <HAL_TIM_PeriodElapsedCallback+0x17c>
        rate[i] = rate[i+1];                  // and drop the oldest IBI value 
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3301      	adds	r3, #1
 8001824:	4a4c      	ldr	r2, [pc, #304]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001826:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800182a:	494b      	ldr	r1, [pc, #300]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        runningTotal += rate[i];              // add up the 9 oldest IBI values
 8001832:	4a49      	ldr	r2, [pc, #292]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	461a      	mov	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	4413      	add	r3, r2
 8001840:	617b      	str	r3, [r7, #20]
      for(int i=0; i<=8; i++){                // shift data in the rate array
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3301      	adds	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b08      	cmp	r3, #8
 800184c:	dde8      	ble.n	8001820 <HAL_TIM_PeriodElapsedCallback+0x154>
      }

      rate[9] = IBI;                          // add the latest IBI to the rate array
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a41      	ldr	r2, [pc, #260]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001854:	6253      	str	r3, [r2, #36]	; 0x24
      runningTotal += rate[9];                // add the latest IBI to runningTotal
 8001856:	4b40      	ldr	r3, [pc, #256]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	461a      	mov	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	4413      	add	r3, r2
 8001860:	617b      	str	r3, [r7, #20]
      runningTotal /= 10;                     // average the last 10 IBI values 
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	4a3e      	ldr	r2, [pc, #248]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	08db      	lsrs	r3, r3, #3
 800186c:	617b      	str	r3, [r7, #20]
      BPM = 60000/runningTotal;               // how many beats can fit into a minute? that's BPM!
 800186e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	fbb2 f3f3 	udiv	r3, r2, r3
 8001878:	461a      	mov	r2, r3
 800187a:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800187c:	601a      	str	r2, [r3, #0]
      Count ++;                             // set Quantified Self flag
 800187e:	4b3a      	ldr	r3, [pc, #232]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	4a38      	ldr	r2, [pc, #224]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001886:	6013      	str	r3, [r2, #0]
      // QS FLAG IS NOT CLEARED INSIDE THIS ISR
    }                       
  }

  if (ADCValue < thresh && Pulse == true){   // when the values are going down, the beat is over
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	da25      	bge.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x214>
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d121      	bne.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x214>
     HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);            // turn off pin 13 LED
 800189c:	2201      	movs	r2, #1
 800189e:	2120      	movs	r1, #32
 80018a0:	482b      	ldr	r0, [pc, #172]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80018a2:	f001 f975 	bl	8002b90 <HAL_GPIO_WritePin>
    Pulse = false;                         // reset the Pulse flag so we can do it again
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x280>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
    amp = P - T;                           // get amplitude of the pulse wave
 80018ac:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b24      	ldr	r3, [pc, #144]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	4a2d      	ldr	r2, [pc, #180]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80018b8:	6013      	str	r3, [r2, #0]
    thresh = amp/2 + T;                    // set thresh at 50% of the amplitude
 80018ba:	4b2c      	ldr	r3, [pc, #176]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	0fda      	lsrs	r2, r3, #31
 80018c0:	4413      	add	r3, r2
 80018c2:	105b      	asrs	r3, r3, #1
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a1a      	ldr	r2, [pc, #104]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018ce:	6013      	str	r3, [r2, #0]
    P = thresh;                            // reset these for next time
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a1c      	ldr	r2, [pc, #112]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80018d6:	6013      	str	r3, [r2, #0]
    T = thresh;
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a19      	ldr	r2, [pc, #100]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018de:	6013      	str	r3, [r2, #0]
  }

  if (PulseTime > 2500){                           // if 2.5 seconds go by without a beat
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80018e8:	4293      	cmp	r3, r2
 80018ea:	dd15      	ble.n	8001918 <HAL_TIM_PeriodElapsedCallback+0x24c>
    thresh = 512;                          // set thresh default
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80018ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f2:	601a      	str	r2, [r3, #0]
    P = 512;                               // set P default
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80018f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018fa:	601a      	str	r2, [r3, #0]
    T = 512;                               // set T default
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80018fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001902:	601a      	str	r2, [r3, #0]
    lastBeatTime = sampleCounter;          // bring the lastBeatTime up to date        
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800190a:	6013      	str	r3, [r2, #0]
    firstBeat = true;                      // set these to avoid noise
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x290>)
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
    secondBeat = false;                    // when we get the heartbeat back
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
  }

	}
}
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000150 	.word	0x20000150
 8001924:	20000198 	.word	0x20000198
 8001928:	200001e8 	.word	0x200001e8
 800192c:	200000b0 	.word	0x200000b0
 8001930:	200000b4 	.word	0x200000b4
 8001934:	200001e4 	.word	0x200001e4
 8001938:	2000000c 	.word	0x2000000c
 800193c:	20000000 	.word	0x20000000
 8001940:	66666667 	.word	0x66666667
 8001944:	20000008 	.word	0x20000008
 8001948:	20000004 	.word	0x20000004
 800194c:	200000a8 	.word	0x200000a8
 8001950:	40020000 	.word	0x40020000
 8001954:	200000b8 	.word	0x200000b8
 8001958:	200000d4 	.word	0x200000d4
 800195c:	20000014 	.word	0x20000014
 8001960:	cccccccd 	.word	0xcccccccd
 8001964:	200001e0 	.word	0x200001e0
 8001968:	200000ac 	.word	0x200000ac
 800196c:	20000010 	.word	0x20000010

08001970 <__io_putchar>:
//    putchar(symbol);                // symbol prefix tells Processing what type of data is coming
//		printf("%d\r\n",dat);						// the data to send culminating in a carriage return
//}

int __io_putchar(int ch)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8001978:	1d39      	adds	r1, r7, #4
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	2201      	movs	r2, #1
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <__io_putchar+0x20>)
 8001982:	f002 fe92 	bl	80046aa <HAL_UART_Transmit>
    return ch;
 8001986:	687b      	ldr	r3, [r7, #4]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200001ec 	.word	0x200001ec
 8001994:	00000000 	.word	0x00000000

08001998 <getDigits>:



int getDigits(int d, int digits)
{
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
int tempint = (int)(d / pow(10.0, digits - 1));
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7fe fdbe 	bl	8000524 <__aeabi_i2d>
 80019a8:	4604      	mov	r4, r0
 80019aa:	460d      	mov	r5, r1
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdb7 	bl	8000524 <__aeabi_i2d>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	ec43 2b11 	vmov	d1, r2, r3
 80019be:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001a08 <getDigits+0x70>
 80019c2:	f004 f8fd 	bl	8005bc0 <pow>
 80019c6:	ec53 2b10 	vmov	r2, r3, d0
 80019ca:	4620      	mov	r0, r4
 80019cc:	4629      	mov	r1, r5
 80019ce:	f7fe ff3d 	bl	800084c <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff f8bd 	bl	8000b58 <__aeabi_d2iz>
 80019de:	4603      	mov	r3, r0
 80019e0:	60fb      	str	r3, [r7, #12]
return (tempint % 10);
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <getDigits+0x78>)
 80019e6:	fb83 1302 	smull	r1, r3, r3, r2
 80019ea:	1099      	asrs	r1, r3, #2
 80019ec:	17d3      	asrs	r3, r2, #31
 80019ee:	1ac9      	subs	r1, r1, r3
 80019f0:	460b      	mov	r3, r1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	1ad1      	subs	r1, r2, r3
 80019fa:	460b      	mov	r3, r1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bdb0      	pop	{r4, r5, r7, pc}
 8001a04:	f3af 8000 	nop.w
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40240000 	.word	0x40240000
 8001a10:	66666667 	.word	0x66666667

08001a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a18:	b672      	cpsid	i
}
 8001a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <Error_Handler+0x8>
	...

08001a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a34:	6453      	str	r3, [r2, #68]	; 0x44
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_MspInit+0x4c>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a5e:	2007      	movs	r0, #7
 8001a60:	f000 feb8 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800

08001a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a17      	ldr	r2, [pc, #92]	; (8001aec <HAL_ADC_MspInit+0x7c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d127      	bne.n	8001ae2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_ADC_MspInit+0x80>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a15      	ldr	r2, [pc, #84]	; (8001af0 <HAL_ADC_MspInit+0x80>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <HAL_ADC_MspInit+0x80>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_ADC_MspInit+0x80>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_ADC_MspInit+0x80>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_ADC_MspInit+0x80>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = A0_Pin;
 8001aca:	2301      	movs	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <HAL_ADC_MspInit+0x84>)
 8001ade:	f000 febb 	bl	8002858 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	; 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40012000 	.word	0x40012000
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020000 	.word	0x40020000

08001af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <HAL_I2C_MspInit+0x84>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d12c      	bne.n	8001b74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3c:	2312      	movs	r3, #18
 8001b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b48:	2304      	movs	r3, #4
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	480c      	ldr	r0, [pc, #48]	; (8001b84 <HAL_I2C_MspInit+0x8c>)
 8001b54:	f000 fe80 	bl	8002858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b66:	6413      	str	r3, [r2, #64]	; 0x40
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_I2C_MspInit+0x88>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b74:	bf00      	nop
 8001b76:	3728      	adds	r7, #40	; 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40005400 	.word	0x40005400
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020400 	.word	0x40020400

08001b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_TIM_Base_MspInit+0x48>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d115      	bne.n	8001bc6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_TIM_Base_MspInit+0x4c>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <HAL_TIM_Base_MspInit+0x4c>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_TIM_Base_MspInit+0x4c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	201d      	movs	r0, #29
 8001bbc:	f000 fe15 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bc0:	201d      	movs	r0, #29
 8001bc2:	f000 fe2e 	bl	8002822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40000400 	.word	0x40000400
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_UART_MspInit+0x84>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d12b      	bne.n	8001c52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <HAL_UART_MspInit+0x88>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_UART_MspInit+0x88>)
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_UART_MspInit+0x88>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_UART_MspInit+0x88>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <HAL_UART_MspInit+0x88>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_UART_MspInit+0x88>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c32:	230c      	movs	r3, #12
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c42:	2307      	movs	r3, #7
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	; (8001c64 <HAL_UART_MspInit+0x8c>)
 8001c4e:	f000 fe03 	bl	8002858 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40004400 	.word	0x40004400
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020000 	.word	0x40020000

08001c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <NMI_Handler+0x4>

08001c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <HardFault_Handler+0x4>

08001c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <MemManage_Handler+0x4>

08001c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7e:	e7fe      	b.n	8001c7e <BusFault_Handler+0x4>

08001c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <UsageFault_Handler+0x4>

08001c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb4:	f000 f946 	bl	8001f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <TIM3_IRQHandler+0x10>)
 8001cc2:	f002 f915 	bl	8003ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000150 	.word	0x20000150

08001cd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001cd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001cd8:	f000 ff74 	bl	8002bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	e00a      	b.n	8001d08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cf2:	f3af 8000 	nop.w
 8001cf6:	4601      	mov	r1, r0
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	60ba      	str	r2, [r7, #8]
 8001cfe:	b2ca      	uxtb	r2, r1
 8001d00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dbf0      	blt.n	8001cf2 <_read+0x12>
	}

return len;
 8001d10:	687b      	ldr	r3, [r7, #4]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e009      	b.n	8001d40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	60ba      	str	r2, [r7, #8]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fe1b 	bl	8001970 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	dbf1      	blt.n	8001d2c <_write+0x12>
	}
	return len;
 8001d48:	687b      	ldr	r3, [r7, #4]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <_close>:

int _close(int file)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
	return -1;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <_isatty>:

int _isatty(int file)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
	return 1;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
	return 0;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc4:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <_sbrk+0x5c>)
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <_sbrk+0x60>)
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <_sbrk+0x64>)
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <_sbrk+0x68>)
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <_sbrk+0x64>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d207      	bcs.n	8001dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dec:	f002 ff02 	bl	8004bf4 <__errno>
 8001df0:	4603      	mov	r3, r0
 8001df2:	220c      	movs	r2, #12
 8001df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	e009      	b.n	8001e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <_sbrk+0x64>)
 8001e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20020000 	.word	0x20020000
 8001e1c:	00000400 	.word	0x00000400
 8001e20:	200000c8 	.word	0x200000c8
 8001e24:	20000248 	.word	0x20000248

08001e28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <SystemInit+0x20>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <SystemInit+0x20>)
 8001e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e50:	480d      	ldr	r0, [pc, #52]	; (8001e88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e52:	490e      	ldr	r1, [pc, #56]	; (8001e8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e54:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e58:	e002      	b.n	8001e60 <LoopCopyDataInit>

08001e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5e:	3304      	adds	r3, #4

08001e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e64:	d3f9      	bcc.n	8001e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e66:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e68:	4c0b      	ldr	r4, [pc, #44]	; (8001e98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e6c:	e001      	b.n	8001e72 <LoopFillZerobss>

08001e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e70:	3204      	adds	r2, #4

08001e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e74:	d3fb      	bcc.n	8001e6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e76:	f7ff ffd7 	bl	8001e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f002 fec1 	bl	8004c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7e:	f7ff f94d 	bl	800111c <main>
  bx  lr    
 8001e82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e8c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001e90:	08006c90 	.word	0x08006c90
  ldr r2, =_sbss
 8001e94:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001e98:	20000244 	.word	0x20000244

08001e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC_IRQHandler>
	...

08001ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_Init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <HAL_Init+0x40>)
 8001eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_Init+0x40>)
 8001eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <HAL_Init+0x40>)
 8001ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f000 fc83 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f000 f808 	bl	8001ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed4:	f7ff fda4 	bl	8001a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40023c00 	.word	0x40023c00

08001ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_InitTick+0x54>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_InitTick+0x58>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 fc9b 	bl	800283e <HAL_SYSTICK_Config>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00e      	b.n	8001f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	d80a      	bhi.n	8001f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f000 fc63 	bl	80027ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f24:	4a06      	ldr	r2, [pc, #24]	; (8001f40 <HAL_InitTick+0x5c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000018 	.word	0x20000018
 8001f3c:	20000020 	.word	0x20000020
 8001f40:	2000001c 	.word	0x2000001c

08001f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_IncTick+0x20>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_IncTick+0x24>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <HAL_IncTick+0x24>)
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000020 	.word	0x20000020
 8001f68:	20000230 	.word	0x20000230

08001f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <HAL_GetTick+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000230 	.word	0x20000230

08001f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f8c:	f7ff ffee 	bl	8001f6c <HAL_GetTick>
 8001f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d005      	beq.n	8001faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_Delay+0x44>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001faa:	bf00      	nop
 8001fac:	f7ff ffde 	bl	8001f6c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d8f7      	bhi.n	8001fac <HAL_Delay+0x28>
  {
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000020 	.word	0x20000020

08001fcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e033      	b.n	800204a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fd40 	bl	8001a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b00      	cmp	r3, #0
 8002008:	d118      	bne.n	800203c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002012:	f023 0302 	bic.w	r3, r3, #2
 8002016:	f043 0202 	orr.w	r2, r3, #2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fa0c 	bl	800243c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
 800203a:	e001      	b.n	8002040 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_ADC_Start+0x1a>
 800206a:	2302      	movs	r3, #2
 800206c:	e097      	b.n	800219e <HAL_ADC_Start+0x14a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b01      	cmp	r3, #1
 8002082:	d018      	beq.n	80020b6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002094:	4b45      	ldr	r3, [pc, #276]	; (80021ac <HAL_ADC_Start+0x158>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a45      	ldr	r2, [pc, #276]	; (80021b0 <HAL_ADC_Start+0x15c>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0c9a      	lsrs	r2, r3, #18
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020a8:	e002      	b.n	80020b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d15f      	bne.n	8002184 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d007      	beq.n	80020f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002102:	d106      	bne.n	8002112 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002108:	f023 0206 	bic.w	r2, r3, #6
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	645a      	str	r2, [r3, #68]	; 0x44
 8002110:	e002      	b.n	8002118 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002120:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_ADC_Start+0x160>)
 8002122:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800212c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10f      	bne.n	800215a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d129      	bne.n	800219c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	e020      	b.n	800219c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a16      	ldr	r2, [pc, #88]	; (80021b8 <HAL_ADC_Start+0x164>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d11b      	bne.n	800219c <HAL_ADC_Start+0x148>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d114      	bne.n	800219c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	e00b      	b.n	800219c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f043 0210 	orr.w	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000018 	.word	0x20000018
 80021b0:	431bde83 	.word	0x431bde83
 80021b4:	40012300 	.word	0x40012300
 80021b8:	40012000 	.word	0x40012000

080021bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1c>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e113      	b.n	800241c <HAL_ADC_ConfigChannel+0x244>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b09      	cmp	r3, #9
 8002202:	d925      	bls.n	8002250 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68d9      	ldr	r1, [r3, #12]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	4613      	mov	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	3b1e      	subs	r3, #30
 800221a:	2207      	movs	r2, #7
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43da      	mvns	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	400a      	ands	r2, r1
 8002228:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68d9      	ldr	r1, [r3, #12]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	4618      	mov	r0, r3
 800223c:	4603      	mov	r3, r0
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4403      	add	r3, r0
 8002242:	3b1e      	subs	r3, #30
 8002244:	409a      	lsls	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	e022      	b.n	8002296 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6919      	ldr	r1, [r3, #16]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	2207      	movs	r2, #7
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43da      	mvns	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	400a      	ands	r2, r1
 8002272:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6919      	ldr	r1, [r3, #16]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	4618      	mov	r0, r3
 8002286:	4603      	mov	r3, r0
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4403      	add	r3, r0
 800228c:	409a      	lsls	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b06      	cmp	r3, #6
 800229c:	d824      	bhi.n	80022e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	3b05      	subs	r3, #5
 80022b0:	221f      	movs	r2, #31
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	400a      	ands	r2, r1
 80022be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	4618      	mov	r0, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	3b05      	subs	r3, #5
 80022da:	fa00 f203 	lsl.w	r2, r0, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	635a      	str	r2, [r3, #52]	; 0x34
 80022e6:	e04c      	b.n	8002382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	d824      	bhi.n	800233a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	3b23      	subs	r3, #35	; 0x23
 8002302:	221f      	movs	r2, #31
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43da      	mvns	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	400a      	ands	r2, r1
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	b29b      	uxth	r3, r3
 800231e:	4618      	mov	r0, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	3b23      	subs	r3, #35	; 0x23
 800232c:	fa00 f203 	lsl.w	r2, r0, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
 8002338:	e023      	b.n	8002382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	3b41      	subs	r3, #65	; 0x41
 800234c:	221f      	movs	r2, #31
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	400a      	ands	r2, r1
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	4618      	mov	r0, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	3b41      	subs	r3, #65	; 0x41
 8002376:	fa00 f203 	lsl.w	r2, r0, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002382:	4b29      	ldr	r3, [pc, #164]	; (8002428 <HAL_ADC_ConfigChannel+0x250>)
 8002384:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a28      	ldr	r2, [pc, #160]	; (800242c <HAL_ADC_ConfigChannel+0x254>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d10f      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1d8>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b12      	cmp	r3, #18
 8002396:	d10b      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1d      	ldr	r2, [pc, #116]	; (800242c <HAL_ADC_ConfigChannel+0x254>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d12b      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x23a>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <HAL_ADC_ConfigChannel+0x258>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d003      	beq.n	80023cc <HAL_ADC_ConfigChannel+0x1f4>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b11      	cmp	r3, #17
 80023ca:	d122      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a11      	ldr	r2, [pc, #68]	; (8002430 <HAL_ADC_ConfigChannel+0x258>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d111      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <HAL_ADC_ConfigChannel+0x25c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a11      	ldr	r2, [pc, #68]	; (8002438 <HAL_ADC_ConfigChannel+0x260>)
 80023f4:	fba2 2303 	umull	r2, r3, r2, r3
 80023f8:	0c9a      	lsrs	r2, r3, #18
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002404:	e002      	b.n	800240c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3b01      	subs	r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f9      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40012300 	.word	0x40012300
 800242c:	40012000 	.word	0x40012000
 8002430:	10000012 	.word	0x10000012
 8002434:	20000018 	.word	0x20000018
 8002438:	431bde83 	.word	0x431bde83

0800243c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002444:	4b79      	ldr	r3, [pc, #484]	; (800262c <ADC_Init+0x1f0>)
 8002446:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	431a      	orrs	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002470:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	021a      	lsls	r2, r3, #8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6899      	ldr	r1, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	4a58      	ldr	r2, [pc, #352]	; (8002630 <ADC_Init+0x1f4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d022      	beq.n	800251a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6899      	ldr	r1, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002504:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	e00f      	b.n	800253a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002538:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0202 	bic.w	r2, r2, #2
 8002548:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6899      	ldr	r1, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7e1b      	ldrb	r3, [r3, #24]
 8002554:	005a      	lsls	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01b      	beq.n	80025a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002576:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002586:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	3b01      	subs	r3, #1
 8002594:	035a      	lsls	r2, r3, #13
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	e007      	b.n	80025b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	051a      	lsls	r2, r3, #20
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6899      	ldr	r1, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025f2:	025a      	lsls	r2, r3, #9
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800260a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6899      	ldr	r1, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	029a      	lsls	r2, r3, #10
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	40012300 	.word	0x40012300
 8002630:	0f000001 	.word	0x0f000001

08002634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <__NVIC_SetPriorityGrouping+0x44>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800265c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002666:	4a04      	ldr	r2, [pc, #16]	; (8002678 <__NVIC_SetPriorityGrouping+0x44>)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	60d3      	str	r3, [r2, #12]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <__NVIC_GetPriorityGrouping+0x18>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	f003 0307 	and.w	r3, r3, #7
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	db0b      	blt.n	80026c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	f003 021f 	and.w	r2, r3, #31
 80026b0:	4907      	ldr	r1, [pc, #28]	; (80026d0 <__NVIC_EnableIRQ+0x38>)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	2001      	movs	r0, #1
 80026ba:	fa00 f202 	lsl.w	r2, r0, r2
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000e100 	.word	0xe000e100

080026d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	6039      	str	r1, [r7, #0]
 80026de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	db0a      	blt.n	80026fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	490c      	ldr	r1, [pc, #48]	; (8002720 <__NVIC_SetPriority+0x4c>)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	0112      	lsls	r2, r2, #4
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	440b      	add	r3, r1
 80026f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026fc:	e00a      	b.n	8002714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4908      	ldr	r1, [pc, #32]	; (8002724 <__NVIC_SetPriority+0x50>)
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	3b04      	subs	r3, #4
 800270c:	0112      	lsls	r2, r2, #4
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	440b      	add	r3, r1
 8002712:	761a      	strb	r2, [r3, #24]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000e100 	.word	0xe000e100
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f1c3 0307 	rsb	r3, r3, #7
 8002742:	2b04      	cmp	r3, #4
 8002744:	bf28      	it	cs
 8002746:	2304      	movcs	r3, #4
 8002748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3304      	adds	r3, #4
 800274e:	2b06      	cmp	r3, #6
 8002750:	d902      	bls.n	8002758 <NVIC_EncodePriority+0x30>
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3b03      	subs	r3, #3
 8002756:	e000      	b.n	800275a <NVIC_EncodePriority+0x32>
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	f04f 32ff 	mov.w	r2, #4294967295
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43da      	mvns	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	401a      	ands	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002770:	f04f 31ff 	mov.w	r1, #4294967295
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	43d9      	mvns	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002780:	4313      	orrs	r3, r2
         );
}
 8002782:	4618      	mov	r0, r3
 8002784:	3724      	adds	r7, #36	; 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3b01      	subs	r3, #1
 800279c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a0:	d301      	bcc.n	80027a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00f      	b.n	80027c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <SysTick_Config+0x40>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ae:	210f      	movs	r1, #15
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f7ff ff8e 	bl	80026d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <SysTick_Config+0x40>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027be:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <SysTick_Config+0x40>)
 80027c0:	2207      	movs	r2, #7
 80027c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	e000e010 	.word	0xe000e010

080027d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff29 	bl	8002634 <__NVIC_SetPriorityGrouping>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027fc:	f7ff ff3e 	bl	800267c <__NVIC_GetPriorityGrouping>
 8002800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	6978      	ldr	r0, [r7, #20]
 8002808:	f7ff ff8e 	bl	8002728 <NVIC_EncodePriority>
 800280c:	4602      	mov	r2, r0
 800280e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff5d 	bl	80026d4 <__NVIC_SetPriority>
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff31 	bl	8002698 <__NVIC_EnableIRQ>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ffa2 	bl	8002790 <SysTick_Config>
 800284c:	4603      	mov	r3, r0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	e159      	b.n	8002b28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002874:	2201      	movs	r2, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	429a      	cmp	r2, r3
 800288e:	f040 8148 	bne.w	8002b22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d005      	beq.n	80028aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d130      	bne.n	800290c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	2203      	movs	r2, #3
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e0:	2201      	movs	r2, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 0201 	and.w	r2, r3, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b03      	cmp	r3, #3
 8002916:	d017      	beq.n	8002948 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d123      	bne.n	800299c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	220f      	movs	r2, #15
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	08da      	lsrs	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3208      	adds	r2, #8
 8002996:	69b9      	ldr	r1, [r7, #24]
 8002998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0203 	and.w	r2, r3, #3
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80a2 	beq.w	8002b22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b57      	ldr	r3, [pc, #348]	; (8002b40 <HAL_GPIO_Init+0x2e8>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	4a56      	ldr	r2, [pc, #344]	; (8002b40 <HAL_GPIO_Init+0x2e8>)
 80029e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ec:	6453      	str	r3, [r2, #68]	; 0x44
 80029ee:	4b54      	ldr	r3, [pc, #336]	; (8002b40 <HAL_GPIO_Init+0x2e8>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029fa:	4a52      	ldr	r2, [pc, #328]	; (8002b44 <HAL_GPIO_Init+0x2ec>)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	3302      	adds	r3, #2
 8002a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	220f      	movs	r2, #15
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a49      	ldr	r2, [pc, #292]	; (8002b48 <HAL_GPIO_Init+0x2f0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d019      	beq.n	8002a5a <HAL_GPIO_Init+0x202>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a48      	ldr	r2, [pc, #288]	; (8002b4c <HAL_GPIO_Init+0x2f4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_GPIO_Init+0x1fe>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a47      	ldr	r2, [pc, #284]	; (8002b50 <HAL_GPIO_Init+0x2f8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00d      	beq.n	8002a52 <HAL_GPIO_Init+0x1fa>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a46      	ldr	r2, [pc, #280]	; (8002b54 <HAL_GPIO_Init+0x2fc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <HAL_GPIO_Init+0x1f6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a45      	ldr	r2, [pc, #276]	; (8002b58 <HAL_GPIO_Init+0x300>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_GPIO_Init+0x1f2>
 8002a46:	2304      	movs	r3, #4
 8002a48:	e008      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a4a:	2307      	movs	r3, #7
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e004      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e002      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_GPIO_Init+0x204>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	f002 0203 	and.w	r2, r2, #3
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	4093      	lsls	r3, r2
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a6c:	4935      	ldr	r1, [pc, #212]	; (8002b44 <HAL_GPIO_Init+0x2ec>)
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	3302      	adds	r3, #2
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a7a:	4b38      	ldr	r3, [pc, #224]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a9e:	4a2f      	ldr	r2, [pc, #188]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac8:	4a24      	ldr	r2, [pc, #144]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ace:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002af2:	4a1a      	ldr	r2, [pc, #104]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b1c:	4a0f      	ldr	r2, [pc, #60]	; (8002b5c <HAL_GPIO_Init+0x304>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	f67f aea2 	bls.w	8002874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3724      	adds	r7, #36	; 0x24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40013800 	.word	0x40013800
 8002b48:	40020000 	.word	0x40020000
 8002b4c:	40020400 	.word	0x40020400
 8002b50:	40020800 	.word	0x40020800
 8002b54:	40020c00 	.word	0x40020c00
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40013c00 	.word	0x40013c00

08002b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	887b      	ldrh	r3, [r7, #2]
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	e001      	b.n	8002b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba0:	787b      	ldrb	r3, [r7, #1]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ba6:	887a      	ldrh	r2, [r7, #2]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bac:	e003      	b.n	8002bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bae:	887b      	ldrh	r3, [r7, #2]
 8002bb0:	041a      	lsls	r2, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	619a      	str	r2, [r3, #24]
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d006      	beq.n	8002be8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bda:	4a05      	ldr	r2, [pc, #20]	; (8002bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fd04 	bl	80015f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40013c00 	.word	0x40013c00

08002bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e12b      	b.n	8002e5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe ff6c 	bl	8001af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	; 0x24
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c58:	f001 f870 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 8002c5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4a81      	ldr	r2, [pc, #516]	; (8002e68 <HAL_I2C_Init+0x274>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d807      	bhi.n	8002c78 <HAL_I2C_Init+0x84>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a80      	ldr	r2, [pc, #512]	; (8002e6c <HAL_I2C_Init+0x278>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	bf94      	ite	ls
 8002c70:	2301      	movls	r3, #1
 8002c72:	2300      	movhi	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e006      	b.n	8002c86 <HAL_I2C_Init+0x92>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a7d      	ldr	r2, [pc, #500]	; (8002e70 <HAL_I2C_Init+0x27c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	bf94      	ite	ls
 8002c80:	2301      	movls	r3, #1
 8002c82:	2300      	movhi	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0e7      	b.n	8002e5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4a78      	ldr	r2, [pc, #480]	; (8002e74 <HAL_I2C_Init+0x280>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0c9b      	lsrs	r3, r3, #18
 8002c98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	4a6a      	ldr	r2, [pc, #424]	; (8002e68 <HAL_I2C_Init+0x274>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d802      	bhi.n	8002cc8 <HAL_I2C_Init+0xd4>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	e009      	b.n	8002cdc <HAL_I2C_Init+0xe8>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cce:	fb02 f303 	mul.w	r3, r2, r3
 8002cd2:	4a69      	ldr	r2, [pc, #420]	; (8002e78 <HAL_I2C_Init+0x284>)
 8002cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	3301      	adds	r3, #1
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	495c      	ldr	r1, [pc, #368]	; (8002e68 <HAL_I2C_Init+0x274>)
 8002cf8:	428b      	cmp	r3, r1
 8002cfa:	d819      	bhi.n	8002d30 <HAL_I2C_Init+0x13c>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e59      	subs	r1, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0a:	1c59      	adds	r1, r3, #1
 8002d0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d10:	400b      	ands	r3, r1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_I2C_Init+0x138>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1e59      	subs	r1, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2a:	e051      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d2c:	2304      	movs	r3, #4
 8002d2e:	e04f      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d111      	bne.n	8002d5c <HAL_I2C_Init+0x168>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e58      	subs	r0, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	440b      	add	r3, r1
 8002d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e012      	b.n	8002d82 <HAL_I2C_Init+0x18e>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	0099      	lsls	r1, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Init+0x196>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e022      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10e      	bne.n	8002db0 <HAL_I2C_Init+0x1bc>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1e58      	subs	r0, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6859      	ldr	r1, [r3, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	440b      	add	r3, r1
 8002da0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da4:	3301      	adds	r3, #1
 8002da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dae:	e00f      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1e58      	subs	r0, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	0099      	lsls	r1, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	6809      	ldr	r1, [r1, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6911      	ldr	r1, [r2, #16]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68d2      	ldr	r2, [r2, #12]
 8002e0a:	4311      	orrs	r1, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	000186a0 	.word	0x000186a0
 8002e6c:	001e847f 	.word	0x001e847f
 8002e70:	003d08ff 	.word	0x003d08ff
 8002e74:	431bde83 	.word	0x431bde83
 8002e78:	10624dd3 	.word	0x10624dd3

08002e7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	461a      	mov	r2, r3
 8002e88:	460b      	mov	r3, r1
 8002e8a:	817b      	strh	r3, [r7, #10]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7ff f86c 	bl	8001f6c <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	f040 80e0 	bne.w	8003064 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	2319      	movs	r3, #25
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4970      	ldr	r1, [pc, #448]	; (8003070 <HAL_I2C_Master_Transmit+0x1f4>)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f970 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e0d3      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_I2C_Master_Transmit+0x50>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e0cc      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d007      	beq.n	8002ef2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2221      	movs	r2, #33	; 0x21
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	893a      	ldrh	r2, [r7, #8]
 8002f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4a50      	ldr	r2, [pc, #320]	; (8003074 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f34:	8979      	ldrh	r1, [r7, #10]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	6a3a      	ldr	r2, [r7, #32]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f8a8 	bl	8003090 <I2C_MasterRequestWrite>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e08d      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f60:	e066      	b.n	8003030 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	6a39      	ldr	r1, [r7, #32]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f9ea 	bl	8003340 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d107      	bne.n	8002f8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06b      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d11b      	bne.n	8003004 <HAL_I2C_Master_Transmit+0x188>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d017      	beq.n	8003004 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	6a39      	ldr	r1, [r7, #32]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f9da 	bl	80033c2 <I2C_WaitOnBTFFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00d      	beq.n	8003030 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	2b04      	cmp	r3, #4
 800301a:	d107      	bne.n	800302c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e01a      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	2b00      	cmp	r3, #0
 8003036:	d194      	bne.n	8002f62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	00100002 	.word	0x00100002
 8003074:	ffff0000 	.word	0xffff0000

08003078 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af02      	add	r7, sp, #8
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	460b      	mov	r3, r1
 800309e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d006      	beq.n	80030ba <I2C_MasterRequestWrite+0x2a>
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d003      	beq.n	80030ba <I2C_MasterRequestWrite+0x2a>
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030b8:	d108      	bne.n	80030cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e00b      	b.n	80030e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	2b12      	cmp	r3, #18
 80030d2:	d107      	bne.n	80030e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f84f 	bl	8003194 <I2C_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00d      	beq.n	8003118 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310a:	d103      	bne.n	8003114 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003112:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e035      	b.n	8003184 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003120:	d108      	bne.n	8003134 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003122:	897b      	ldrh	r3, [r7, #10]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003130:	611a      	str	r2, [r3, #16]
 8003132:	e01b      	b.n	800316c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003134:	897b      	ldrh	r3, [r7, #10]
 8003136:	11db      	asrs	r3, r3, #7
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f003 0306 	and.w	r3, r3, #6
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f063 030f 	orn	r3, r3, #15
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	490e      	ldr	r1, [pc, #56]	; (800318c <I2C_MasterRequestWrite+0xfc>)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f875 	bl	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e010      	b.n	8003184 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003162:	897b      	ldrh	r3, [r7, #10]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4907      	ldr	r1, [pc, #28]	; (8003190 <I2C_MasterRequestWrite+0x100>)
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f865 	bl	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	00010008 	.word	0x00010008
 8003190:	00010002 	.word	0x00010002

08003194 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	603b      	str	r3, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031a4:	e025      	b.n	80031f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d021      	beq.n	80031f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ae:	f7fe fedd 	bl	8001f6c <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d302      	bcc.n	80031c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d116      	bne.n	80031f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f043 0220 	orr.w	r2, r3, #32
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e023      	b.n	800323a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d10d      	bne.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	43da      	mvns	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4013      	ands	r3, r2
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	e00c      	b.n	8003232 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	43da      	mvns	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4013      	ands	r3, r2
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	bf0c      	ite	eq
 800322a:	2301      	moveq	r3, #1
 800322c:	2300      	movne	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	429a      	cmp	r2, r3
 8003236:	d0b6      	beq.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003250:	e051      	b.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800325c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003260:	d123      	bne.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003270:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800327a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f043 0204 	orr.w	r2, r3, #4
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e046      	b.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	d021      	beq.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b2:	f7fe fe5b 	bl	8001f6c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d302      	bcc.n	80032c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d116      	bne.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f043 0220 	orr.w	r2, r3, #32
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e020      	b.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d10c      	bne.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	43da      	mvns	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4013      	ands	r3, r2
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	e00b      	b.n	8003332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	43da      	mvns	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4013      	ands	r3, r2
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d18d      	bne.n	8003252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800334c:	e02d      	b.n	80033aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f878 	bl	8003444 <I2C_IsAcknowledgeFailed>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e02d      	b.n	80033ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d021      	beq.n	80033aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003366:	f7fe fe01 	bl	8001f6c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d116      	bne.n	80033aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f043 0220 	orr.w	r2, r3, #32
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e007      	b.n	80033ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b80      	cmp	r3, #128	; 0x80
 80033b6:	d1ca      	bne.n	800334e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033ce:	e02d      	b.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f837 	bl	8003444 <I2C_IsAcknowledgeFailed>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e02d      	b.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e6:	d021      	beq.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e8:	f7fe fdc0 	bl	8001f6c <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d302      	bcc.n	80033fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d116      	bne.n	800342c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e007      	b.n	800343c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b04      	cmp	r3, #4
 8003438:	d1ca      	bne.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345a:	d11b      	bne.n	8003494 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003464:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f043 0204 	orr.w	r2, r3, #4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e264      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d075      	beq.n	80035ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034c2:	4ba3      	ldr	r3, [pc, #652]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d00c      	beq.n	80034e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ce:	4ba0      	ldr	r3, [pc, #640]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d112      	bne.n	8003500 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034da:	4b9d      	ldr	r3, [pc, #628]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e6:	d10b      	bne.n	8003500 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e8:	4b99      	ldr	r3, [pc, #612]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d05b      	beq.n	80035ac <HAL_RCC_OscConfig+0x108>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d157      	bne.n	80035ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e23f      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d106      	bne.n	8003518 <HAL_RCC_OscConfig+0x74>
 800350a:	4b91      	ldr	r3, [pc, #580]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a90      	ldr	r2, [pc, #576]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e01d      	b.n	8003554 <HAL_RCC_OscConfig+0xb0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0x98>
 8003522:	4b8b      	ldr	r3, [pc, #556]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a8a      	ldr	r2, [pc, #552]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b88      	ldr	r3, [pc, #544]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a87      	ldr	r2, [pc, #540]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e00b      	b.n	8003554 <HAL_RCC_OscConfig+0xb0>
 800353c:	4b84      	ldr	r3, [pc, #528]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a83      	ldr	r2, [pc, #524]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4b81      	ldr	r3, [pc, #516]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a80      	ldr	r2, [pc, #512]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 800354e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d013      	beq.n	8003584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fe fd06 	bl	8001f6c <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003564:	f7fe fd02 	bl	8001f6c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e204      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b76      	ldr	r3, [pc, #472]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0xc0>
 8003582:	e014      	b.n	80035ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fe fcf2 	bl	8001f6c <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800358c:	f7fe fcee 	bl	8001f6c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	; 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e1f0      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359e:	4b6c      	ldr	r3, [pc, #432]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0xe8>
 80035aa:	e000      	b.n	80035ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d063      	beq.n	8003682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ba:	4b65      	ldr	r3, [pc, #404]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c6:	4b62      	ldr	r3, [pc, #392]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d11c      	bne.n	800360c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035d2:	4b5f      	ldr	r3, [pc, #380]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d116      	bne.n	800360c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035de:	4b5c      	ldr	r3, [pc, #368]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_RCC_OscConfig+0x152>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d001      	beq.n	80035f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e1c4      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f6:	4b56      	ldr	r3, [pc, #344]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4952      	ldr	r1, [pc, #328]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360a:	e03a      	b.n	8003682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d020      	beq.n	8003656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003614:	4b4f      	ldr	r3, [pc, #316]	; (8003754 <HAL_RCC_OscConfig+0x2b0>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361a:	f7fe fca7 	bl	8001f6c <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003622:	f7fe fca3 	bl	8001f6c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e1a5      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003634:	4b46      	ldr	r3, [pc, #280]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0f0      	beq.n	8003622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003640:	4b43      	ldr	r3, [pc, #268]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4940      	ldr	r1, [pc, #256]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003650:	4313      	orrs	r3, r2
 8003652:	600b      	str	r3, [r1, #0]
 8003654:	e015      	b.n	8003682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003656:	4b3f      	ldr	r3, [pc, #252]	; (8003754 <HAL_RCC_OscConfig+0x2b0>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fe fc86 	bl	8001f6c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003664:	f7fe fc82 	bl	8001f6c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e184      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003676:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d030      	beq.n	80036f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d016      	beq.n	80036c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003696:	4b30      	ldr	r3, [pc, #192]	; (8003758 <HAL_RCC_OscConfig+0x2b4>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fe fc66 	bl	8001f6c <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a4:	f7fe fc62 	bl	8001f6c <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e164      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b6:	4b26      	ldr	r3, [pc, #152]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x200>
 80036c2:	e015      	b.n	80036f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c4:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_RCC_OscConfig+0x2b4>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ca:	f7fe fc4f 	bl	8001f6c <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d2:	f7fe fc4b 	bl	8001f6c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e14d      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e4:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 80036e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80a0 	beq.w	800383e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003702:	4b13      	ldr	r3, [pc, #76]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	4a0e      	ldr	r2, [pc, #56]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371c:	6413      	str	r3, [r2, #64]	; 0x40
 800371e:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <HAL_RCC_OscConfig+0x2ac>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_OscConfig+0x2b8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d121      	bne.n	800377e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <HAL_RCC_OscConfig+0x2b8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a07      	ldr	r2, [pc, #28]	; (800375c <HAL_RCC_OscConfig+0x2b8>)
 8003740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003746:	f7fe fc11 	bl	8001f6c <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374c:	e011      	b.n	8003772 <HAL_RCC_OscConfig+0x2ce>
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	42470000 	.word	0x42470000
 8003758:	42470e80 	.word	0x42470e80
 800375c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003760:	f7fe fc04 	bl	8001f6c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e106      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b85      	ldr	r3, [pc, #532]	; (8003988 <HAL_RCC_OscConfig+0x4e4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d106      	bne.n	8003794 <HAL_RCC_OscConfig+0x2f0>
 8003786:	4b81      	ldr	r3, [pc, #516]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378a:	4a80      	ldr	r2, [pc, #512]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6713      	str	r3, [r2, #112]	; 0x70
 8003792:	e01c      	b.n	80037ce <HAL_RCC_OscConfig+0x32a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b05      	cmp	r3, #5
 800379a:	d10c      	bne.n	80037b6 <HAL_RCC_OscConfig+0x312>
 800379c:	4b7b      	ldr	r3, [pc, #492]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	4a7a      	ldr	r2, [pc, #488]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 80037a2:	f043 0304 	orr.w	r3, r3, #4
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70
 80037a8:	4b78      	ldr	r3, [pc, #480]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4a77      	ldr	r2, [pc, #476]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6713      	str	r3, [r2, #112]	; 0x70
 80037b4:	e00b      	b.n	80037ce <HAL_RCC_OscConfig+0x32a>
 80037b6:	4b75      	ldr	r3, [pc, #468]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	4a74      	ldr	r2, [pc, #464]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	6713      	str	r3, [r2, #112]	; 0x70
 80037c2:	4b72      	ldr	r3, [pc, #456]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	4a71      	ldr	r2, [pc, #452]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 80037c8:	f023 0304 	bic.w	r3, r3, #4
 80037cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d015      	beq.n	8003802 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d6:	f7fe fbc9 	bl	8001f6c <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fe fbc5 	bl	8001f6c <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e0c5      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f4:	4b65      	ldr	r3, [pc, #404]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ee      	beq.n	80037de <HAL_RCC_OscConfig+0x33a>
 8003800:	e014      	b.n	800382c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003802:	f7fe fbb3 	bl	8001f6c <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003808:	e00a      	b.n	8003820 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800380a:	f7fe fbaf 	bl	8001f6c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f241 3288 	movw	r2, #5000	; 0x1388
 8003818:	4293      	cmp	r3, r2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e0af      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003820:	4b5a      	ldr	r3, [pc, #360]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ee      	bne.n	800380a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800382c:	7dfb      	ldrb	r3, [r7, #23]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d105      	bne.n	800383e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003832:	4b56      	ldr	r3, [pc, #344]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	4a55      	ldr	r2, [pc, #340]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 8003838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 809b 	beq.w	800397e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003848:	4b50      	ldr	r3, [pc, #320]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 030c 	and.w	r3, r3, #12
 8003850:	2b08      	cmp	r3, #8
 8003852:	d05c      	beq.n	800390e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d141      	bne.n	80038e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385c:	4b4c      	ldr	r3, [pc, #304]	; (8003990 <HAL_RCC_OscConfig+0x4ec>)
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003862:	f7fe fb83 	bl	8001f6c <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800386a:	f7fe fb7f 	bl	8001f6c <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e081      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387c:	4b43      	ldr	r3, [pc, #268]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f0      	bne.n	800386a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	019b      	lsls	r3, r3, #6
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	3b01      	subs	r3, #1
 80038a2:	041b      	lsls	r3, r3, #16
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	061b      	lsls	r3, r3, #24
 80038ac:	4937      	ldr	r1, [pc, #220]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b2:	4b37      	ldr	r3, [pc, #220]	; (8003990 <HAL_RCC_OscConfig+0x4ec>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fe fb58 	bl	8001f6c <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fe fb54 	bl	8001f6c <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e056      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d2:	4b2e      	ldr	r3, [pc, #184]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x41c>
 80038de:	e04e      	b.n	800397e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e0:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <HAL_RCC_OscConfig+0x4ec>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e6:	f7fe fb41 	bl	8001f6c <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ee:	f7fe fb3d 	bl	8001f6c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e03f      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003900:	4b22      	ldr	r3, [pc, #136]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x44a>
 800390c:	e037      	b.n	800397e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e032      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800391a:	4b1c      	ldr	r3, [pc, #112]	; (800398c <HAL_RCC_OscConfig+0x4e8>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d028      	beq.n	800397a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003932:	429a      	cmp	r2, r3
 8003934:	d121      	bne.n	800397a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d11a      	bne.n	800397a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800394a:	4013      	ands	r3, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003950:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003952:	4293      	cmp	r3, r2
 8003954:	d111      	bne.n	800397a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	085b      	lsrs	r3, r3, #1
 8003962:	3b01      	subs	r3, #1
 8003964:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003966:	429a      	cmp	r2, r3
 8003968:	d107      	bne.n	800397a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40007000 	.word	0x40007000
 800398c:	40023800 	.word	0x40023800
 8003990:	42470060 	.word	0x42470060

08003994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0cc      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a8:	4b68      	ldr	r3, [pc, #416]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d90c      	bls.n	80039d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b65      	ldr	r3, [pc, #404]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	4b63      	ldr	r3, [pc, #396]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0b8      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d020      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e8:	4b59      	ldr	r3, [pc, #356]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4a58      	ldr	r2, [pc, #352]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a00:	4b53      	ldr	r3, [pc, #332]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	4a52      	ldr	r2, [pc, #328]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a0c:	4b50      	ldr	r3, [pc, #320]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	494d      	ldr	r1, [pc, #308]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d044      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	4b47      	ldr	r3, [pc, #284]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d119      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e07f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d003      	beq.n	8003a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d107      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a52:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e06f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a62:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e067      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a72:	4b37      	ldr	r3, [pc, #220]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f023 0203 	bic.w	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4934      	ldr	r1, [pc, #208]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a84:	f7fe fa72 	bl	8001f6c <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	e00a      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a8c:	f7fe fa6e 	bl	8001f6c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e04f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	4b2b      	ldr	r3, [pc, #172]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 020c 	and.w	r2, r3, #12
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d1eb      	bne.n	8003a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab4:	4b25      	ldr	r3, [pc, #148]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d20c      	bcs.n	8003adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_RCC_ClockConfig+0x1b8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e032      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae8:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4916      	ldr	r1, [pc, #88]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	490e      	ldr	r1, [pc, #56]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b1a:	f000 f821 	bl	8003b60 <HAL_RCC_GetSysClockFreq>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	490a      	ldr	r1, [pc, #40]	; (8003b54 <HAL_RCC_ClockConfig+0x1c0>)
 8003b2c:	5ccb      	ldrb	r3, [r1, r3]
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b36:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe f9d2 	bl	8001ee4 <HAL_InitTick>

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023c00 	.word	0x40023c00
 8003b50:	40023800 	.word	0x40023800
 8003b54:	08006b8c 	.word	0x08006b8c
 8003b58:	20000018 	.word	0x20000018
 8003b5c:	2000001c 	.word	0x2000001c

08003b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	2300      	movs	r3, #0
 8003b72:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b78:	4b67      	ldr	r3, [pc, #412]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 030c 	and.w	r3, r3, #12
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d00d      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	f200 80bd 	bhi.w	8003d04 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x34>
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d003      	beq.n	8003b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b92:	e0b7      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b94:	4b61      	ldr	r3, [pc, #388]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b96:	60bb      	str	r3, [r7, #8]
       break;
 8003b98:	e0b7      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b9a:	4b61      	ldr	r3, [pc, #388]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003b9c:	60bb      	str	r3, [r7, #8]
      break;
 8003b9e:	e0b4      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba0:	4b5d      	ldr	r3, [pc, #372]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ba8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003baa:	4b5b      	ldr	r3, [pc, #364]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d04d      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb6:	4b58      	ldr	r3, [pc, #352]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	099b      	lsrs	r3, r3, #6
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	ea02 0800 	and.w	r8, r2, r0
 8003bce:	ea03 0901 	and.w	r9, r3, r1
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	4649      	mov	r1, r9
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	014b      	lsls	r3, r1, #5
 8003be0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003be4:	0142      	lsls	r2, r0, #5
 8003be6:	4610      	mov	r0, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	ebb0 0008 	subs.w	r0, r0, r8
 8003bee:	eb61 0109 	sbc.w	r1, r1, r9
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	018b      	lsls	r3, r1, #6
 8003bfc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c00:	0182      	lsls	r2, r0, #6
 8003c02:	1a12      	subs	r2, r2, r0
 8003c04:	eb63 0301 	sbc.w	r3, r3, r1
 8003c08:	f04f 0000 	mov.w	r0, #0
 8003c0c:	f04f 0100 	mov.w	r1, #0
 8003c10:	00d9      	lsls	r1, r3, #3
 8003c12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c16:	00d0      	lsls	r0, r2, #3
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	eb12 0208 	adds.w	r2, r2, r8
 8003c20:	eb43 0309 	adc.w	r3, r3, r9
 8003c24:	f04f 0000 	mov.w	r0, #0
 8003c28:	f04f 0100 	mov.w	r1, #0
 8003c2c:	0259      	lsls	r1, r3, #9
 8003c2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c32:	0250      	lsls	r0, r2, #9
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	f7fd f800 	bl	8000c48 <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e04a      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c52:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	099b      	lsrs	r3, r3, #6
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	ea02 0400 	and.w	r4, r2, r0
 8003c6a:	ea03 0501 	and.w	r5, r3, r1
 8003c6e:	4620      	mov	r0, r4
 8003c70:	4629      	mov	r1, r5
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	014b      	lsls	r3, r1, #5
 8003c7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c80:	0142      	lsls	r2, r0, #5
 8003c82:	4610      	mov	r0, r2
 8003c84:	4619      	mov	r1, r3
 8003c86:	1b00      	subs	r0, r0, r4
 8003c88:	eb61 0105 	sbc.w	r1, r1, r5
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	018b      	lsls	r3, r1, #6
 8003c96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c9a:	0182      	lsls	r2, r0, #6
 8003c9c:	1a12      	subs	r2, r2, r0
 8003c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003ca2:	f04f 0000 	mov.w	r0, #0
 8003ca6:	f04f 0100 	mov.w	r1, #0
 8003caa:	00d9      	lsls	r1, r3, #3
 8003cac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cb0:	00d0      	lsls	r0, r2, #3
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	1912      	adds	r2, r2, r4
 8003cb8:	eb45 0303 	adc.w	r3, r5, r3
 8003cbc:	f04f 0000 	mov.w	r0, #0
 8003cc0:	f04f 0100 	mov.w	r1, #0
 8003cc4:	0299      	lsls	r1, r3, #10
 8003cc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cca:	0290      	lsls	r0, r2, #10
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	f7fc ffb4 	bl	8000c48 <__aeabi_uldivmod>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	0c1b      	lsrs	r3, r3, #16
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	60bb      	str	r3, [r7, #8]
      break;
 8003d02:	e002      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d06:	60bb      	str	r3, [r7, #8]
      break;
 8003d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	00f42400 	.word	0x00f42400
 8003d20:	007a1200 	.word	0x007a1200

08003d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000018 	.word	0x20000018

08003d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d40:	f7ff fff0 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	0a9b      	lsrs	r3, r3, #10
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4903      	ldr	r1, [pc, #12]	; (8003d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	08006b9c 	.word	0x08006b9c

08003d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d68:	f7ff ffdc 	bl	8003d24 <HAL_RCC_GetHCLKFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	0b5b      	lsrs	r3, r3, #13
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	4903      	ldr	r1, [pc, #12]	; (8003d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	08006b9c 	.word	0x08006b9c

08003d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e041      	b.n	8003e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fd fee8 	bl	8001b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f000 fa84 	bl	80042d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d001      	beq.n	8003e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e044      	b.n	8003ece <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0201 	orr.w	r2, r2, #1
 8003e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1e      	ldr	r2, [pc, #120]	; (8003edc <HAL_TIM_Base_Start_IT+0xb0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d018      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x6c>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6e:	d013      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x6c>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1a      	ldr	r2, [pc, #104]	; (8003ee0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00e      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x6c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a19      	ldr	r2, [pc, #100]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d009      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x6c>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a17      	ldr	r2, [pc, #92]	; (8003ee8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x6c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a16      	ldr	r2, [pc, #88]	; (8003eec <HAL_TIM_Base_Start_IT+0xc0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d111      	bne.n	8003ebc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b06      	cmp	r3, #6
 8003ea8:	d010      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0201 	orr.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eba:	e007      	b.n	8003ecc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800
 8003ee8:	40000c00 	.word	0x40000c00
 8003eec:	40014000 	.word	0x40014000

08003ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d122      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d11b      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0202 	mvn.w	r2, #2
 8003f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f9b2 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f9a4 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f9b5 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0204 	mvn.w	r2, #4
 8003f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f988 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f97a 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f98b 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0208 	mvn.w	r2, #8
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f95e 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f950 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f961 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d122      	bne.n	8004048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b10      	cmp	r3, #16
 800400e:	d11b      	bne.n	8004048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0210 	mvn.w	r2, #16
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2208      	movs	r2, #8
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f934 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f926 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f937 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b01      	cmp	r3, #1
 8004054:	d10e      	bne.n	8004074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b01      	cmp	r3, #1
 8004062:	d107      	bne.n	8004074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0201 	mvn.w	r2, #1
 800406c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fd fb2c 	bl	80016cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d10e      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b80      	cmp	r3, #128	; 0x80
 800408e:	d107      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 faae 	bl	80045fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d10e      	bne.n	80040cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d107      	bne.n	80040cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f8fc 	bl	80042c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d10e      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d107      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0220 	mvn.w	r2, #32
 80040f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fa78 	bl	80045e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_TIM_ConfigClockSource+0x18>
 8004114:	2302      	movs	r3, #2
 8004116:	e0b3      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x180>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004136:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800413e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004150:	d03e      	beq.n	80041d0 <HAL_TIM_ConfigClockSource+0xd0>
 8004152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004156:	f200 8087 	bhi.w	8004268 <HAL_TIM_ConfigClockSource+0x168>
 800415a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415e:	f000 8085 	beq.w	800426c <HAL_TIM_ConfigClockSource+0x16c>
 8004162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004166:	d87f      	bhi.n	8004268 <HAL_TIM_ConfigClockSource+0x168>
 8004168:	2b70      	cmp	r3, #112	; 0x70
 800416a:	d01a      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0xa2>
 800416c:	2b70      	cmp	r3, #112	; 0x70
 800416e:	d87b      	bhi.n	8004268 <HAL_TIM_ConfigClockSource+0x168>
 8004170:	2b60      	cmp	r3, #96	; 0x60
 8004172:	d050      	beq.n	8004216 <HAL_TIM_ConfigClockSource+0x116>
 8004174:	2b60      	cmp	r3, #96	; 0x60
 8004176:	d877      	bhi.n	8004268 <HAL_TIM_ConfigClockSource+0x168>
 8004178:	2b50      	cmp	r3, #80	; 0x50
 800417a:	d03c      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0xf6>
 800417c:	2b50      	cmp	r3, #80	; 0x50
 800417e:	d873      	bhi.n	8004268 <HAL_TIM_ConfigClockSource+0x168>
 8004180:	2b40      	cmp	r3, #64	; 0x40
 8004182:	d058      	beq.n	8004236 <HAL_TIM_ConfigClockSource+0x136>
 8004184:	2b40      	cmp	r3, #64	; 0x40
 8004186:	d86f      	bhi.n	8004268 <HAL_TIM_ConfigClockSource+0x168>
 8004188:	2b30      	cmp	r3, #48	; 0x30
 800418a:	d064      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x156>
 800418c:	2b30      	cmp	r3, #48	; 0x30
 800418e:	d86b      	bhi.n	8004268 <HAL_TIM_ConfigClockSource+0x168>
 8004190:	2b20      	cmp	r3, #32
 8004192:	d060      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x156>
 8004194:	2b20      	cmp	r3, #32
 8004196:	d867      	bhi.n	8004268 <HAL_TIM_ConfigClockSource+0x168>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d05c      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x156>
 800419c:	2b10      	cmp	r3, #16
 800419e:	d05a      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041a0:	e062      	b.n	8004268 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6899      	ldr	r1, [r3, #8]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f000 f98b 	bl	80044cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	609a      	str	r2, [r3, #8]
      break;
 80041ce:	e04e      	b.n	800426e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	6899      	ldr	r1, [r3, #8]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f000 f974 	bl	80044cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f2:	609a      	str	r2, [r3, #8]
      break;
 80041f4:	e03b      	b.n	800426e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	6859      	ldr	r1, [r3, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	461a      	mov	r2, r3
 8004204:	f000 f8e8 	bl	80043d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2150      	movs	r1, #80	; 0x50
 800420e:	4618      	mov	r0, r3
 8004210:	f000 f941 	bl	8004496 <TIM_ITRx_SetConfig>
      break;
 8004214:	e02b      	b.n	800426e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6859      	ldr	r1, [r3, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	461a      	mov	r2, r3
 8004224:	f000 f907 	bl	8004436 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2160      	movs	r1, #96	; 0x60
 800422e:	4618      	mov	r0, r3
 8004230:	f000 f931 	bl	8004496 <TIM_ITRx_SetConfig>
      break;
 8004234:	e01b      	b.n	800426e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	6859      	ldr	r1, [r3, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	461a      	mov	r2, r3
 8004244:	f000 f8c8 	bl	80043d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2140      	movs	r1, #64	; 0x40
 800424e:	4618      	mov	r0, r3
 8004250:	f000 f921 	bl	8004496 <TIM_ITRx_SetConfig>
      break;
 8004254:	e00b      	b.n	800426e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4619      	mov	r1, r3
 8004260:	4610      	mov	r0, r2
 8004262:	f000 f918 	bl	8004496 <TIM_ITRx_SetConfig>
        break;
 8004266:	e002      	b.n	800426e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004268:	bf00      	nop
 800426a:	e000      	b.n	800426e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800426c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a34      	ldr	r2, [pc, #208]	; (80043bc <TIM_Base_SetConfig+0xe4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00f      	beq.n	8004310 <TIM_Base_SetConfig+0x38>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f6:	d00b      	beq.n	8004310 <TIM_Base_SetConfig+0x38>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a31      	ldr	r2, [pc, #196]	; (80043c0 <TIM_Base_SetConfig+0xe8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d007      	beq.n	8004310 <TIM_Base_SetConfig+0x38>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a30      	ldr	r2, [pc, #192]	; (80043c4 <TIM_Base_SetConfig+0xec>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_Base_SetConfig+0x38>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a2f      	ldr	r2, [pc, #188]	; (80043c8 <TIM_Base_SetConfig+0xf0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d108      	bne.n	8004322 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a25      	ldr	r2, [pc, #148]	; (80043bc <TIM_Base_SetConfig+0xe4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01b      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004330:	d017      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a22      	ldr	r2, [pc, #136]	; (80043c0 <TIM_Base_SetConfig+0xe8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <TIM_Base_SetConfig+0xec>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00f      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <TIM_Base_SetConfig+0xf0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00b      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <TIM_Base_SetConfig+0xf4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d007      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <TIM_Base_SetConfig+0xf8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d003      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <TIM_Base_SetConfig+0xfc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d108      	bne.n	8004374 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a08      	ldr	r2, [pc, #32]	; (80043bc <TIM_Base_SetConfig+0xe4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d103      	bne.n	80043a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	615a      	str	r2, [r3, #20]
}
 80043ae:	bf00      	nop
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40010000 	.word	0x40010000
 80043c0:	40000400 	.word	0x40000400
 80043c4:	40000800 	.word	0x40000800
 80043c8:	40000c00 	.word	0x40000c00
 80043cc:	40014000 	.word	0x40014000
 80043d0:	40014400 	.word	0x40014400
 80043d4:	40014800 	.word	0x40014800

080043d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f023 0201 	bic.w	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f023 030a 	bic.w	r3, r3, #10
 8004414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004436:	b480      	push	{r7}
 8004438:	b087      	sub	sp, #28
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f023 0210 	bic.w	r2, r3, #16
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004460:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	031b      	lsls	r3, r3, #12
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004472:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f043 0307 	orr.w	r3, r3, #7
 80044b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	609a      	str	r2, [r3, #8]
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	021a      	lsls	r2, r3, #8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	609a      	str	r2, [r3, #8]
}
 8004500:	bf00      	nop
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004520:	2302      	movs	r3, #2
 8004522:	e050      	b.n	80045c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1c      	ldr	r2, [pc, #112]	; (80045d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d018      	beq.n	800459a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004570:	d013      	beq.n	800459a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00e      	beq.n	800459a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a16      	ldr	r2, [pc, #88]	; (80045dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d009      	beq.n	800459a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a15      	ldr	r2, [pc, #84]	; (80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d004      	beq.n	800459a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d10c      	bne.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40010000 	.word	0x40010000
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40000800 	.word	0x40000800
 80045e0:	40000c00 	.word	0x40000c00
 80045e4:	40014000 	.word	0x40014000

080045e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e03f      	b.n	80046a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fd face 	bl	8001bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2224      	movs	r2, #36	; 0x24
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f905 	bl	8004864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695a      	ldr	r2, [r3, #20]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004678:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004688:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b08a      	sub	sp, #40	; 0x28
 80046ae:	af02      	add	r7, sp, #8
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	603b      	str	r3, [r7, #0]
 80046b6:	4613      	mov	r3, r2
 80046b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d17c      	bne.n	80047c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HAL_UART_Transmit+0x2c>
 80046d0:	88fb      	ldrh	r3, [r7, #6]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e075      	b.n	80047c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_UART_Transmit+0x3e>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e06e      	b.n	80047c6 <HAL_UART_Transmit+0x11c>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2221      	movs	r2, #33	; 0x21
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046fe:	f7fd fc35 	bl	8001f6c <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	88fa      	ldrh	r2, [r7, #6]
 8004708:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	88fa      	ldrh	r2, [r7, #6]
 800470e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d108      	bne.n	800472c <HAL_UART_Transmit+0x82>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	e003      	b.n	8004734 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800473c:	e02a      	b.n	8004794 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2200      	movs	r2, #0
 8004746:	2180      	movs	r1, #128	; 0x80
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f840 	bl	80047ce <UART_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e036      	b.n	80047c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800476c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3302      	adds	r3, #2
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e007      	b.n	8004786 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	3301      	adds	r3, #1
 8004784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1cf      	bne.n	800473e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2200      	movs	r2, #0
 80047a6:	2140      	movs	r1, #64	; 0x40
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f810 	bl	80047ce <UART_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e006      	b.n	80047c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e000      	b.n	80047c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
  }
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3720      	adds	r7, #32
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	603b      	str	r3, [r7, #0]
 80047da:	4613      	mov	r3, r2
 80047dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047de:	e02c      	b.n	800483a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	d028      	beq.n	800483a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d007      	beq.n	80047fe <UART_WaitOnFlagUntilTimeout+0x30>
 80047ee:	f7fd fbbd 	bl	8001f6c <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d21d      	bcs.n	800483a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800480c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e00f      	b.n	800485a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4013      	ands	r3, r2
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	429a      	cmp	r2, r3
 8004848:	bf0c      	ite	eq
 800484a:	2301      	moveq	r3, #1
 800484c:	2300      	movne	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	461a      	mov	r2, r3
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	429a      	cmp	r2, r3
 8004856:	d0c3      	beq.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004868:	b09f      	sub	sp, #124	; 0x7c
 800486a:	af00      	add	r7, sp, #0
 800486c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800486e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487a:	68d9      	ldr	r1, [r3, #12]
 800487c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	ea40 0301 	orr.w	r3, r0, r1
 8004884:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	431a      	orrs	r2, r3
 8004890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	431a      	orrs	r2, r3
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	4313      	orrs	r3, r2
 800489c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800489e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048a8:	f021 010c 	bic.w	r1, r1, #12
 80048ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048b2:	430b      	orrs	r3, r1
 80048b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c2:	6999      	ldr	r1, [r3, #24]
 80048c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	ea40 0301 	orr.w	r3, r0, r1
 80048cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4bc5      	ldr	r3, [pc, #788]	; (8004be8 <UART_SetConfig+0x384>)
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d004      	beq.n	80048e2 <UART_SetConfig+0x7e>
 80048d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4bc3      	ldr	r3, [pc, #780]	; (8004bec <UART_SetConfig+0x388>)
 80048de:	429a      	cmp	r2, r3
 80048e0:	d103      	bne.n	80048ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048e2:	f7ff fa3f 	bl	8003d64 <HAL_RCC_GetPCLK2Freq>
 80048e6:	6778      	str	r0, [r7, #116]	; 0x74
 80048e8:	e002      	b.n	80048f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ea:	f7ff fa27 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 80048ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f8:	f040 80b6 	bne.w	8004a68 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048fe:	461c      	mov	r4, r3
 8004900:	f04f 0500 	mov.w	r5, #0
 8004904:	4622      	mov	r2, r4
 8004906:	462b      	mov	r3, r5
 8004908:	1891      	adds	r1, r2, r2
 800490a:	6439      	str	r1, [r7, #64]	; 0x40
 800490c:	415b      	adcs	r3, r3
 800490e:	647b      	str	r3, [r7, #68]	; 0x44
 8004910:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004914:	1912      	adds	r2, r2, r4
 8004916:	eb45 0303 	adc.w	r3, r5, r3
 800491a:	f04f 0000 	mov.w	r0, #0
 800491e:	f04f 0100 	mov.w	r1, #0
 8004922:	00d9      	lsls	r1, r3, #3
 8004924:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004928:	00d0      	lsls	r0, r2, #3
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	1911      	adds	r1, r2, r4
 8004930:	6639      	str	r1, [r7, #96]	; 0x60
 8004932:	416b      	adcs	r3, r5
 8004934:	667b      	str	r3, [r7, #100]	; 0x64
 8004936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	461a      	mov	r2, r3
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	1891      	adds	r1, r2, r2
 8004942:	63b9      	str	r1, [r7, #56]	; 0x38
 8004944:	415b      	adcs	r3, r3
 8004946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004948:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800494c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004950:	f7fc f97a 	bl	8000c48 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4ba5      	ldr	r3, [pc, #660]	; (8004bf0 <UART_SetConfig+0x38c>)
 800495a:	fba3 2302 	umull	r2, r3, r3, r2
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	011e      	lsls	r6, r3, #4
 8004962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004964:	461c      	mov	r4, r3
 8004966:	f04f 0500 	mov.w	r5, #0
 800496a:	4622      	mov	r2, r4
 800496c:	462b      	mov	r3, r5
 800496e:	1891      	adds	r1, r2, r2
 8004970:	6339      	str	r1, [r7, #48]	; 0x30
 8004972:	415b      	adcs	r3, r3
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
 8004976:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800497a:	1912      	adds	r2, r2, r4
 800497c:	eb45 0303 	adc.w	r3, r5, r3
 8004980:	f04f 0000 	mov.w	r0, #0
 8004984:	f04f 0100 	mov.w	r1, #0
 8004988:	00d9      	lsls	r1, r3, #3
 800498a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800498e:	00d0      	lsls	r0, r2, #3
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	1911      	adds	r1, r2, r4
 8004996:	65b9      	str	r1, [r7, #88]	; 0x58
 8004998:	416b      	adcs	r3, r5
 800499a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800499c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	461a      	mov	r2, r3
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	1891      	adds	r1, r2, r2
 80049a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80049aa:	415b      	adcs	r3, r3
 80049ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80049b6:	f7fc f947 	bl	8000c48 <__aeabi_uldivmod>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4b8c      	ldr	r3, [pc, #560]	; (8004bf0 <UART_SetConfig+0x38c>)
 80049c0:	fba3 1302 	umull	r1, r3, r3, r2
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	2164      	movs	r1, #100	; 0x64
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	3332      	adds	r3, #50	; 0x32
 80049d2:	4a87      	ldr	r2, [pc, #540]	; (8004bf0 <UART_SetConfig+0x38c>)
 80049d4:	fba2 2303 	umull	r2, r3, r2, r3
 80049d8:	095b      	lsrs	r3, r3, #5
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049e0:	441e      	add	r6, r3
 80049e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e4:	4618      	mov	r0, r3
 80049e6:	f04f 0100 	mov.w	r1, #0
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	1894      	adds	r4, r2, r2
 80049f0:	623c      	str	r4, [r7, #32]
 80049f2:	415b      	adcs	r3, r3
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
 80049f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049fa:	1812      	adds	r2, r2, r0
 80049fc:	eb41 0303 	adc.w	r3, r1, r3
 8004a00:	f04f 0400 	mov.w	r4, #0
 8004a04:	f04f 0500 	mov.w	r5, #0
 8004a08:	00dd      	lsls	r5, r3, #3
 8004a0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a0e:	00d4      	lsls	r4, r2, #3
 8004a10:	4622      	mov	r2, r4
 8004a12:	462b      	mov	r3, r5
 8004a14:	1814      	adds	r4, r2, r0
 8004a16:	653c      	str	r4, [r7, #80]	; 0x50
 8004a18:	414b      	adcs	r3, r1
 8004a1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	461a      	mov	r2, r3
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	1891      	adds	r1, r2, r2
 8004a28:	61b9      	str	r1, [r7, #24]
 8004a2a:	415b      	adcs	r3, r3
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004a36:	f7fc f907 	bl	8000c48 <__aeabi_uldivmod>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4b6c      	ldr	r3, [pc, #432]	; (8004bf0 <UART_SetConfig+0x38c>)
 8004a40:	fba3 1302 	umull	r1, r3, r3, r2
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	2164      	movs	r1, #100	; 0x64
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	3332      	adds	r3, #50	; 0x32
 8004a52:	4a67      	ldr	r2, [pc, #412]	; (8004bf0 <UART_SetConfig+0x38c>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	f003 0207 	and.w	r2, r3, #7
 8004a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4432      	add	r2, r6
 8004a64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a66:	e0b9      	b.n	8004bdc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a6a:	461c      	mov	r4, r3
 8004a6c:	f04f 0500 	mov.w	r5, #0
 8004a70:	4622      	mov	r2, r4
 8004a72:	462b      	mov	r3, r5
 8004a74:	1891      	adds	r1, r2, r2
 8004a76:	6139      	str	r1, [r7, #16]
 8004a78:	415b      	adcs	r3, r3
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a80:	1912      	adds	r2, r2, r4
 8004a82:	eb45 0303 	adc.w	r3, r5, r3
 8004a86:	f04f 0000 	mov.w	r0, #0
 8004a8a:	f04f 0100 	mov.w	r1, #0
 8004a8e:	00d9      	lsls	r1, r3, #3
 8004a90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a94:	00d0      	lsls	r0, r2, #3
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	eb12 0804 	adds.w	r8, r2, r4
 8004a9e:	eb43 0905 	adc.w	r9, r3, r5
 8004aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f04f 0100 	mov.w	r1, #0
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	008b      	lsls	r3, r1, #2
 8004ab6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004aba:	0082      	lsls	r2, r0, #2
 8004abc:	4640      	mov	r0, r8
 8004abe:	4649      	mov	r1, r9
 8004ac0:	f7fc f8c2 	bl	8000c48 <__aeabi_uldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4b49      	ldr	r3, [pc, #292]	; (8004bf0 <UART_SetConfig+0x38c>)
 8004aca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	011e      	lsls	r6, r3, #4
 8004ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f04f 0100 	mov.w	r1, #0
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	1894      	adds	r4, r2, r2
 8004ae0:	60bc      	str	r4, [r7, #8]
 8004ae2:	415b      	adcs	r3, r3
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aea:	1812      	adds	r2, r2, r0
 8004aec:	eb41 0303 	adc.w	r3, r1, r3
 8004af0:	f04f 0400 	mov.w	r4, #0
 8004af4:	f04f 0500 	mov.w	r5, #0
 8004af8:	00dd      	lsls	r5, r3, #3
 8004afa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004afe:	00d4      	lsls	r4, r2, #3
 8004b00:	4622      	mov	r2, r4
 8004b02:	462b      	mov	r3, r5
 8004b04:	1814      	adds	r4, r2, r0
 8004b06:	64bc      	str	r4, [r7, #72]	; 0x48
 8004b08:	414b      	adcs	r3, r1
 8004b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f04f 0100 	mov.w	r1, #0
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	008b      	lsls	r3, r1, #2
 8004b20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b24:	0082      	lsls	r2, r0, #2
 8004b26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004b2a:	f7fc f88d 	bl	8000c48 <__aeabi_uldivmod>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4b2f      	ldr	r3, [pc, #188]	; (8004bf0 <UART_SetConfig+0x38c>)
 8004b34:	fba3 1302 	umull	r1, r3, r3, r2
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	2164      	movs	r1, #100	; 0x64
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	3332      	adds	r3, #50	; 0x32
 8004b46:	4a2a      	ldr	r2, [pc, #168]	; (8004bf0 <UART_SetConfig+0x38c>)
 8004b48:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b52:	441e      	add	r6, r3
 8004b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b56:	4618      	mov	r0, r3
 8004b58:	f04f 0100 	mov.w	r1, #0
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	1894      	adds	r4, r2, r2
 8004b62:	603c      	str	r4, [r7, #0]
 8004b64:	415b      	adcs	r3, r3
 8004b66:	607b      	str	r3, [r7, #4]
 8004b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b6c:	1812      	adds	r2, r2, r0
 8004b6e:	eb41 0303 	adc.w	r3, r1, r3
 8004b72:	f04f 0400 	mov.w	r4, #0
 8004b76:	f04f 0500 	mov.w	r5, #0
 8004b7a:	00dd      	lsls	r5, r3, #3
 8004b7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b80:	00d4      	lsls	r4, r2, #3
 8004b82:	4622      	mov	r2, r4
 8004b84:	462b      	mov	r3, r5
 8004b86:	eb12 0a00 	adds.w	sl, r2, r0
 8004b8a:	eb43 0b01 	adc.w	fp, r3, r1
 8004b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	008b      	lsls	r3, r1, #2
 8004ba2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ba6:	0082      	lsls	r2, r0, #2
 8004ba8:	4650      	mov	r0, sl
 8004baa:	4659      	mov	r1, fp
 8004bac:	f7fc f84c 	bl	8000c48 <__aeabi_uldivmod>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <UART_SetConfig+0x38c>)
 8004bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	2164      	movs	r1, #100	; 0x64
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	3332      	adds	r3, #50	; 0x32
 8004bc8:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <UART_SetConfig+0x38c>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	f003 020f 	and.w	r2, r3, #15
 8004bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4432      	add	r2, r6
 8004bda:	609a      	str	r2, [r3, #8]
}
 8004bdc:	bf00      	nop
 8004bde:	377c      	adds	r7, #124	; 0x7c
 8004be0:	46bd      	mov	sp, r7
 8004be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be6:	bf00      	nop
 8004be8:	40011000 	.word	0x40011000
 8004bec:	40011400 	.word	0x40011400
 8004bf0:	51eb851f 	.word	0x51eb851f

08004bf4 <__errno>:
 8004bf4:	4b01      	ldr	r3, [pc, #4]	; (8004bfc <__errno+0x8>)
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000024 	.word	0x20000024

08004c00 <__libc_init_array>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	4d0d      	ldr	r5, [pc, #52]	; (8004c38 <__libc_init_array+0x38>)
 8004c04:	4c0d      	ldr	r4, [pc, #52]	; (8004c3c <__libc_init_array+0x3c>)
 8004c06:	1b64      	subs	r4, r4, r5
 8004c08:	10a4      	asrs	r4, r4, #2
 8004c0a:	2600      	movs	r6, #0
 8004c0c:	42a6      	cmp	r6, r4
 8004c0e:	d109      	bne.n	8004c24 <__libc_init_array+0x24>
 8004c10:	4d0b      	ldr	r5, [pc, #44]	; (8004c40 <__libc_init_array+0x40>)
 8004c12:	4c0c      	ldr	r4, [pc, #48]	; (8004c44 <__libc_init_array+0x44>)
 8004c14:	f001 ff8a 	bl	8006b2c <_init>
 8004c18:	1b64      	subs	r4, r4, r5
 8004c1a:	10a4      	asrs	r4, r4, #2
 8004c1c:	2600      	movs	r6, #0
 8004c1e:	42a6      	cmp	r6, r4
 8004c20:	d105      	bne.n	8004c2e <__libc_init_array+0x2e>
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c28:	4798      	blx	r3
 8004c2a:	3601      	adds	r6, #1
 8004c2c:	e7ee      	b.n	8004c0c <__libc_init_array+0xc>
 8004c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c32:	4798      	blx	r3
 8004c34:	3601      	adds	r6, #1
 8004c36:	e7f2      	b.n	8004c1e <__libc_init_array+0x1e>
 8004c38:	08006c88 	.word	0x08006c88
 8004c3c:	08006c88 	.word	0x08006c88
 8004c40:	08006c88 	.word	0x08006c88
 8004c44:	08006c8c 	.word	0x08006c8c

08004c48 <memset>:
 8004c48:	4402      	add	r2, r0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d100      	bne.n	8004c52 <memset+0xa>
 8004c50:	4770      	bx	lr
 8004c52:	f803 1b01 	strb.w	r1, [r3], #1
 8004c56:	e7f9      	b.n	8004c4c <memset+0x4>

08004c58 <iprintf>:
 8004c58:	b40f      	push	{r0, r1, r2, r3}
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <iprintf+0x2c>)
 8004c5c:	b513      	push	{r0, r1, r4, lr}
 8004c5e:	681c      	ldr	r4, [r3, #0]
 8004c60:	b124      	cbz	r4, 8004c6c <iprintf+0x14>
 8004c62:	69a3      	ldr	r3, [r4, #24]
 8004c64:	b913      	cbnz	r3, 8004c6c <iprintf+0x14>
 8004c66:	4620      	mov	r0, r4
 8004c68:	f000 f87c 	bl	8004d64 <__sinit>
 8004c6c:	ab05      	add	r3, sp, #20
 8004c6e:	9a04      	ldr	r2, [sp, #16]
 8004c70:	68a1      	ldr	r1, [r4, #8]
 8004c72:	9301      	str	r3, [sp, #4]
 8004c74:	4620      	mov	r0, r4
 8004c76:	f000 f999 	bl	8004fac <_vfiprintf_r>
 8004c7a:	b002      	add	sp, #8
 8004c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c80:	b004      	add	sp, #16
 8004c82:	4770      	bx	lr
 8004c84:	20000024 	.word	0x20000024

08004c88 <putchar>:
 8004c88:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <putchar+0x28>)
 8004c8a:	b513      	push	{r0, r1, r4, lr}
 8004c8c:	681c      	ldr	r4, [r3, #0]
 8004c8e:	4601      	mov	r1, r0
 8004c90:	b134      	cbz	r4, 8004ca0 <putchar+0x18>
 8004c92:	69a3      	ldr	r3, [r4, #24]
 8004c94:	b923      	cbnz	r3, 8004ca0 <putchar+0x18>
 8004c96:	9001      	str	r0, [sp, #4]
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f000 f863 	bl	8004d64 <__sinit>
 8004c9e:	9901      	ldr	r1, [sp, #4]
 8004ca0:	68a2      	ldr	r2, [r4, #8]
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	b002      	add	sp, #8
 8004ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004caa:	f000 bc43 	b.w	8005534 <_putc_r>
 8004cae:	bf00      	nop
 8004cb0:	20000024 	.word	0x20000024

08004cb4 <std>:
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	b510      	push	{r4, lr}
 8004cb8:	4604      	mov	r4, r0
 8004cba:	e9c0 3300 	strd	r3, r3, [r0]
 8004cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cc2:	6083      	str	r3, [r0, #8]
 8004cc4:	8181      	strh	r1, [r0, #12]
 8004cc6:	6643      	str	r3, [r0, #100]	; 0x64
 8004cc8:	81c2      	strh	r2, [r0, #14]
 8004cca:	6183      	str	r3, [r0, #24]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	2208      	movs	r2, #8
 8004cd0:	305c      	adds	r0, #92	; 0x5c
 8004cd2:	f7ff ffb9 	bl	8004c48 <memset>
 8004cd6:	4b05      	ldr	r3, [pc, #20]	; (8004cec <std+0x38>)
 8004cd8:	6263      	str	r3, [r4, #36]	; 0x24
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <std+0x3c>)
 8004cdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <std+0x40>)
 8004ce0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ce2:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <std+0x44>)
 8004ce4:	6224      	str	r4, [r4, #32]
 8004ce6:	6323      	str	r3, [r4, #48]	; 0x30
 8004ce8:	bd10      	pop	{r4, pc}
 8004cea:	bf00      	nop
 8004cec:	080055e5 	.word	0x080055e5
 8004cf0:	08005607 	.word	0x08005607
 8004cf4:	0800563f 	.word	0x0800563f
 8004cf8:	08005663 	.word	0x08005663

08004cfc <_cleanup_r>:
 8004cfc:	4901      	ldr	r1, [pc, #4]	; (8004d04 <_cleanup_r+0x8>)
 8004cfe:	f000 b8af 	b.w	8004e60 <_fwalk_reent>
 8004d02:	bf00      	nop
 8004d04:	0800593d 	.word	0x0800593d

08004d08 <__sfmoreglue>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	1e4a      	subs	r2, r1, #1
 8004d0c:	2568      	movs	r5, #104	; 0x68
 8004d0e:	4355      	muls	r5, r2
 8004d10:	460e      	mov	r6, r1
 8004d12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d16:	f000 f8c5 	bl	8004ea4 <_malloc_r>
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	b140      	cbz	r0, 8004d30 <__sfmoreglue+0x28>
 8004d1e:	2100      	movs	r1, #0
 8004d20:	e9c0 1600 	strd	r1, r6, [r0]
 8004d24:	300c      	adds	r0, #12
 8004d26:	60a0      	str	r0, [r4, #8]
 8004d28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d2c:	f7ff ff8c 	bl	8004c48 <memset>
 8004d30:	4620      	mov	r0, r4
 8004d32:	bd70      	pop	{r4, r5, r6, pc}

08004d34 <__sfp_lock_acquire>:
 8004d34:	4801      	ldr	r0, [pc, #4]	; (8004d3c <__sfp_lock_acquire+0x8>)
 8004d36:	f000 b8b3 	b.w	8004ea0 <__retarget_lock_acquire_recursive>
 8004d3a:	bf00      	nop
 8004d3c:	2000023c 	.word	0x2000023c

08004d40 <__sfp_lock_release>:
 8004d40:	4801      	ldr	r0, [pc, #4]	; (8004d48 <__sfp_lock_release+0x8>)
 8004d42:	f000 b8ae 	b.w	8004ea2 <__retarget_lock_release_recursive>
 8004d46:	bf00      	nop
 8004d48:	2000023c 	.word	0x2000023c

08004d4c <__sinit_lock_acquire>:
 8004d4c:	4801      	ldr	r0, [pc, #4]	; (8004d54 <__sinit_lock_acquire+0x8>)
 8004d4e:	f000 b8a7 	b.w	8004ea0 <__retarget_lock_acquire_recursive>
 8004d52:	bf00      	nop
 8004d54:	20000237 	.word	0x20000237

08004d58 <__sinit_lock_release>:
 8004d58:	4801      	ldr	r0, [pc, #4]	; (8004d60 <__sinit_lock_release+0x8>)
 8004d5a:	f000 b8a2 	b.w	8004ea2 <__retarget_lock_release_recursive>
 8004d5e:	bf00      	nop
 8004d60:	20000237 	.word	0x20000237

08004d64 <__sinit>:
 8004d64:	b510      	push	{r4, lr}
 8004d66:	4604      	mov	r4, r0
 8004d68:	f7ff fff0 	bl	8004d4c <__sinit_lock_acquire>
 8004d6c:	69a3      	ldr	r3, [r4, #24]
 8004d6e:	b11b      	cbz	r3, 8004d78 <__sinit+0x14>
 8004d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d74:	f7ff bff0 	b.w	8004d58 <__sinit_lock_release>
 8004d78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d7c:	6523      	str	r3, [r4, #80]	; 0x50
 8004d7e:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <__sinit+0x68>)
 8004d80:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <__sinit+0x6c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d86:	42a3      	cmp	r3, r4
 8004d88:	bf04      	itt	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	61a3      	streq	r3, [r4, #24]
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f000 f820 	bl	8004dd4 <__sfp>
 8004d94:	6060      	str	r0, [r4, #4]
 8004d96:	4620      	mov	r0, r4
 8004d98:	f000 f81c 	bl	8004dd4 <__sfp>
 8004d9c:	60a0      	str	r0, [r4, #8]
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f000 f818 	bl	8004dd4 <__sfp>
 8004da4:	2200      	movs	r2, #0
 8004da6:	60e0      	str	r0, [r4, #12]
 8004da8:	2104      	movs	r1, #4
 8004daa:	6860      	ldr	r0, [r4, #4]
 8004dac:	f7ff ff82 	bl	8004cb4 <std>
 8004db0:	68a0      	ldr	r0, [r4, #8]
 8004db2:	2201      	movs	r2, #1
 8004db4:	2109      	movs	r1, #9
 8004db6:	f7ff ff7d 	bl	8004cb4 <std>
 8004dba:	68e0      	ldr	r0, [r4, #12]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	2112      	movs	r1, #18
 8004dc0:	f7ff ff78 	bl	8004cb4 <std>
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	61a3      	str	r3, [r4, #24]
 8004dc8:	e7d2      	b.n	8004d70 <__sinit+0xc>
 8004dca:	bf00      	nop
 8004dcc:	08006ba4 	.word	0x08006ba4
 8004dd0:	08004cfd 	.word	0x08004cfd

08004dd4 <__sfp>:
 8004dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd6:	4607      	mov	r7, r0
 8004dd8:	f7ff ffac 	bl	8004d34 <__sfp_lock_acquire>
 8004ddc:	4b1e      	ldr	r3, [pc, #120]	; (8004e58 <__sfp+0x84>)
 8004dde:	681e      	ldr	r6, [r3, #0]
 8004de0:	69b3      	ldr	r3, [r6, #24]
 8004de2:	b913      	cbnz	r3, 8004dea <__sfp+0x16>
 8004de4:	4630      	mov	r0, r6
 8004de6:	f7ff ffbd 	bl	8004d64 <__sinit>
 8004dea:	3648      	adds	r6, #72	; 0x48
 8004dec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	d503      	bpl.n	8004dfc <__sfp+0x28>
 8004df4:	6833      	ldr	r3, [r6, #0]
 8004df6:	b30b      	cbz	r3, 8004e3c <__sfp+0x68>
 8004df8:	6836      	ldr	r6, [r6, #0]
 8004dfa:	e7f7      	b.n	8004dec <__sfp+0x18>
 8004dfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e00:	b9d5      	cbnz	r5, 8004e38 <__sfp+0x64>
 8004e02:	4b16      	ldr	r3, [pc, #88]	; (8004e5c <__sfp+0x88>)
 8004e04:	60e3      	str	r3, [r4, #12]
 8004e06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e0a:	6665      	str	r5, [r4, #100]	; 0x64
 8004e0c:	f000 f847 	bl	8004e9e <__retarget_lock_init_recursive>
 8004e10:	f7ff ff96 	bl	8004d40 <__sfp_lock_release>
 8004e14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e1c:	6025      	str	r5, [r4, #0]
 8004e1e:	61a5      	str	r5, [r4, #24]
 8004e20:	2208      	movs	r2, #8
 8004e22:	4629      	mov	r1, r5
 8004e24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e28:	f7ff ff0e 	bl	8004c48 <memset>
 8004e2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e34:	4620      	mov	r0, r4
 8004e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e38:	3468      	adds	r4, #104	; 0x68
 8004e3a:	e7d9      	b.n	8004df0 <__sfp+0x1c>
 8004e3c:	2104      	movs	r1, #4
 8004e3e:	4638      	mov	r0, r7
 8004e40:	f7ff ff62 	bl	8004d08 <__sfmoreglue>
 8004e44:	4604      	mov	r4, r0
 8004e46:	6030      	str	r0, [r6, #0]
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d1d5      	bne.n	8004df8 <__sfp+0x24>
 8004e4c:	f7ff ff78 	bl	8004d40 <__sfp_lock_release>
 8004e50:	230c      	movs	r3, #12
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	e7ee      	b.n	8004e34 <__sfp+0x60>
 8004e56:	bf00      	nop
 8004e58:	08006ba4 	.word	0x08006ba4
 8004e5c:	ffff0001 	.word	0xffff0001

08004e60 <_fwalk_reent>:
 8004e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e64:	4606      	mov	r6, r0
 8004e66:	4688      	mov	r8, r1
 8004e68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e6c:	2700      	movs	r7, #0
 8004e6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e72:	f1b9 0901 	subs.w	r9, r9, #1
 8004e76:	d505      	bpl.n	8004e84 <_fwalk_reent+0x24>
 8004e78:	6824      	ldr	r4, [r4, #0]
 8004e7a:	2c00      	cmp	r4, #0
 8004e7c:	d1f7      	bne.n	8004e6e <_fwalk_reent+0xe>
 8004e7e:	4638      	mov	r0, r7
 8004e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e84:	89ab      	ldrh	r3, [r5, #12]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d907      	bls.n	8004e9a <_fwalk_reent+0x3a>
 8004e8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	d003      	beq.n	8004e9a <_fwalk_reent+0x3a>
 8004e92:	4629      	mov	r1, r5
 8004e94:	4630      	mov	r0, r6
 8004e96:	47c0      	blx	r8
 8004e98:	4307      	orrs	r7, r0
 8004e9a:	3568      	adds	r5, #104	; 0x68
 8004e9c:	e7e9      	b.n	8004e72 <_fwalk_reent+0x12>

08004e9e <__retarget_lock_init_recursive>:
 8004e9e:	4770      	bx	lr

08004ea0 <__retarget_lock_acquire_recursive>:
 8004ea0:	4770      	bx	lr

08004ea2 <__retarget_lock_release_recursive>:
 8004ea2:	4770      	bx	lr

08004ea4 <_malloc_r>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	1ccd      	adds	r5, r1, #3
 8004ea8:	f025 0503 	bic.w	r5, r5, #3
 8004eac:	3508      	adds	r5, #8
 8004eae:	2d0c      	cmp	r5, #12
 8004eb0:	bf38      	it	cc
 8004eb2:	250c      	movcc	r5, #12
 8004eb4:	2d00      	cmp	r5, #0
 8004eb6:	4606      	mov	r6, r0
 8004eb8:	db01      	blt.n	8004ebe <_malloc_r+0x1a>
 8004eba:	42a9      	cmp	r1, r5
 8004ebc:	d903      	bls.n	8004ec6 <_malloc_r+0x22>
 8004ebe:	230c      	movs	r3, #12
 8004ec0:	6033      	str	r3, [r6, #0]
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ec6:	f000 fdeb 	bl	8005aa0 <__malloc_lock>
 8004eca:	4921      	ldr	r1, [pc, #132]	; (8004f50 <_malloc_r+0xac>)
 8004ecc:	680a      	ldr	r2, [r1, #0]
 8004ece:	4614      	mov	r4, r2
 8004ed0:	b99c      	cbnz	r4, 8004efa <_malloc_r+0x56>
 8004ed2:	4f20      	ldr	r7, [pc, #128]	; (8004f54 <_malloc_r+0xb0>)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	b923      	cbnz	r3, 8004ee2 <_malloc_r+0x3e>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4630      	mov	r0, r6
 8004edc:	f000 fb72 	bl	80055c4 <_sbrk_r>
 8004ee0:	6038      	str	r0, [r7, #0]
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f000 fb6d 	bl	80055c4 <_sbrk_r>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	d123      	bne.n	8004f36 <_malloc_r+0x92>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	6033      	str	r3, [r6, #0]
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f000 fdda 	bl	8005aac <__malloc_unlock>
 8004ef8:	e7e3      	b.n	8004ec2 <_malloc_r+0x1e>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	1b5b      	subs	r3, r3, r5
 8004efe:	d417      	bmi.n	8004f30 <_malloc_r+0x8c>
 8004f00:	2b0b      	cmp	r3, #11
 8004f02:	d903      	bls.n	8004f0c <_malloc_r+0x68>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	441c      	add	r4, r3
 8004f08:	6025      	str	r5, [r4, #0]
 8004f0a:	e004      	b.n	8004f16 <_malloc_r+0x72>
 8004f0c:	6863      	ldr	r3, [r4, #4]
 8004f0e:	42a2      	cmp	r2, r4
 8004f10:	bf0c      	ite	eq
 8004f12:	600b      	streq	r3, [r1, #0]
 8004f14:	6053      	strne	r3, [r2, #4]
 8004f16:	4630      	mov	r0, r6
 8004f18:	f000 fdc8 	bl	8005aac <__malloc_unlock>
 8004f1c:	f104 000b 	add.w	r0, r4, #11
 8004f20:	1d23      	adds	r3, r4, #4
 8004f22:	f020 0007 	bic.w	r0, r0, #7
 8004f26:	1ac2      	subs	r2, r0, r3
 8004f28:	d0cc      	beq.n	8004ec4 <_malloc_r+0x20>
 8004f2a:	1a1b      	subs	r3, r3, r0
 8004f2c:	50a3      	str	r3, [r4, r2]
 8004f2e:	e7c9      	b.n	8004ec4 <_malloc_r+0x20>
 8004f30:	4622      	mov	r2, r4
 8004f32:	6864      	ldr	r4, [r4, #4]
 8004f34:	e7cc      	b.n	8004ed0 <_malloc_r+0x2c>
 8004f36:	1cc4      	adds	r4, r0, #3
 8004f38:	f024 0403 	bic.w	r4, r4, #3
 8004f3c:	42a0      	cmp	r0, r4
 8004f3e:	d0e3      	beq.n	8004f08 <_malloc_r+0x64>
 8004f40:	1a21      	subs	r1, r4, r0
 8004f42:	4630      	mov	r0, r6
 8004f44:	f000 fb3e 	bl	80055c4 <_sbrk_r>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d1dd      	bne.n	8004f08 <_malloc_r+0x64>
 8004f4c:	e7cf      	b.n	8004eee <_malloc_r+0x4a>
 8004f4e:	bf00      	nop
 8004f50:	200000cc 	.word	0x200000cc
 8004f54:	200000d0 	.word	0x200000d0

08004f58 <__sfputc_r>:
 8004f58:	6893      	ldr	r3, [r2, #8]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	b410      	push	{r4}
 8004f60:	6093      	str	r3, [r2, #8]
 8004f62:	da08      	bge.n	8004f76 <__sfputc_r+0x1e>
 8004f64:	6994      	ldr	r4, [r2, #24]
 8004f66:	42a3      	cmp	r3, r4
 8004f68:	db01      	blt.n	8004f6e <__sfputc_r+0x16>
 8004f6a:	290a      	cmp	r1, #10
 8004f6c:	d103      	bne.n	8004f76 <__sfputc_r+0x1e>
 8004f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f72:	f000 bb7b 	b.w	800566c <__swbuf_r>
 8004f76:	6813      	ldr	r3, [r2, #0]
 8004f78:	1c58      	adds	r0, r3, #1
 8004f7a:	6010      	str	r0, [r2, #0]
 8004f7c:	7019      	strb	r1, [r3, #0]
 8004f7e:	4608      	mov	r0, r1
 8004f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <__sfputs_r>:
 8004f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f88:	4606      	mov	r6, r0
 8004f8a:	460f      	mov	r7, r1
 8004f8c:	4614      	mov	r4, r2
 8004f8e:	18d5      	adds	r5, r2, r3
 8004f90:	42ac      	cmp	r4, r5
 8004f92:	d101      	bne.n	8004f98 <__sfputs_r+0x12>
 8004f94:	2000      	movs	r0, #0
 8004f96:	e007      	b.n	8004fa8 <__sfputs_r+0x22>
 8004f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f9c:	463a      	mov	r2, r7
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	f7ff ffda 	bl	8004f58 <__sfputc_r>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d1f3      	bne.n	8004f90 <__sfputs_r+0xa>
 8004fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fac <_vfiprintf_r>:
 8004fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb0:	460d      	mov	r5, r1
 8004fb2:	b09d      	sub	sp, #116	; 0x74
 8004fb4:	4614      	mov	r4, r2
 8004fb6:	4698      	mov	r8, r3
 8004fb8:	4606      	mov	r6, r0
 8004fba:	b118      	cbz	r0, 8004fc4 <_vfiprintf_r+0x18>
 8004fbc:	6983      	ldr	r3, [r0, #24]
 8004fbe:	b90b      	cbnz	r3, 8004fc4 <_vfiprintf_r+0x18>
 8004fc0:	f7ff fed0 	bl	8004d64 <__sinit>
 8004fc4:	4b89      	ldr	r3, [pc, #548]	; (80051ec <_vfiprintf_r+0x240>)
 8004fc6:	429d      	cmp	r5, r3
 8004fc8:	d11b      	bne.n	8005002 <_vfiprintf_r+0x56>
 8004fca:	6875      	ldr	r5, [r6, #4]
 8004fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fce:	07d9      	lsls	r1, r3, #31
 8004fd0:	d405      	bmi.n	8004fde <_vfiprintf_r+0x32>
 8004fd2:	89ab      	ldrh	r3, [r5, #12]
 8004fd4:	059a      	lsls	r2, r3, #22
 8004fd6:	d402      	bmi.n	8004fde <_vfiprintf_r+0x32>
 8004fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fda:	f7ff ff61 	bl	8004ea0 <__retarget_lock_acquire_recursive>
 8004fde:	89ab      	ldrh	r3, [r5, #12]
 8004fe0:	071b      	lsls	r3, r3, #28
 8004fe2:	d501      	bpl.n	8004fe8 <_vfiprintf_r+0x3c>
 8004fe4:	692b      	ldr	r3, [r5, #16]
 8004fe6:	b9eb      	cbnz	r3, 8005024 <_vfiprintf_r+0x78>
 8004fe8:	4629      	mov	r1, r5
 8004fea:	4630      	mov	r0, r6
 8004fec:	f000 fba2 	bl	8005734 <__swsetup_r>
 8004ff0:	b1c0      	cbz	r0, 8005024 <_vfiprintf_r+0x78>
 8004ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ff4:	07dc      	lsls	r4, r3, #31
 8004ff6:	d50e      	bpl.n	8005016 <_vfiprintf_r+0x6a>
 8004ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffc:	b01d      	add	sp, #116	; 0x74
 8004ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005002:	4b7b      	ldr	r3, [pc, #492]	; (80051f0 <_vfiprintf_r+0x244>)
 8005004:	429d      	cmp	r5, r3
 8005006:	d101      	bne.n	800500c <_vfiprintf_r+0x60>
 8005008:	68b5      	ldr	r5, [r6, #8]
 800500a:	e7df      	b.n	8004fcc <_vfiprintf_r+0x20>
 800500c:	4b79      	ldr	r3, [pc, #484]	; (80051f4 <_vfiprintf_r+0x248>)
 800500e:	429d      	cmp	r5, r3
 8005010:	bf08      	it	eq
 8005012:	68f5      	ldreq	r5, [r6, #12]
 8005014:	e7da      	b.n	8004fcc <_vfiprintf_r+0x20>
 8005016:	89ab      	ldrh	r3, [r5, #12]
 8005018:	0598      	lsls	r0, r3, #22
 800501a:	d4ed      	bmi.n	8004ff8 <_vfiprintf_r+0x4c>
 800501c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800501e:	f7ff ff40 	bl	8004ea2 <__retarget_lock_release_recursive>
 8005022:	e7e9      	b.n	8004ff8 <_vfiprintf_r+0x4c>
 8005024:	2300      	movs	r3, #0
 8005026:	9309      	str	r3, [sp, #36]	; 0x24
 8005028:	2320      	movs	r3, #32
 800502a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800502e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005032:	2330      	movs	r3, #48	; 0x30
 8005034:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80051f8 <_vfiprintf_r+0x24c>
 8005038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800503c:	f04f 0901 	mov.w	r9, #1
 8005040:	4623      	mov	r3, r4
 8005042:	469a      	mov	sl, r3
 8005044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005048:	b10a      	cbz	r2, 800504e <_vfiprintf_r+0xa2>
 800504a:	2a25      	cmp	r2, #37	; 0x25
 800504c:	d1f9      	bne.n	8005042 <_vfiprintf_r+0x96>
 800504e:	ebba 0b04 	subs.w	fp, sl, r4
 8005052:	d00b      	beq.n	800506c <_vfiprintf_r+0xc0>
 8005054:	465b      	mov	r3, fp
 8005056:	4622      	mov	r2, r4
 8005058:	4629      	mov	r1, r5
 800505a:	4630      	mov	r0, r6
 800505c:	f7ff ff93 	bl	8004f86 <__sfputs_r>
 8005060:	3001      	adds	r0, #1
 8005062:	f000 80aa 	beq.w	80051ba <_vfiprintf_r+0x20e>
 8005066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005068:	445a      	add	r2, fp
 800506a:	9209      	str	r2, [sp, #36]	; 0x24
 800506c:	f89a 3000 	ldrb.w	r3, [sl]
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80a2 	beq.w	80051ba <_vfiprintf_r+0x20e>
 8005076:	2300      	movs	r3, #0
 8005078:	f04f 32ff 	mov.w	r2, #4294967295
 800507c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005080:	f10a 0a01 	add.w	sl, sl, #1
 8005084:	9304      	str	r3, [sp, #16]
 8005086:	9307      	str	r3, [sp, #28]
 8005088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800508c:	931a      	str	r3, [sp, #104]	; 0x68
 800508e:	4654      	mov	r4, sl
 8005090:	2205      	movs	r2, #5
 8005092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005096:	4858      	ldr	r0, [pc, #352]	; (80051f8 <_vfiprintf_r+0x24c>)
 8005098:	f7fb f8a2 	bl	80001e0 <memchr>
 800509c:	9a04      	ldr	r2, [sp, #16]
 800509e:	b9d8      	cbnz	r0, 80050d8 <_vfiprintf_r+0x12c>
 80050a0:	06d1      	lsls	r1, r2, #27
 80050a2:	bf44      	itt	mi
 80050a4:	2320      	movmi	r3, #32
 80050a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050aa:	0713      	lsls	r3, r2, #28
 80050ac:	bf44      	itt	mi
 80050ae:	232b      	movmi	r3, #43	; 0x2b
 80050b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050b4:	f89a 3000 	ldrb.w	r3, [sl]
 80050b8:	2b2a      	cmp	r3, #42	; 0x2a
 80050ba:	d015      	beq.n	80050e8 <_vfiprintf_r+0x13c>
 80050bc:	9a07      	ldr	r2, [sp, #28]
 80050be:	4654      	mov	r4, sl
 80050c0:	2000      	movs	r0, #0
 80050c2:	f04f 0c0a 	mov.w	ip, #10
 80050c6:	4621      	mov	r1, r4
 80050c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050cc:	3b30      	subs	r3, #48	; 0x30
 80050ce:	2b09      	cmp	r3, #9
 80050d0:	d94e      	bls.n	8005170 <_vfiprintf_r+0x1c4>
 80050d2:	b1b0      	cbz	r0, 8005102 <_vfiprintf_r+0x156>
 80050d4:	9207      	str	r2, [sp, #28]
 80050d6:	e014      	b.n	8005102 <_vfiprintf_r+0x156>
 80050d8:	eba0 0308 	sub.w	r3, r0, r8
 80050dc:	fa09 f303 	lsl.w	r3, r9, r3
 80050e0:	4313      	orrs	r3, r2
 80050e2:	9304      	str	r3, [sp, #16]
 80050e4:	46a2      	mov	sl, r4
 80050e6:	e7d2      	b.n	800508e <_vfiprintf_r+0xe2>
 80050e8:	9b03      	ldr	r3, [sp, #12]
 80050ea:	1d19      	adds	r1, r3, #4
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	9103      	str	r1, [sp, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	bfbb      	ittet	lt
 80050f4:	425b      	neglt	r3, r3
 80050f6:	f042 0202 	orrlt.w	r2, r2, #2
 80050fa:	9307      	strge	r3, [sp, #28]
 80050fc:	9307      	strlt	r3, [sp, #28]
 80050fe:	bfb8      	it	lt
 8005100:	9204      	strlt	r2, [sp, #16]
 8005102:	7823      	ldrb	r3, [r4, #0]
 8005104:	2b2e      	cmp	r3, #46	; 0x2e
 8005106:	d10c      	bne.n	8005122 <_vfiprintf_r+0x176>
 8005108:	7863      	ldrb	r3, [r4, #1]
 800510a:	2b2a      	cmp	r3, #42	; 0x2a
 800510c:	d135      	bne.n	800517a <_vfiprintf_r+0x1ce>
 800510e:	9b03      	ldr	r3, [sp, #12]
 8005110:	1d1a      	adds	r2, r3, #4
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	9203      	str	r2, [sp, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	bfb8      	it	lt
 800511a:	f04f 33ff 	movlt.w	r3, #4294967295
 800511e:	3402      	adds	r4, #2
 8005120:	9305      	str	r3, [sp, #20]
 8005122:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005208 <_vfiprintf_r+0x25c>
 8005126:	7821      	ldrb	r1, [r4, #0]
 8005128:	2203      	movs	r2, #3
 800512a:	4650      	mov	r0, sl
 800512c:	f7fb f858 	bl	80001e0 <memchr>
 8005130:	b140      	cbz	r0, 8005144 <_vfiprintf_r+0x198>
 8005132:	2340      	movs	r3, #64	; 0x40
 8005134:	eba0 000a 	sub.w	r0, r0, sl
 8005138:	fa03 f000 	lsl.w	r0, r3, r0
 800513c:	9b04      	ldr	r3, [sp, #16]
 800513e:	4303      	orrs	r3, r0
 8005140:	3401      	adds	r4, #1
 8005142:	9304      	str	r3, [sp, #16]
 8005144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005148:	482c      	ldr	r0, [pc, #176]	; (80051fc <_vfiprintf_r+0x250>)
 800514a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800514e:	2206      	movs	r2, #6
 8005150:	f7fb f846 	bl	80001e0 <memchr>
 8005154:	2800      	cmp	r0, #0
 8005156:	d03f      	beq.n	80051d8 <_vfiprintf_r+0x22c>
 8005158:	4b29      	ldr	r3, [pc, #164]	; (8005200 <_vfiprintf_r+0x254>)
 800515a:	bb1b      	cbnz	r3, 80051a4 <_vfiprintf_r+0x1f8>
 800515c:	9b03      	ldr	r3, [sp, #12]
 800515e:	3307      	adds	r3, #7
 8005160:	f023 0307 	bic.w	r3, r3, #7
 8005164:	3308      	adds	r3, #8
 8005166:	9303      	str	r3, [sp, #12]
 8005168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800516a:	443b      	add	r3, r7
 800516c:	9309      	str	r3, [sp, #36]	; 0x24
 800516e:	e767      	b.n	8005040 <_vfiprintf_r+0x94>
 8005170:	fb0c 3202 	mla	r2, ip, r2, r3
 8005174:	460c      	mov	r4, r1
 8005176:	2001      	movs	r0, #1
 8005178:	e7a5      	b.n	80050c6 <_vfiprintf_r+0x11a>
 800517a:	2300      	movs	r3, #0
 800517c:	3401      	adds	r4, #1
 800517e:	9305      	str	r3, [sp, #20]
 8005180:	4619      	mov	r1, r3
 8005182:	f04f 0c0a 	mov.w	ip, #10
 8005186:	4620      	mov	r0, r4
 8005188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800518c:	3a30      	subs	r2, #48	; 0x30
 800518e:	2a09      	cmp	r2, #9
 8005190:	d903      	bls.n	800519a <_vfiprintf_r+0x1ee>
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0c5      	beq.n	8005122 <_vfiprintf_r+0x176>
 8005196:	9105      	str	r1, [sp, #20]
 8005198:	e7c3      	b.n	8005122 <_vfiprintf_r+0x176>
 800519a:	fb0c 2101 	mla	r1, ip, r1, r2
 800519e:	4604      	mov	r4, r0
 80051a0:	2301      	movs	r3, #1
 80051a2:	e7f0      	b.n	8005186 <_vfiprintf_r+0x1da>
 80051a4:	ab03      	add	r3, sp, #12
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	462a      	mov	r2, r5
 80051aa:	4b16      	ldr	r3, [pc, #88]	; (8005204 <_vfiprintf_r+0x258>)
 80051ac:	a904      	add	r1, sp, #16
 80051ae:	4630      	mov	r0, r6
 80051b0:	f3af 8000 	nop.w
 80051b4:	4607      	mov	r7, r0
 80051b6:	1c78      	adds	r0, r7, #1
 80051b8:	d1d6      	bne.n	8005168 <_vfiprintf_r+0x1bc>
 80051ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051bc:	07d9      	lsls	r1, r3, #31
 80051be:	d405      	bmi.n	80051cc <_vfiprintf_r+0x220>
 80051c0:	89ab      	ldrh	r3, [r5, #12]
 80051c2:	059a      	lsls	r2, r3, #22
 80051c4:	d402      	bmi.n	80051cc <_vfiprintf_r+0x220>
 80051c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051c8:	f7ff fe6b 	bl	8004ea2 <__retarget_lock_release_recursive>
 80051cc:	89ab      	ldrh	r3, [r5, #12]
 80051ce:	065b      	lsls	r3, r3, #25
 80051d0:	f53f af12 	bmi.w	8004ff8 <_vfiprintf_r+0x4c>
 80051d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051d6:	e711      	b.n	8004ffc <_vfiprintf_r+0x50>
 80051d8:	ab03      	add	r3, sp, #12
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	462a      	mov	r2, r5
 80051de:	4b09      	ldr	r3, [pc, #36]	; (8005204 <_vfiprintf_r+0x258>)
 80051e0:	a904      	add	r1, sp, #16
 80051e2:	4630      	mov	r0, r6
 80051e4:	f000 f880 	bl	80052e8 <_printf_i>
 80051e8:	e7e4      	b.n	80051b4 <_vfiprintf_r+0x208>
 80051ea:	bf00      	nop
 80051ec:	08006bc8 	.word	0x08006bc8
 80051f0:	08006be8 	.word	0x08006be8
 80051f4:	08006ba8 	.word	0x08006ba8
 80051f8:	08006c08 	.word	0x08006c08
 80051fc:	08006c12 	.word	0x08006c12
 8005200:	00000000 	.word	0x00000000
 8005204:	08004f87 	.word	0x08004f87
 8005208:	08006c0e 	.word	0x08006c0e

0800520c <_printf_common>:
 800520c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005210:	4616      	mov	r6, r2
 8005212:	4699      	mov	r9, r3
 8005214:	688a      	ldr	r2, [r1, #8]
 8005216:	690b      	ldr	r3, [r1, #16]
 8005218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800521c:	4293      	cmp	r3, r2
 800521e:	bfb8      	it	lt
 8005220:	4613      	movlt	r3, r2
 8005222:	6033      	str	r3, [r6, #0]
 8005224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005228:	4607      	mov	r7, r0
 800522a:	460c      	mov	r4, r1
 800522c:	b10a      	cbz	r2, 8005232 <_printf_common+0x26>
 800522e:	3301      	adds	r3, #1
 8005230:	6033      	str	r3, [r6, #0]
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	0699      	lsls	r1, r3, #26
 8005236:	bf42      	ittt	mi
 8005238:	6833      	ldrmi	r3, [r6, #0]
 800523a:	3302      	addmi	r3, #2
 800523c:	6033      	strmi	r3, [r6, #0]
 800523e:	6825      	ldr	r5, [r4, #0]
 8005240:	f015 0506 	ands.w	r5, r5, #6
 8005244:	d106      	bne.n	8005254 <_printf_common+0x48>
 8005246:	f104 0a19 	add.w	sl, r4, #25
 800524a:	68e3      	ldr	r3, [r4, #12]
 800524c:	6832      	ldr	r2, [r6, #0]
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	42ab      	cmp	r3, r5
 8005252:	dc26      	bgt.n	80052a2 <_printf_common+0x96>
 8005254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005258:	1e13      	subs	r3, r2, #0
 800525a:	6822      	ldr	r2, [r4, #0]
 800525c:	bf18      	it	ne
 800525e:	2301      	movne	r3, #1
 8005260:	0692      	lsls	r2, r2, #26
 8005262:	d42b      	bmi.n	80052bc <_printf_common+0xb0>
 8005264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005268:	4649      	mov	r1, r9
 800526a:	4638      	mov	r0, r7
 800526c:	47c0      	blx	r8
 800526e:	3001      	adds	r0, #1
 8005270:	d01e      	beq.n	80052b0 <_printf_common+0xa4>
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	68e5      	ldr	r5, [r4, #12]
 8005276:	6832      	ldr	r2, [r6, #0]
 8005278:	f003 0306 	and.w	r3, r3, #6
 800527c:	2b04      	cmp	r3, #4
 800527e:	bf08      	it	eq
 8005280:	1aad      	subeq	r5, r5, r2
 8005282:	68a3      	ldr	r3, [r4, #8]
 8005284:	6922      	ldr	r2, [r4, #16]
 8005286:	bf0c      	ite	eq
 8005288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800528c:	2500      	movne	r5, #0
 800528e:	4293      	cmp	r3, r2
 8005290:	bfc4      	itt	gt
 8005292:	1a9b      	subgt	r3, r3, r2
 8005294:	18ed      	addgt	r5, r5, r3
 8005296:	2600      	movs	r6, #0
 8005298:	341a      	adds	r4, #26
 800529a:	42b5      	cmp	r5, r6
 800529c:	d11a      	bne.n	80052d4 <_printf_common+0xc8>
 800529e:	2000      	movs	r0, #0
 80052a0:	e008      	b.n	80052b4 <_printf_common+0xa8>
 80052a2:	2301      	movs	r3, #1
 80052a4:	4652      	mov	r2, sl
 80052a6:	4649      	mov	r1, r9
 80052a8:	4638      	mov	r0, r7
 80052aa:	47c0      	blx	r8
 80052ac:	3001      	adds	r0, #1
 80052ae:	d103      	bne.n	80052b8 <_printf_common+0xac>
 80052b0:	f04f 30ff 	mov.w	r0, #4294967295
 80052b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b8:	3501      	adds	r5, #1
 80052ba:	e7c6      	b.n	800524a <_printf_common+0x3e>
 80052bc:	18e1      	adds	r1, r4, r3
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	2030      	movs	r0, #48	; 0x30
 80052c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052c6:	4422      	add	r2, r4
 80052c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052d0:	3302      	adds	r3, #2
 80052d2:	e7c7      	b.n	8005264 <_printf_common+0x58>
 80052d4:	2301      	movs	r3, #1
 80052d6:	4622      	mov	r2, r4
 80052d8:	4649      	mov	r1, r9
 80052da:	4638      	mov	r0, r7
 80052dc:	47c0      	blx	r8
 80052de:	3001      	adds	r0, #1
 80052e0:	d0e6      	beq.n	80052b0 <_printf_common+0xa4>
 80052e2:	3601      	adds	r6, #1
 80052e4:	e7d9      	b.n	800529a <_printf_common+0x8e>
	...

080052e8 <_printf_i>:
 80052e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052ec:	460c      	mov	r4, r1
 80052ee:	4691      	mov	r9, r2
 80052f0:	7e27      	ldrb	r7, [r4, #24]
 80052f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052f4:	2f78      	cmp	r7, #120	; 0x78
 80052f6:	4680      	mov	r8, r0
 80052f8:	469a      	mov	sl, r3
 80052fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052fe:	d807      	bhi.n	8005310 <_printf_i+0x28>
 8005300:	2f62      	cmp	r7, #98	; 0x62
 8005302:	d80a      	bhi.n	800531a <_printf_i+0x32>
 8005304:	2f00      	cmp	r7, #0
 8005306:	f000 80d8 	beq.w	80054ba <_printf_i+0x1d2>
 800530a:	2f58      	cmp	r7, #88	; 0x58
 800530c:	f000 80a3 	beq.w	8005456 <_printf_i+0x16e>
 8005310:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005318:	e03a      	b.n	8005390 <_printf_i+0xa8>
 800531a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800531e:	2b15      	cmp	r3, #21
 8005320:	d8f6      	bhi.n	8005310 <_printf_i+0x28>
 8005322:	a001      	add	r0, pc, #4	; (adr r0, 8005328 <_printf_i+0x40>)
 8005324:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005328:	08005381 	.word	0x08005381
 800532c:	08005395 	.word	0x08005395
 8005330:	08005311 	.word	0x08005311
 8005334:	08005311 	.word	0x08005311
 8005338:	08005311 	.word	0x08005311
 800533c:	08005311 	.word	0x08005311
 8005340:	08005395 	.word	0x08005395
 8005344:	08005311 	.word	0x08005311
 8005348:	08005311 	.word	0x08005311
 800534c:	08005311 	.word	0x08005311
 8005350:	08005311 	.word	0x08005311
 8005354:	080054a1 	.word	0x080054a1
 8005358:	080053c5 	.word	0x080053c5
 800535c:	08005483 	.word	0x08005483
 8005360:	08005311 	.word	0x08005311
 8005364:	08005311 	.word	0x08005311
 8005368:	080054c3 	.word	0x080054c3
 800536c:	08005311 	.word	0x08005311
 8005370:	080053c5 	.word	0x080053c5
 8005374:	08005311 	.word	0x08005311
 8005378:	08005311 	.word	0x08005311
 800537c:	0800548b 	.word	0x0800548b
 8005380:	680b      	ldr	r3, [r1, #0]
 8005382:	1d1a      	adds	r2, r3, #4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	600a      	str	r2, [r1, #0]
 8005388:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800538c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005390:	2301      	movs	r3, #1
 8005392:	e0a3      	b.n	80054dc <_printf_i+0x1f4>
 8005394:	6825      	ldr	r5, [r4, #0]
 8005396:	6808      	ldr	r0, [r1, #0]
 8005398:	062e      	lsls	r6, r5, #24
 800539a:	f100 0304 	add.w	r3, r0, #4
 800539e:	d50a      	bpl.n	80053b6 <_printf_i+0xce>
 80053a0:	6805      	ldr	r5, [r0, #0]
 80053a2:	600b      	str	r3, [r1, #0]
 80053a4:	2d00      	cmp	r5, #0
 80053a6:	da03      	bge.n	80053b0 <_printf_i+0xc8>
 80053a8:	232d      	movs	r3, #45	; 0x2d
 80053aa:	426d      	negs	r5, r5
 80053ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053b0:	485e      	ldr	r0, [pc, #376]	; (800552c <_printf_i+0x244>)
 80053b2:	230a      	movs	r3, #10
 80053b4:	e019      	b.n	80053ea <_printf_i+0x102>
 80053b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053ba:	6805      	ldr	r5, [r0, #0]
 80053bc:	600b      	str	r3, [r1, #0]
 80053be:	bf18      	it	ne
 80053c0:	b22d      	sxthne	r5, r5
 80053c2:	e7ef      	b.n	80053a4 <_printf_i+0xbc>
 80053c4:	680b      	ldr	r3, [r1, #0]
 80053c6:	6825      	ldr	r5, [r4, #0]
 80053c8:	1d18      	adds	r0, r3, #4
 80053ca:	6008      	str	r0, [r1, #0]
 80053cc:	0628      	lsls	r0, r5, #24
 80053ce:	d501      	bpl.n	80053d4 <_printf_i+0xec>
 80053d0:	681d      	ldr	r5, [r3, #0]
 80053d2:	e002      	b.n	80053da <_printf_i+0xf2>
 80053d4:	0669      	lsls	r1, r5, #25
 80053d6:	d5fb      	bpl.n	80053d0 <_printf_i+0xe8>
 80053d8:	881d      	ldrh	r5, [r3, #0]
 80053da:	4854      	ldr	r0, [pc, #336]	; (800552c <_printf_i+0x244>)
 80053dc:	2f6f      	cmp	r7, #111	; 0x6f
 80053de:	bf0c      	ite	eq
 80053e0:	2308      	moveq	r3, #8
 80053e2:	230a      	movne	r3, #10
 80053e4:	2100      	movs	r1, #0
 80053e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053ea:	6866      	ldr	r6, [r4, #4]
 80053ec:	60a6      	str	r6, [r4, #8]
 80053ee:	2e00      	cmp	r6, #0
 80053f0:	bfa2      	ittt	ge
 80053f2:	6821      	ldrge	r1, [r4, #0]
 80053f4:	f021 0104 	bicge.w	r1, r1, #4
 80053f8:	6021      	strge	r1, [r4, #0]
 80053fa:	b90d      	cbnz	r5, 8005400 <_printf_i+0x118>
 80053fc:	2e00      	cmp	r6, #0
 80053fe:	d04d      	beq.n	800549c <_printf_i+0x1b4>
 8005400:	4616      	mov	r6, r2
 8005402:	fbb5 f1f3 	udiv	r1, r5, r3
 8005406:	fb03 5711 	mls	r7, r3, r1, r5
 800540a:	5dc7      	ldrb	r7, [r0, r7]
 800540c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005410:	462f      	mov	r7, r5
 8005412:	42bb      	cmp	r3, r7
 8005414:	460d      	mov	r5, r1
 8005416:	d9f4      	bls.n	8005402 <_printf_i+0x11a>
 8005418:	2b08      	cmp	r3, #8
 800541a:	d10b      	bne.n	8005434 <_printf_i+0x14c>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	07df      	lsls	r7, r3, #31
 8005420:	d508      	bpl.n	8005434 <_printf_i+0x14c>
 8005422:	6923      	ldr	r3, [r4, #16]
 8005424:	6861      	ldr	r1, [r4, #4]
 8005426:	4299      	cmp	r1, r3
 8005428:	bfde      	ittt	le
 800542a:	2330      	movle	r3, #48	; 0x30
 800542c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005430:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005434:	1b92      	subs	r2, r2, r6
 8005436:	6122      	str	r2, [r4, #16]
 8005438:	f8cd a000 	str.w	sl, [sp]
 800543c:	464b      	mov	r3, r9
 800543e:	aa03      	add	r2, sp, #12
 8005440:	4621      	mov	r1, r4
 8005442:	4640      	mov	r0, r8
 8005444:	f7ff fee2 	bl	800520c <_printf_common>
 8005448:	3001      	adds	r0, #1
 800544a:	d14c      	bne.n	80054e6 <_printf_i+0x1fe>
 800544c:	f04f 30ff 	mov.w	r0, #4294967295
 8005450:	b004      	add	sp, #16
 8005452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005456:	4835      	ldr	r0, [pc, #212]	; (800552c <_printf_i+0x244>)
 8005458:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	680e      	ldr	r6, [r1, #0]
 8005460:	061f      	lsls	r7, r3, #24
 8005462:	f856 5b04 	ldr.w	r5, [r6], #4
 8005466:	600e      	str	r6, [r1, #0]
 8005468:	d514      	bpl.n	8005494 <_printf_i+0x1ac>
 800546a:	07d9      	lsls	r1, r3, #31
 800546c:	bf44      	itt	mi
 800546e:	f043 0320 	orrmi.w	r3, r3, #32
 8005472:	6023      	strmi	r3, [r4, #0]
 8005474:	b91d      	cbnz	r5, 800547e <_printf_i+0x196>
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	f023 0320 	bic.w	r3, r3, #32
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	2310      	movs	r3, #16
 8005480:	e7b0      	b.n	80053e4 <_printf_i+0xfc>
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	f043 0320 	orr.w	r3, r3, #32
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	2378      	movs	r3, #120	; 0x78
 800548c:	4828      	ldr	r0, [pc, #160]	; (8005530 <_printf_i+0x248>)
 800548e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005492:	e7e3      	b.n	800545c <_printf_i+0x174>
 8005494:	065e      	lsls	r6, r3, #25
 8005496:	bf48      	it	mi
 8005498:	b2ad      	uxthmi	r5, r5
 800549a:	e7e6      	b.n	800546a <_printf_i+0x182>
 800549c:	4616      	mov	r6, r2
 800549e:	e7bb      	b.n	8005418 <_printf_i+0x130>
 80054a0:	680b      	ldr	r3, [r1, #0]
 80054a2:	6826      	ldr	r6, [r4, #0]
 80054a4:	6960      	ldr	r0, [r4, #20]
 80054a6:	1d1d      	adds	r5, r3, #4
 80054a8:	600d      	str	r5, [r1, #0]
 80054aa:	0635      	lsls	r5, r6, #24
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	d501      	bpl.n	80054b4 <_printf_i+0x1cc>
 80054b0:	6018      	str	r0, [r3, #0]
 80054b2:	e002      	b.n	80054ba <_printf_i+0x1d2>
 80054b4:	0671      	lsls	r1, r6, #25
 80054b6:	d5fb      	bpl.n	80054b0 <_printf_i+0x1c8>
 80054b8:	8018      	strh	r0, [r3, #0]
 80054ba:	2300      	movs	r3, #0
 80054bc:	6123      	str	r3, [r4, #16]
 80054be:	4616      	mov	r6, r2
 80054c0:	e7ba      	b.n	8005438 <_printf_i+0x150>
 80054c2:	680b      	ldr	r3, [r1, #0]
 80054c4:	1d1a      	adds	r2, r3, #4
 80054c6:	600a      	str	r2, [r1, #0]
 80054c8:	681e      	ldr	r6, [r3, #0]
 80054ca:	6862      	ldr	r2, [r4, #4]
 80054cc:	2100      	movs	r1, #0
 80054ce:	4630      	mov	r0, r6
 80054d0:	f7fa fe86 	bl	80001e0 <memchr>
 80054d4:	b108      	cbz	r0, 80054da <_printf_i+0x1f2>
 80054d6:	1b80      	subs	r0, r0, r6
 80054d8:	6060      	str	r0, [r4, #4]
 80054da:	6863      	ldr	r3, [r4, #4]
 80054dc:	6123      	str	r3, [r4, #16]
 80054de:	2300      	movs	r3, #0
 80054e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e4:	e7a8      	b.n	8005438 <_printf_i+0x150>
 80054e6:	6923      	ldr	r3, [r4, #16]
 80054e8:	4632      	mov	r2, r6
 80054ea:	4649      	mov	r1, r9
 80054ec:	4640      	mov	r0, r8
 80054ee:	47d0      	blx	sl
 80054f0:	3001      	adds	r0, #1
 80054f2:	d0ab      	beq.n	800544c <_printf_i+0x164>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	079b      	lsls	r3, r3, #30
 80054f8:	d413      	bmi.n	8005522 <_printf_i+0x23a>
 80054fa:	68e0      	ldr	r0, [r4, #12]
 80054fc:	9b03      	ldr	r3, [sp, #12]
 80054fe:	4298      	cmp	r0, r3
 8005500:	bfb8      	it	lt
 8005502:	4618      	movlt	r0, r3
 8005504:	e7a4      	b.n	8005450 <_printf_i+0x168>
 8005506:	2301      	movs	r3, #1
 8005508:	4632      	mov	r2, r6
 800550a:	4649      	mov	r1, r9
 800550c:	4640      	mov	r0, r8
 800550e:	47d0      	blx	sl
 8005510:	3001      	adds	r0, #1
 8005512:	d09b      	beq.n	800544c <_printf_i+0x164>
 8005514:	3501      	adds	r5, #1
 8005516:	68e3      	ldr	r3, [r4, #12]
 8005518:	9903      	ldr	r1, [sp, #12]
 800551a:	1a5b      	subs	r3, r3, r1
 800551c:	42ab      	cmp	r3, r5
 800551e:	dcf2      	bgt.n	8005506 <_printf_i+0x21e>
 8005520:	e7eb      	b.n	80054fa <_printf_i+0x212>
 8005522:	2500      	movs	r5, #0
 8005524:	f104 0619 	add.w	r6, r4, #25
 8005528:	e7f5      	b.n	8005516 <_printf_i+0x22e>
 800552a:	bf00      	nop
 800552c:	08006c19 	.word	0x08006c19
 8005530:	08006c2a 	.word	0x08006c2a

08005534 <_putc_r>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	460d      	mov	r5, r1
 8005538:	4614      	mov	r4, r2
 800553a:	4606      	mov	r6, r0
 800553c:	b118      	cbz	r0, 8005546 <_putc_r+0x12>
 800553e:	6983      	ldr	r3, [r0, #24]
 8005540:	b90b      	cbnz	r3, 8005546 <_putc_r+0x12>
 8005542:	f7ff fc0f 	bl	8004d64 <__sinit>
 8005546:	4b1c      	ldr	r3, [pc, #112]	; (80055b8 <_putc_r+0x84>)
 8005548:	429c      	cmp	r4, r3
 800554a:	d124      	bne.n	8005596 <_putc_r+0x62>
 800554c:	6874      	ldr	r4, [r6, #4]
 800554e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005550:	07d8      	lsls	r0, r3, #31
 8005552:	d405      	bmi.n	8005560 <_putc_r+0x2c>
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	0599      	lsls	r1, r3, #22
 8005558:	d402      	bmi.n	8005560 <_putc_r+0x2c>
 800555a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800555c:	f7ff fca0 	bl	8004ea0 <__retarget_lock_acquire_recursive>
 8005560:	68a3      	ldr	r3, [r4, #8]
 8005562:	3b01      	subs	r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	60a3      	str	r3, [r4, #8]
 8005568:	da05      	bge.n	8005576 <_putc_r+0x42>
 800556a:	69a2      	ldr	r2, [r4, #24]
 800556c:	4293      	cmp	r3, r2
 800556e:	db1c      	blt.n	80055aa <_putc_r+0x76>
 8005570:	b2eb      	uxtb	r3, r5
 8005572:	2b0a      	cmp	r3, #10
 8005574:	d019      	beq.n	80055aa <_putc_r+0x76>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	6022      	str	r2, [r4, #0]
 800557c:	701d      	strb	r5, [r3, #0]
 800557e:	b2ed      	uxtb	r5, r5
 8005580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005582:	07da      	lsls	r2, r3, #31
 8005584:	d405      	bmi.n	8005592 <_putc_r+0x5e>
 8005586:	89a3      	ldrh	r3, [r4, #12]
 8005588:	059b      	lsls	r3, r3, #22
 800558a:	d402      	bmi.n	8005592 <_putc_r+0x5e>
 800558c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800558e:	f7ff fc88 	bl	8004ea2 <__retarget_lock_release_recursive>
 8005592:	4628      	mov	r0, r5
 8005594:	bd70      	pop	{r4, r5, r6, pc}
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <_putc_r+0x88>)
 8005598:	429c      	cmp	r4, r3
 800559a:	d101      	bne.n	80055a0 <_putc_r+0x6c>
 800559c:	68b4      	ldr	r4, [r6, #8]
 800559e:	e7d6      	b.n	800554e <_putc_r+0x1a>
 80055a0:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <_putc_r+0x8c>)
 80055a2:	429c      	cmp	r4, r3
 80055a4:	bf08      	it	eq
 80055a6:	68f4      	ldreq	r4, [r6, #12]
 80055a8:	e7d1      	b.n	800554e <_putc_r+0x1a>
 80055aa:	4629      	mov	r1, r5
 80055ac:	4622      	mov	r2, r4
 80055ae:	4630      	mov	r0, r6
 80055b0:	f000 f85c 	bl	800566c <__swbuf_r>
 80055b4:	4605      	mov	r5, r0
 80055b6:	e7e3      	b.n	8005580 <_putc_r+0x4c>
 80055b8:	08006bc8 	.word	0x08006bc8
 80055bc:	08006be8 	.word	0x08006be8
 80055c0:	08006ba8 	.word	0x08006ba8

080055c4 <_sbrk_r>:
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	4d06      	ldr	r5, [pc, #24]	; (80055e0 <_sbrk_r+0x1c>)
 80055c8:	2300      	movs	r3, #0
 80055ca:	4604      	mov	r4, r0
 80055cc:	4608      	mov	r0, r1
 80055ce:	602b      	str	r3, [r5, #0]
 80055d0:	f7fc fbf4 	bl	8001dbc <_sbrk>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d102      	bne.n	80055de <_sbrk_r+0x1a>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	b103      	cbz	r3, 80055de <_sbrk_r+0x1a>
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	bd38      	pop	{r3, r4, r5, pc}
 80055e0:	20000240 	.word	0x20000240

080055e4 <__sread>:
 80055e4:	b510      	push	{r4, lr}
 80055e6:	460c      	mov	r4, r1
 80055e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ec:	f000 fab4 	bl	8005b58 <_read_r>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	bfab      	itete	ge
 80055f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055f6:	89a3      	ldrhlt	r3, [r4, #12]
 80055f8:	181b      	addge	r3, r3, r0
 80055fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055fe:	bfac      	ite	ge
 8005600:	6563      	strge	r3, [r4, #84]	; 0x54
 8005602:	81a3      	strhlt	r3, [r4, #12]
 8005604:	bd10      	pop	{r4, pc}

08005606 <__swrite>:
 8005606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800560a:	461f      	mov	r7, r3
 800560c:	898b      	ldrh	r3, [r1, #12]
 800560e:	05db      	lsls	r3, r3, #23
 8005610:	4605      	mov	r5, r0
 8005612:	460c      	mov	r4, r1
 8005614:	4616      	mov	r6, r2
 8005616:	d505      	bpl.n	8005624 <__swrite+0x1e>
 8005618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800561c:	2302      	movs	r3, #2
 800561e:	2200      	movs	r2, #0
 8005620:	f000 f9c8 	bl	80059b4 <_lseek_r>
 8005624:	89a3      	ldrh	r3, [r4, #12]
 8005626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800562a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800562e:	81a3      	strh	r3, [r4, #12]
 8005630:	4632      	mov	r2, r6
 8005632:	463b      	mov	r3, r7
 8005634:	4628      	mov	r0, r5
 8005636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800563a:	f000 b869 	b.w	8005710 <_write_r>

0800563e <__sseek>:
 800563e:	b510      	push	{r4, lr}
 8005640:	460c      	mov	r4, r1
 8005642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005646:	f000 f9b5 	bl	80059b4 <_lseek_r>
 800564a:	1c43      	adds	r3, r0, #1
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	bf15      	itete	ne
 8005650:	6560      	strne	r0, [r4, #84]	; 0x54
 8005652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800565a:	81a3      	strheq	r3, [r4, #12]
 800565c:	bf18      	it	ne
 800565e:	81a3      	strhne	r3, [r4, #12]
 8005660:	bd10      	pop	{r4, pc}

08005662 <__sclose>:
 8005662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005666:	f000 b8d3 	b.w	8005810 <_close_r>
	...

0800566c <__swbuf_r>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	460e      	mov	r6, r1
 8005670:	4614      	mov	r4, r2
 8005672:	4605      	mov	r5, r0
 8005674:	b118      	cbz	r0, 800567e <__swbuf_r+0x12>
 8005676:	6983      	ldr	r3, [r0, #24]
 8005678:	b90b      	cbnz	r3, 800567e <__swbuf_r+0x12>
 800567a:	f7ff fb73 	bl	8004d64 <__sinit>
 800567e:	4b21      	ldr	r3, [pc, #132]	; (8005704 <__swbuf_r+0x98>)
 8005680:	429c      	cmp	r4, r3
 8005682:	d12b      	bne.n	80056dc <__swbuf_r+0x70>
 8005684:	686c      	ldr	r4, [r5, #4]
 8005686:	69a3      	ldr	r3, [r4, #24]
 8005688:	60a3      	str	r3, [r4, #8]
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	071a      	lsls	r2, r3, #28
 800568e:	d52f      	bpl.n	80056f0 <__swbuf_r+0x84>
 8005690:	6923      	ldr	r3, [r4, #16]
 8005692:	b36b      	cbz	r3, 80056f0 <__swbuf_r+0x84>
 8005694:	6923      	ldr	r3, [r4, #16]
 8005696:	6820      	ldr	r0, [r4, #0]
 8005698:	1ac0      	subs	r0, r0, r3
 800569a:	6963      	ldr	r3, [r4, #20]
 800569c:	b2f6      	uxtb	r6, r6
 800569e:	4283      	cmp	r3, r0
 80056a0:	4637      	mov	r7, r6
 80056a2:	dc04      	bgt.n	80056ae <__swbuf_r+0x42>
 80056a4:	4621      	mov	r1, r4
 80056a6:	4628      	mov	r0, r5
 80056a8:	f000 f948 	bl	800593c <_fflush_r>
 80056ac:	bb30      	cbnz	r0, 80056fc <__swbuf_r+0x90>
 80056ae:	68a3      	ldr	r3, [r4, #8]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	60a3      	str	r3, [r4, #8]
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	6022      	str	r2, [r4, #0]
 80056ba:	701e      	strb	r6, [r3, #0]
 80056bc:	6963      	ldr	r3, [r4, #20]
 80056be:	3001      	adds	r0, #1
 80056c0:	4283      	cmp	r3, r0
 80056c2:	d004      	beq.n	80056ce <__swbuf_r+0x62>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	07db      	lsls	r3, r3, #31
 80056c8:	d506      	bpl.n	80056d8 <__swbuf_r+0x6c>
 80056ca:	2e0a      	cmp	r6, #10
 80056cc:	d104      	bne.n	80056d8 <__swbuf_r+0x6c>
 80056ce:	4621      	mov	r1, r4
 80056d0:	4628      	mov	r0, r5
 80056d2:	f000 f933 	bl	800593c <_fflush_r>
 80056d6:	b988      	cbnz	r0, 80056fc <__swbuf_r+0x90>
 80056d8:	4638      	mov	r0, r7
 80056da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056dc:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <__swbuf_r+0x9c>)
 80056de:	429c      	cmp	r4, r3
 80056e0:	d101      	bne.n	80056e6 <__swbuf_r+0x7a>
 80056e2:	68ac      	ldr	r4, [r5, #8]
 80056e4:	e7cf      	b.n	8005686 <__swbuf_r+0x1a>
 80056e6:	4b09      	ldr	r3, [pc, #36]	; (800570c <__swbuf_r+0xa0>)
 80056e8:	429c      	cmp	r4, r3
 80056ea:	bf08      	it	eq
 80056ec:	68ec      	ldreq	r4, [r5, #12]
 80056ee:	e7ca      	b.n	8005686 <__swbuf_r+0x1a>
 80056f0:	4621      	mov	r1, r4
 80056f2:	4628      	mov	r0, r5
 80056f4:	f000 f81e 	bl	8005734 <__swsetup_r>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d0cb      	beq.n	8005694 <__swbuf_r+0x28>
 80056fc:	f04f 37ff 	mov.w	r7, #4294967295
 8005700:	e7ea      	b.n	80056d8 <__swbuf_r+0x6c>
 8005702:	bf00      	nop
 8005704:	08006bc8 	.word	0x08006bc8
 8005708:	08006be8 	.word	0x08006be8
 800570c:	08006ba8 	.word	0x08006ba8

08005710 <_write_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4d07      	ldr	r5, [pc, #28]	; (8005730 <_write_r+0x20>)
 8005714:	4604      	mov	r4, r0
 8005716:	4608      	mov	r0, r1
 8005718:	4611      	mov	r1, r2
 800571a:	2200      	movs	r2, #0
 800571c:	602a      	str	r2, [r5, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	f7fc fafb 	bl	8001d1a <_write>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d102      	bne.n	800572e <_write_r+0x1e>
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	b103      	cbz	r3, 800572e <_write_r+0x1e>
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	bd38      	pop	{r3, r4, r5, pc}
 8005730:	20000240 	.word	0x20000240

08005734 <__swsetup_r>:
 8005734:	4b32      	ldr	r3, [pc, #200]	; (8005800 <__swsetup_r+0xcc>)
 8005736:	b570      	push	{r4, r5, r6, lr}
 8005738:	681d      	ldr	r5, [r3, #0]
 800573a:	4606      	mov	r6, r0
 800573c:	460c      	mov	r4, r1
 800573e:	b125      	cbz	r5, 800574a <__swsetup_r+0x16>
 8005740:	69ab      	ldr	r3, [r5, #24]
 8005742:	b913      	cbnz	r3, 800574a <__swsetup_r+0x16>
 8005744:	4628      	mov	r0, r5
 8005746:	f7ff fb0d 	bl	8004d64 <__sinit>
 800574a:	4b2e      	ldr	r3, [pc, #184]	; (8005804 <__swsetup_r+0xd0>)
 800574c:	429c      	cmp	r4, r3
 800574e:	d10f      	bne.n	8005770 <__swsetup_r+0x3c>
 8005750:	686c      	ldr	r4, [r5, #4]
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005758:	0719      	lsls	r1, r3, #28
 800575a:	d42c      	bmi.n	80057b6 <__swsetup_r+0x82>
 800575c:	06dd      	lsls	r5, r3, #27
 800575e:	d411      	bmi.n	8005784 <__swsetup_r+0x50>
 8005760:	2309      	movs	r3, #9
 8005762:	6033      	str	r3, [r6, #0]
 8005764:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005768:	81a3      	strh	r3, [r4, #12]
 800576a:	f04f 30ff 	mov.w	r0, #4294967295
 800576e:	e03e      	b.n	80057ee <__swsetup_r+0xba>
 8005770:	4b25      	ldr	r3, [pc, #148]	; (8005808 <__swsetup_r+0xd4>)
 8005772:	429c      	cmp	r4, r3
 8005774:	d101      	bne.n	800577a <__swsetup_r+0x46>
 8005776:	68ac      	ldr	r4, [r5, #8]
 8005778:	e7eb      	b.n	8005752 <__swsetup_r+0x1e>
 800577a:	4b24      	ldr	r3, [pc, #144]	; (800580c <__swsetup_r+0xd8>)
 800577c:	429c      	cmp	r4, r3
 800577e:	bf08      	it	eq
 8005780:	68ec      	ldreq	r4, [r5, #12]
 8005782:	e7e6      	b.n	8005752 <__swsetup_r+0x1e>
 8005784:	0758      	lsls	r0, r3, #29
 8005786:	d512      	bpl.n	80057ae <__swsetup_r+0x7a>
 8005788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800578a:	b141      	cbz	r1, 800579e <__swsetup_r+0x6a>
 800578c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005790:	4299      	cmp	r1, r3
 8005792:	d002      	beq.n	800579a <__swsetup_r+0x66>
 8005794:	4630      	mov	r0, r6
 8005796:	f000 f98f 	bl	8005ab8 <_free_r>
 800579a:	2300      	movs	r3, #0
 800579c:	6363      	str	r3, [r4, #52]	; 0x34
 800579e:	89a3      	ldrh	r3, [r4, #12]
 80057a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057a4:	81a3      	strh	r3, [r4, #12]
 80057a6:	2300      	movs	r3, #0
 80057a8:	6063      	str	r3, [r4, #4]
 80057aa:	6923      	ldr	r3, [r4, #16]
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	f043 0308 	orr.w	r3, r3, #8
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	6923      	ldr	r3, [r4, #16]
 80057b8:	b94b      	cbnz	r3, 80057ce <__swsetup_r+0x9a>
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c4:	d003      	beq.n	80057ce <__swsetup_r+0x9a>
 80057c6:	4621      	mov	r1, r4
 80057c8:	4630      	mov	r0, r6
 80057ca:	f000 f929 	bl	8005a20 <__smakebuf_r>
 80057ce:	89a0      	ldrh	r0, [r4, #12]
 80057d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057d4:	f010 0301 	ands.w	r3, r0, #1
 80057d8:	d00a      	beq.n	80057f0 <__swsetup_r+0xbc>
 80057da:	2300      	movs	r3, #0
 80057dc:	60a3      	str	r3, [r4, #8]
 80057de:	6963      	ldr	r3, [r4, #20]
 80057e0:	425b      	negs	r3, r3
 80057e2:	61a3      	str	r3, [r4, #24]
 80057e4:	6923      	ldr	r3, [r4, #16]
 80057e6:	b943      	cbnz	r3, 80057fa <__swsetup_r+0xc6>
 80057e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057ec:	d1ba      	bne.n	8005764 <__swsetup_r+0x30>
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	0781      	lsls	r1, r0, #30
 80057f2:	bf58      	it	pl
 80057f4:	6963      	ldrpl	r3, [r4, #20]
 80057f6:	60a3      	str	r3, [r4, #8]
 80057f8:	e7f4      	b.n	80057e4 <__swsetup_r+0xb0>
 80057fa:	2000      	movs	r0, #0
 80057fc:	e7f7      	b.n	80057ee <__swsetup_r+0xba>
 80057fe:	bf00      	nop
 8005800:	20000024 	.word	0x20000024
 8005804:	08006bc8 	.word	0x08006bc8
 8005808:	08006be8 	.word	0x08006be8
 800580c:	08006ba8 	.word	0x08006ba8

08005810 <_close_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	4d06      	ldr	r5, [pc, #24]	; (800582c <_close_r+0x1c>)
 8005814:	2300      	movs	r3, #0
 8005816:	4604      	mov	r4, r0
 8005818:	4608      	mov	r0, r1
 800581a:	602b      	str	r3, [r5, #0]
 800581c:	f7fc fa99 	bl	8001d52 <_close>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d102      	bne.n	800582a <_close_r+0x1a>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	b103      	cbz	r3, 800582a <_close_r+0x1a>
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	20000240 	.word	0x20000240

08005830 <__sflush_r>:
 8005830:	898a      	ldrh	r2, [r1, #12]
 8005832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005836:	4605      	mov	r5, r0
 8005838:	0710      	lsls	r0, r2, #28
 800583a:	460c      	mov	r4, r1
 800583c:	d458      	bmi.n	80058f0 <__sflush_r+0xc0>
 800583e:	684b      	ldr	r3, [r1, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	dc05      	bgt.n	8005850 <__sflush_r+0x20>
 8005844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	dc02      	bgt.n	8005850 <__sflush_r+0x20>
 800584a:	2000      	movs	r0, #0
 800584c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005852:	2e00      	cmp	r6, #0
 8005854:	d0f9      	beq.n	800584a <__sflush_r+0x1a>
 8005856:	2300      	movs	r3, #0
 8005858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800585c:	682f      	ldr	r7, [r5, #0]
 800585e:	602b      	str	r3, [r5, #0]
 8005860:	d032      	beq.n	80058c8 <__sflush_r+0x98>
 8005862:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	075a      	lsls	r2, r3, #29
 8005868:	d505      	bpl.n	8005876 <__sflush_r+0x46>
 800586a:	6863      	ldr	r3, [r4, #4]
 800586c:	1ac0      	subs	r0, r0, r3
 800586e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005870:	b10b      	cbz	r3, 8005876 <__sflush_r+0x46>
 8005872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005874:	1ac0      	subs	r0, r0, r3
 8005876:	2300      	movs	r3, #0
 8005878:	4602      	mov	r2, r0
 800587a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800587c:	6a21      	ldr	r1, [r4, #32]
 800587e:	4628      	mov	r0, r5
 8005880:	47b0      	blx	r6
 8005882:	1c43      	adds	r3, r0, #1
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	d106      	bne.n	8005896 <__sflush_r+0x66>
 8005888:	6829      	ldr	r1, [r5, #0]
 800588a:	291d      	cmp	r1, #29
 800588c:	d82c      	bhi.n	80058e8 <__sflush_r+0xb8>
 800588e:	4a2a      	ldr	r2, [pc, #168]	; (8005938 <__sflush_r+0x108>)
 8005890:	40ca      	lsrs	r2, r1
 8005892:	07d6      	lsls	r6, r2, #31
 8005894:	d528      	bpl.n	80058e8 <__sflush_r+0xb8>
 8005896:	2200      	movs	r2, #0
 8005898:	6062      	str	r2, [r4, #4]
 800589a:	04d9      	lsls	r1, r3, #19
 800589c:	6922      	ldr	r2, [r4, #16]
 800589e:	6022      	str	r2, [r4, #0]
 80058a0:	d504      	bpl.n	80058ac <__sflush_r+0x7c>
 80058a2:	1c42      	adds	r2, r0, #1
 80058a4:	d101      	bne.n	80058aa <__sflush_r+0x7a>
 80058a6:	682b      	ldr	r3, [r5, #0]
 80058a8:	b903      	cbnz	r3, 80058ac <__sflush_r+0x7c>
 80058aa:	6560      	str	r0, [r4, #84]	; 0x54
 80058ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ae:	602f      	str	r7, [r5, #0]
 80058b0:	2900      	cmp	r1, #0
 80058b2:	d0ca      	beq.n	800584a <__sflush_r+0x1a>
 80058b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058b8:	4299      	cmp	r1, r3
 80058ba:	d002      	beq.n	80058c2 <__sflush_r+0x92>
 80058bc:	4628      	mov	r0, r5
 80058be:	f000 f8fb 	bl	8005ab8 <_free_r>
 80058c2:	2000      	movs	r0, #0
 80058c4:	6360      	str	r0, [r4, #52]	; 0x34
 80058c6:	e7c1      	b.n	800584c <__sflush_r+0x1c>
 80058c8:	6a21      	ldr	r1, [r4, #32]
 80058ca:	2301      	movs	r3, #1
 80058cc:	4628      	mov	r0, r5
 80058ce:	47b0      	blx	r6
 80058d0:	1c41      	adds	r1, r0, #1
 80058d2:	d1c7      	bne.n	8005864 <__sflush_r+0x34>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0c4      	beq.n	8005864 <__sflush_r+0x34>
 80058da:	2b1d      	cmp	r3, #29
 80058dc:	d001      	beq.n	80058e2 <__sflush_r+0xb2>
 80058de:	2b16      	cmp	r3, #22
 80058e0:	d101      	bne.n	80058e6 <__sflush_r+0xb6>
 80058e2:	602f      	str	r7, [r5, #0]
 80058e4:	e7b1      	b.n	800584a <__sflush_r+0x1a>
 80058e6:	89a3      	ldrh	r3, [r4, #12]
 80058e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ec:	81a3      	strh	r3, [r4, #12]
 80058ee:	e7ad      	b.n	800584c <__sflush_r+0x1c>
 80058f0:	690f      	ldr	r7, [r1, #16]
 80058f2:	2f00      	cmp	r7, #0
 80058f4:	d0a9      	beq.n	800584a <__sflush_r+0x1a>
 80058f6:	0793      	lsls	r3, r2, #30
 80058f8:	680e      	ldr	r6, [r1, #0]
 80058fa:	bf08      	it	eq
 80058fc:	694b      	ldreq	r3, [r1, #20]
 80058fe:	600f      	str	r7, [r1, #0]
 8005900:	bf18      	it	ne
 8005902:	2300      	movne	r3, #0
 8005904:	eba6 0807 	sub.w	r8, r6, r7
 8005908:	608b      	str	r3, [r1, #8]
 800590a:	f1b8 0f00 	cmp.w	r8, #0
 800590e:	dd9c      	ble.n	800584a <__sflush_r+0x1a>
 8005910:	6a21      	ldr	r1, [r4, #32]
 8005912:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005914:	4643      	mov	r3, r8
 8005916:	463a      	mov	r2, r7
 8005918:	4628      	mov	r0, r5
 800591a:	47b0      	blx	r6
 800591c:	2800      	cmp	r0, #0
 800591e:	dc06      	bgt.n	800592e <__sflush_r+0xfe>
 8005920:	89a3      	ldrh	r3, [r4, #12]
 8005922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005926:	81a3      	strh	r3, [r4, #12]
 8005928:	f04f 30ff 	mov.w	r0, #4294967295
 800592c:	e78e      	b.n	800584c <__sflush_r+0x1c>
 800592e:	4407      	add	r7, r0
 8005930:	eba8 0800 	sub.w	r8, r8, r0
 8005934:	e7e9      	b.n	800590a <__sflush_r+0xda>
 8005936:	bf00      	nop
 8005938:	20400001 	.word	0x20400001

0800593c <_fflush_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	690b      	ldr	r3, [r1, #16]
 8005940:	4605      	mov	r5, r0
 8005942:	460c      	mov	r4, r1
 8005944:	b913      	cbnz	r3, 800594c <_fflush_r+0x10>
 8005946:	2500      	movs	r5, #0
 8005948:	4628      	mov	r0, r5
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	b118      	cbz	r0, 8005956 <_fflush_r+0x1a>
 800594e:	6983      	ldr	r3, [r0, #24]
 8005950:	b90b      	cbnz	r3, 8005956 <_fflush_r+0x1a>
 8005952:	f7ff fa07 	bl	8004d64 <__sinit>
 8005956:	4b14      	ldr	r3, [pc, #80]	; (80059a8 <_fflush_r+0x6c>)
 8005958:	429c      	cmp	r4, r3
 800595a:	d11b      	bne.n	8005994 <_fflush_r+0x58>
 800595c:	686c      	ldr	r4, [r5, #4]
 800595e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0ef      	beq.n	8005946 <_fflush_r+0xa>
 8005966:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005968:	07d0      	lsls	r0, r2, #31
 800596a:	d404      	bmi.n	8005976 <_fflush_r+0x3a>
 800596c:	0599      	lsls	r1, r3, #22
 800596e:	d402      	bmi.n	8005976 <_fflush_r+0x3a>
 8005970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005972:	f7ff fa95 	bl	8004ea0 <__retarget_lock_acquire_recursive>
 8005976:	4628      	mov	r0, r5
 8005978:	4621      	mov	r1, r4
 800597a:	f7ff ff59 	bl	8005830 <__sflush_r>
 800597e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005980:	07da      	lsls	r2, r3, #31
 8005982:	4605      	mov	r5, r0
 8005984:	d4e0      	bmi.n	8005948 <_fflush_r+0xc>
 8005986:	89a3      	ldrh	r3, [r4, #12]
 8005988:	059b      	lsls	r3, r3, #22
 800598a:	d4dd      	bmi.n	8005948 <_fflush_r+0xc>
 800598c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800598e:	f7ff fa88 	bl	8004ea2 <__retarget_lock_release_recursive>
 8005992:	e7d9      	b.n	8005948 <_fflush_r+0xc>
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <_fflush_r+0x70>)
 8005996:	429c      	cmp	r4, r3
 8005998:	d101      	bne.n	800599e <_fflush_r+0x62>
 800599a:	68ac      	ldr	r4, [r5, #8]
 800599c:	e7df      	b.n	800595e <_fflush_r+0x22>
 800599e:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <_fflush_r+0x74>)
 80059a0:	429c      	cmp	r4, r3
 80059a2:	bf08      	it	eq
 80059a4:	68ec      	ldreq	r4, [r5, #12]
 80059a6:	e7da      	b.n	800595e <_fflush_r+0x22>
 80059a8:	08006bc8 	.word	0x08006bc8
 80059ac:	08006be8 	.word	0x08006be8
 80059b0:	08006ba8 	.word	0x08006ba8

080059b4 <_lseek_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d07      	ldr	r5, [pc, #28]	; (80059d4 <_lseek_r+0x20>)
 80059b8:	4604      	mov	r4, r0
 80059ba:	4608      	mov	r0, r1
 80059bc:	4611      	mov	r1, r2
 80059be:	2200      	movs	r2, #0
 80059c0:	602a      	str	r2, [r5, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	f7fc f9ec 	bl	8001da0 <_lseek>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	d102      	bne.n	80059d2 <_lseek_r+0x1e>
 80059cc:	682b      	ldr	r3, [r5, #0]
 80059ce:	b103      	cbz	r3, 80059d2 <_lseek_r+0x1e>
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	bd38      	pop	{r3, r4, r5, pc}
 80059d4:	20000240 	.word	0x20000240

080059d8 <__swhatbuf_r>:
 80059d8:	b570      	push	{r4, r5, r6, lr}
 80059da:	460e      	mov	r6, r1
 80059dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e0:	2900      	cmp	r1, #0
 80059e2:	b096      	sub	sp, #88	; 0x58
 80059e4:	4614      	mov	r4, r2
 80059e6:	461d      	mov	r5, r3
 80059e8:	da07      	bge.n	80059fa <__swhatbuf_r+0x22>
 80059ea:	2300      	movs	r3, #0
 80059ec:	602b      	str	r3, [r5, #0]
 80059ee:	89b3      	ldrh	r3, [r6, #12]
 80059f0:	061a      	lsls	r2, r3, #24
 80059f2:	d410      	bmi.n	8005a16 <__swhatbuf_r+0x3e>
 80059f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059f8:	e00e      	b.n	8005a18 <__swhatbuf_r+0x40>
 80059fa:	466a      	mov	r2, sp
 80059fc:	f000 f8be 	bl	8005b7c <_fstat_r>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	dbf2      	blt.n	80059ea <__swhatbuf_r+0x12>
 8005a04:	9a01      	ldr	r2, [sp, #4]
 8005a06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a0e:	425a      	negs	r2, r3
 8005a10:	415a      	adcs	r2, r3
 8005a12:	602a      	str	r2, [r5, #0]
 8005a14:	e7ee      	b.n	80059f4 <__swhatbuf_r+0x1c>
 8005a16:	2340      	movs	r3, #64	; 0x40
 8005a18:	2000      	movs	r0, #0
 8005a1a:	6023      	str	r3, [r4, #0]
 8005a1c:	b016      	add	sp, #88	; 0x58
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}

08005a20 <__smakebuf_r>:
 8005a20:	898b      	ldrh	r3, [r1, #12]
 8005a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a24:	079d      	lsls	r5, r3, #30
 8005a26:	4606      	mov	r6, r0
 8005a28:	460c      	mov	r4, r1
 8005a2a:	d507      	bpl.n	8005a3c <__smakebuf_r+0x1c>
 8005a2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	6123      	str	r3, [r4, #16]
 8005a34:	2301      	movs	r3, #1
 8005a36:	6163      	str	r3, [r4, #20]
 8005a38:	b002      	add	sp, #8
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}
 8005a3c:	ab01      	add	r3, sp, #4
 8005a3e:	466a      	mov	r2, sp
 8005a40:	f7ff ffca 	bl	80059d8 <__swhatbuf_r>
 8005a44:	9900      	ldr	r1, [sp, #0]
 8005a46:	4605      	mov	r5, r0
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f7ff fa2b 	bl	8004ea4 <_malloc_r>
 8005a4e:	b948      	cbnz	r0, 8005a64 <__smakebuf_r+0x44>
 8005a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a54:	059a      	lsls	r2, r3, #22
 8005a56:	d4ef      	bmi.n	8005a38 <__smakebuf_r+0x18>
 8005a58:	f023 0303 	bic.w	r3, r3, #3
 8005a5c:	f043 0302 	orr.w	r3, r3, #2
 8005a60:	81a3      	strh	r3, [r4, #12]
 8005a62:	e7e3      	b.n	8005a2c <__smakebuf_r+0xc>
 8005a64:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <__smakebuf_r+0x7c>)
 8005a66:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a68:	89a3      	ldrh	r3, [r4, #12]
 8005a6a:	6020      	str	r0, [r4, #0]
 8005a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a70:	81a3      	strh	r3, [r4, #12]
 8005a72:	9b00      	ldr	r3, [sp, #0]
 8005a74:	6163      	str	r3, [r4, #20]
 8005a76:	9b01      	ldr	r3, [sp, #4]
 8005a78:	6120      	str	r0, [r4, #16]
 8005a7a:	b15b      	cbz	r3, 8005a94 <__smakebuf_r+0x74>
 8005a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a80:	4630      	mov	r0, r6
 8005a82:	f000 f88d 	bl	8005ba0 <_isatty_r>
 8005a86:	b128      	cbz	r0, 8005a94 <__smakebuf_r+0x74>
 8005a88:	89a3      	ldrh	r3, [r4, #12]
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	81a3      	strh	r3, [r4, #12]
 8005a94:	89a0      	ldrh	r0, [r4, #12]
 8005a96:	4305      	orrs	r5, r0
 8005a98:	81a5      	strh	r5, [r4, #12]
 8005a9a:	e7cd      	b.n	8005a38 <__smakebuf_r+0x18>
 8005a9c:	08004cfd 	.word	0x08004cfd

08005aa0 <__malloc_lock>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	; (8005aa8 <__malloc_lock+0x8>)
 8005aa2:	f7ff b9fd 	b.w	8004ea0 <__retarget_lock_acquire_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	20000238 	.word	0x20000238

08005aac <__malloc_unlock>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <__malloc_unlock+0x8>)
 8005aae:	f7ff b9f8 	b.w	8004ea2 <__retarget_lock_release_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	20000238 	.word	0x20000238

08005ab8 <_free_r>:
 8005ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005aba:	2900      	cmp	r1, #0
 8005abc:	d048      	beq.n	8005b50 <_free_r+0x98>
 8005abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ac2:	9001      	str	r0, [sp, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f1a1 0404 	sub.w	r4, r1, #4
 8005aca:	bfb8      	it	lt
 8005acc:	18e4      	addlt	r4, r4, r3
 8005ace:	f7ff ffe7 	bl	8005aa0 <__malloc_lock>
 8005ad2:	4a20      	ldr	r2, [pc, #128]	; (8005b54 <_free_r+0x9c>)
 8005ad4:	9801      	ldr	r0, [sp, #4]
 8005ad6:	6813      	ldr	r3, [r2, #0]
 8005ad8:	4615      	mov	r5, r2
 8005ada:	b933      	cbnz	r3, 8005aea <_free_r+0x32>
 8005adc:	6063      	str	r3, [r4, #4]
 8005ade:	6014      	str	r4, [r2, #0]
 8005ae0:	b003      	add	sp, #12
 8005ae2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ae6:	f7ff bfe1 	b.w	8005aac <__malloc_unlock>
 8005aea:	42a3      	cmp	r3, r4
 8005aec:	d90b      	bls.n	8005b06 <_free_r+0x4e>
 8005aee:	6821      	ldr	r1, [r4, #0]
 8005af0:	1862      	adds	r2, r4, r1
 8005af2:	4293      	cmp	r3, r2
 8005af4:	bf04      	itt	eq
 8005af6:	681a      	ldreq	r2, [r3, #0]
 8005af8:	685b      	ldreq	r3, [r3, #4]
 8005afa:	6063      	str	r3, [r4, #4]
 8005afc:	bf04      	itt	eq
 8005afe:	1852      	addeq	r2, r2, r1
 8005b00:	6022      	streq	r2, [r4, #0]
 8005b02:	602c      	str	r4, [r5, #0]
 8005b04:	e7ec      	b.n	8005ae0 <_free_r+0x28>
 8005b06:	461a      	mov	r2, r3
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	b10b      	cbz	r3, 8005b10 <_free_r+0x58>
 8005b0c:	42a3      	cmp	r3, r4
 8005b0e:	d9fa      	bls.n	8005b06 <_free_r+0x4e>
 8005b10:	6811      	ldr	r1, [r2, #0]
 8005b12:	1855      	adds	r5, r2, r1
 8005b14:	42a5      	cmp	r5, r4
 8005b16:	d10b      	bne.n	8005b30 <_free_r+0x78>
 8005b18:	6824      	ldr	r4, [r4, #0]
 8005b1a:	4421      	add	r1, r4
 8005b1c:	1854      	adds	r4, r2, r1
 8005b1e:	42a3      	cmp	r3, r4
 8005b20:	6011      	str	r1, [r2, #0]
 8005b22:	d1dd      	bne.n	8005ae0 <_free_r+0x28>
 8005b24:	681c      	ldr	r4, [r3, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	6053      	str	r3, [r2, #4]
 8005b2a:	4421      	add	r1, r4
 8005b2c:	6011      	str	r1, [r2, #0]
 8005b2e:	e7d7      	b.n	8005ae0 <_free_r+0x28>
 8005b30:	d902      	bls.n	8005b38 <_free_r+0x80>
 8005b32:	230c      	movs	r3, #12
 8005b34:	6003      	str	r3, [r0, #0]
 8005b36:	e7d3      	b.n	8005ae0 <_free_r+0x28>
 8005b38:	6825      	ldr	r5, [r4, #0]
 8005b3a:	1961      	adds	r1, r4, r5
 8005b3c:	428b      	cmp	r3, r1
 8005b3e:	bf04      	itt	eq
 8005b40:	6819      	ldreq	r1, [r3, #0]
 8005b42:	685b      	ldreq	r3, [r3, #4]
 8005b44:	6063      	str	r3, [r4, #4]
 8005b46:	bf04      	itt	eq
 8005b48:	1949      	addeq	r1, r1, r5
 8005b4a:	6021      	streq	r1, [r4, #0]
 8005b4c:	6054      	str	r4, [r2, #4]
 8005b4e:	e7c7      	b.n	8005ae0 <_free_r+0x28>
 8005b50:	b003      	add	sp, #12
 8005b52:	bd30      	pop	{r4, r5, pc}
 8005b54:	200000cc 	.word	0x200000cc

08005b58 <_read_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4d07      	ldr	r5, [pc, #28]	; (8005b78 <_read_r+0x20>)
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	4608      	mov	r0, r1
 8005b60:	4611      	mov	r1, r2
 8005b62:	2200      	movs	r2, #0
 8005b64:	602a      	str	r2, [r5, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	f7fc f8ba 	bl	8001ce0 <_read>
 8005b6c:	1c43      	adds	r3, r0, #1
 8005b6e:	d102      	bne.n	8005b76 <_read_r+0x1e>
 8005b70:	682b      	ldr	r3, [r5, #0]
 8005b72:	b103      	cbz	r3, 8005b76 <_read_r+0x1e>
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	bd38      	pop	{r3, r4, r5, pc}
 8005b78:	20000240 	.word	0x20000240

08005b7c <_fstat_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4d07      	ldr	r5, [pc, #28]	; (8005b9c <_fstat_r+0x20>)
 8005b80:	2300      	movs	r3, #0
 8005b82:	4604      	mov	r4, r0
 8005b84:	4608      	mov	r0, r1
 8005b86:	4611      	mov	r1, r2
 8005b88:	602b      	str	r3, [r5, #0]
 8005b8a:	f7fc f8ee 	bl	8001d6a <_fstat>
 8005b8e:	1c43      	adds	r3, r0, #1
 8005b90:	d102      	bne.n	8005b98 <_fstat_r+0x1c>
 8005b92:	682b      	ldr	r3, [r5, #0]
 8005b94:	b103      	cbz	r3, 8005b98 <_fstat_r+0x1c>
 8005b96:	6023      	str	r3, [r4, #0]
 8005b98:	bd38      	pop	{r3, r4, r5, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000240 	.word	0x20000240

08005ba0 <_isatty_r>:
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	4d06      	ldr	r5, [pc, #24]	; (8005bbc <_isatty_r+0x1c>)
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	4608      	mov	r0, r1
 8005baa:	602b      	str	r3, [r5, #0]
 8005bac:	f7fc f8ed 	bl	8001d8a <_isatty>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_isatty_r+0x1a>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_isatty_r+0x1a>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	20000240 	.word	0x20000240

08005bc0 <pow>:
 8005bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bc4:	ec59 8b10 	vmov	r8, r9, d0
 8005bc8:	ec57 6b11 	vmov	r6, r7, d1
 8005bcc:	f000 f8a8 	bl	8005d20 <__ieee754_pow>
 8005bd0:	4b4e      	ldr	r3, [pc, #312]	; (8005d0c <pow+0x14c>)
 8005bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	ec55 4b10 	vmov	r4, r5, d0
 8005bdc:	d015      	beq.n	8005c0a <pow+0x4a>
 8005bde:	4632      	mov	r2, r6
 8005be0:	463b      	mov	r3, r7
 8005be2:	4630      	mov	r0, r6
 8005be4:	4639      	mov	r1, r7
 8005be6:	f7fa ffa1 	bl	8000b2c <__aeabi_dcmpun>
 8005bea:	b970      	cbnz	r0, 8005c0a <pow+0x4a>
 8005bec:	4642      	mov	r2, r8
 8005bee:	464b      	mov	r3, r9
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	f7fa ff9a 	bl	8000b2c <__aeabi_dcmpun>
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	b148      	cbz	r0, 8005c12 <pow+0x52>
 8005bfe:	4630      	mov	r0, r6
 8005c00:	4639      	mov	r1, r7
 8005c02:	f7fa ff61 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d17d      	bne.n	8005d06 <pow+0x146>
 8005c0a:	ec45 4b10 	vmov	d0, r4, r5
 8005c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c12:	4640      	mov	r0, r8
 8005c14:	4649      	mov	r1, r9
 8005c16:	f7fa ff57 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c1a:	b1e0      	cbz	r0, 8005c56 <pow+0x96>
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2300      	movs	r3, #0
 8005c20:	4630      	mov	r0, r6
 8005c22:	4639      	mov	r1, r7
 8005c24:	f7fa ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d16c      	bne.n	8005d06 <pow+0x146>
 8005c2c:	ec47 6b10 	vmov	d0, r6, r7
 8005c30:	f000 fe55 	bl	80068de <finite>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d0e8      	beq.n	8005c0a <pow+0x4a>
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	4639      	mov	r1, r7
 8005c40:	f7fa ff4c 	bl	8000adc <__aeabi_dcmplt>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d0e0      	beq.n	8005c0a <pow+0x4a>
 8005c48:	f7fe ffd4 	bl	8004bf4 <__errno>
 8005c4c:	2321      	movs	r3, #33	; 0x21
 8005c4e:	6003      	str	r3, [r0, #0]
 8005c50:	2400      	movs	r4, #0
 8005c52:	4d2f      	ldr	r5, [pc, #188]	; (8005d10 <pow+0x150>)
 8005c54:	e7d9      	b.n	8005c0a <pow+0x4a>
 8005c56:	ec45 4b10 	vmov	d0, r4, r5
 8005c5a:	f000 fe40 	bl	80068de <finite>
 8005c5e:	bbb8      	cbnz	r0, 8005cd0 <pow+0x110>
 8005c60:	ec49 8b10 	vmov	d0, r8, r9
 8005c64:	f000 fe3b 	bl	80068de <finite>
 8005c68:	b390      	cbz	r0, 8005cd0 <pow+0x110>
 8005c6a:	ec47 6b10 	vmov	d0, r6, r7
 8005c6e:	f000 fe36 	bl	80068de <finite>
 8005c72:	b368      	cbz	r0, 8005cd0 <pow+0x110>
 8005c74:	4622      	mov	r2, r4
 8005c76:	462b      	mov	r3, r5
 8005c78:	4620      	mov	r0, r4
 8005c7a:	4629      	mov	r1, r5
 8005c7c:	f7fa ff56 	bl	8000b2c <__aeabi_dcmpun>
 8005c80:	b160      	cbz	r0, 8005c9c <pow+0xdc>
 8005c82:	f7fe ffb7 	bl	8004bf4 <__errno>
 8005c86:	2321      	movs	r3, #33	; 0x21
 8005c88:	6003      	str	r3, [r0, #0]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4619      	mov	r1, r3
 8005c92:	f7fa fddb 	bl	800084c <__aeabi_ddiv>
 8005c96:	4604      	mov	r4, r0
 8005c98:	460d      	mov	r5, r1
 8005c9a:	e7b6      	b.n	8005c0a <pow+0x4a>
 8005c9c:	f7fe ffaa 	bl	8004bf4 <__errno>
 8005ca0:	2322      	movs	r3, #34	; 0x22
 8005ca2:	6003      	str	r3, [r0, #0]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	4640      	mov	r0, r8
 8005caa:	4649      	mov	r1, r9
 8005cac:	f7fa ff16 	bl	8000adc <__aeabi_dcmplt>
 8005cb0:	2400      	movs	r4, #0
 8005cb2:	b158      	cbz	r0, 8005ccc <pow+0x10c>
 8005cb4:	ec47 6b10 	vmov	d0, r6, r7
 8005cb8:	f000 fe26 	bl	8006908 <rint>
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	ec51 0b10 	vmov	r0, r1, d0
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	f7fa ff00 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d0c2      	beq.n	8005c52 <pow+0x92>
 8005ccc:	4d11      	ldr	r5, [pc, #68]	; (8005d14 <pow+0x154>)
 8005cce:	e79c      	b.n	8005c0a <pow+0x4a>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	f7fa fef6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d094      	beq.n	8005c0a <pow+0x4a>
 8005ce0:	ec49 8b10 	vmov	d0, r8, r9
 8005ce4:	f000 fdfb 	bl	80068de <finite>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d08e      	beq.n	8005c0a <pow+0x4a>
 8005cec:	ec47 6b10 	vmov	d0, r6, r7
 8005cf0:	f000 fdf5 	bl	80068de <finite>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d088      	beq.n	8005c0a <pow+0x4a>
 8005cf8:	f7fe ff7c 	bl	8004bf4 <__errno>
 8005cfc:	2322      	movs	r3, #34	; 0x22
 8005cfe:	6003      	str	r3, [r0, #0]
 8005d00:	2400      	movs	r4, #0
 8005d02:	2500      	movs	r5, #0
 8005d04:	e781      	b.n	8005c0a <pow+0x4a>
 8005d06:	4d04      	ldr	r5, [pc, #16]	; (8005d18 <pow+0x158>)
 8005d08:	2400      	movs	r4, #0
 8005d0a:	e77e      	b.n	8005c0a <pow+0x4a>
 8005d0c:	20000088 	.word	0x20000088
 8005d10:	fff00000 	.word	0xfff00000
 8005d14:	7ff00000 	.word	0x7ff00000
 8005d18:	3ff00000 	.word	0x3ff00000
 8005d1c:	00000000 	.word	0x00000000

08005d20 <__ieee754_pow>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	ed2d 8b06 	vpush	{d8-d10}
 8005d28:	b08d      	sub	sp, #52	; 0x34
 8005d2a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005d2e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8005d32:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005d36:	ea56 0100 	orrs.w	r1, r6, r0
 8005d3a:	ec53 2b10 	vmov	r2, r3, d0
 8005d3e:	f000 84d1 	beq.w	80066e4 <__ieee754_pow+0x9c4>
 8005d42:	497f      	ldr	r1, [pc, #508]	; (8005f40 <__ieee754_pow+0x220>)
 8005d44:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005d48:	428c      	cmp	r4, r1
 8005d4a:	ee10 8a10 	vmov	r8, s0
 8005d4e:	4699      	mov	r9, r3
 8005d50:	dc09      	bgt.n	8005d66 <__ieee754_pow+0x46>
 8005d52:	d103      	bne.n	8005d5c <__ieee754_pow+0x3c>
 8005d54:	b97a      	cbnz	r2, 8005d76 <__ieee754_pow+0x56>
 8005d56:	42a6      	cmp	r6, r4
 8005d58:	dd02      	ble.n	8005d60 <__ieee754_pow+0x40>
 8005d5a:	e00c      	b.n	8005d76 <__ieee754_pow+0x56>
 8005d5c:	428e      	cmp	r6, r1
 8005d5e:	dc02      	bgt.n	8005d66 <__ieee754_pow+0x46>
 8005d60:	428e      	cmp	r6, r1
 8005d62:	d110      	bne.n	8005d86 <__ieee754_pow+0x66>
 8005d64:	b178      	cbz	r0, 8005d86 <__ieee754_pow+0x66>
 8005d66:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005d6a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005d6e:	ea54 0308 	orrs.w	r3, r4, r8
 8005d72:	f000 84b7 	beq.w	80066e4 <__ieee754_pow+0x9c4>
 8005d76:	4873      	ldr	r0, [pc, #460]	; (8005f44 <__ieee754_pow+0x224>)
 8005d78:	b00d      	add	sp, #52	; 0x34
 8005d7a:	ecbd 8b06 	vpop	{d8-d10}
 8005d7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d82:	f000 bdb9 	b.w	80068f8 <nan>
 8005d86:	f1b9 0f00 	cmp.w	r9, #0
 8005d8a:	da36      	bge.n	8005dfa <__ieee754_pow+0xda>
 8005d8c:	496e      	ldr	r1, [pc, #440]	; (8005f48 <__ieee754_pow+0x228>)
 8005d8e:	428e      	cmp	r6, r1
 8005d90:	dc51      	bgt.n	8005e36 <__ieee754_pow+0x116>
 8005d92:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8005d96:	428e      	cmp	r6, r1
 8005d98:	f340 84af 	ble.w	80066fa <__ieee754_pow+0x9da>
 8005d9c:	1531      	asrs	r1, r6, #20
 8005d9e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005da2:	2914      	cmp	r1, #20
 8005da4:	dd0f      	ble.n	8005dc6 <__ieee754_pow+0xa6>
 8005da6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8005daa:	fa20 fc01 	lsr.w	ip, r0, r1
 8005dae:	fa0c f101 	lsl.w	r1, ip, r1
 8005db2:	4281      	cmp	r1, r0
 8005db4:	f040 84a1 	bne.w	80066fa <__ieee754_pow+0x9da>
 8005db8:	f00c 0c01 	and.w	ip, ip, #1
 8005dbc:	f1cc 0102 	rsb	r1, ip, #2
 8005dc0:	9100      	str	r1, [sp, #0]
 8005dc2:	b180      	cbz	r0, 8005de6 <__ieee754_pow+0xc6>
 8005dc4:	e059      	b.n	8005e7a <__ieee754_pow+0x15a>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d155      	bne.n	8005e76 <__ieee754_pow+0x156>
 8005dca:	f1c1 0114 	rsb	r1, r1, #20
 8005dce:	fa46 fc01 	asr.w	ip, r6, r1
 8005dd2:	fa0c f101 	lsl.w	r1, ip, r1
 8005dd6:	42b1      	cmp	r1, r6
 8005dd8:	f040 848c 	bne.w	80066f4 <__ieee754_pow+0x9d4>
 8005ddc:	f00c 0c01 	and.w	ip, ip, #1
 8005de0:	f1cc 0102 	rsb	r1, ip, #2
 8005de4:	9100      	str	r1, [sp, #0]
 8005de6:	4959      	ldr	r1, [pc, #356]	; (8005f4c <__ieee754_pow+0x22c>)
 8005de8:	428e      	cmp	r6, r1
 8005dea:	d12d      	bne.n	8005e48 <__ieee754_pow+0x128>
 8005dec:	2f00      	cmp	r7, #0
 8005dee:	da79      	bge.n	8005ee4 <__ieee754_pow+0x1c4>
 8005df0:	4956      	ldr	r1, [pc, #344]	; (8005f4c <__ieee754_pow+0x22c>)
 8005df2:	2000      	movs	r0, #0
 8005df4:	f7fa fd2a 	bl	800084c <__aeabi_ddiv>
 8005df8:	e016      	b.n	8005e28 <__ieee754_pow+0x108>
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	9100      	str	r1, [sp, #0]
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d13b      	bne.n	8005e7a <__ieee754_pow+0x15a>
 8005e02:	494f      	ldr	r1, [pc, #316]	; (8005f40 <__ieee754_pow+0x220>)
 8005e04:	428e      	cmp	r6, r1
 8005e06:	d1ee      	bne.n	8005de6 <__ieee754_pow+0xc6>
 8005e08:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005e0c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005e10:	ea53 0308 	orrs.w	r3, r3, r8
 8005e14:	f000 8466 	beq.w	80066e4 <__ieee754_pow+0x9c4>
 8005e18:	4b4d      	ldr	r3, [pc, #308]	; (8005f50 <__ieee754_pow+0x230>)
 8005e1a:	429c      	cmp	r4, r3
 8005e1c:	dd0d      	ble.n	8005e3a <__ieee754_pow+0x11a>
 8005e1e:	2f00      	cmp	r7, #0
 8005e20:	f280 8464 	bge.w	80066ec <__ieee754_pow+0x9cc>
 8005e24:	2000      	movs	r0, #0
 8005e26:	2100      	movs	r1, #0
 8005e28:	ec41 0b10 	vmov	d0, r0, r1
 8005e2c:	b00d      	add	sp, #52	; 0x34
 8005e2e:	ecbd 8b06 	vpop	{d8-d10}
 8005e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e36:	2102      	movs	r1, #2
 8005e38:	e7e0      	b.n	8005dfc <__ieee754_pow+0xdc>
 8005e3a:	2f00      	cmp	r7, #0
 8005e3c:	daf2      	bge.n	8005e24 <__ieee754_pow+0x104>
 8005e3e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8005e42:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005e46:	e7ef      	b.n	8005e28 <__ieee754_pow+0x108>
 8005e48:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005e4c:	d104      	bne.n	8005e58 <__ieee754_pow+0x138>
 8005e4e:	4610      	mov	r0, r2
 8005e50:	4619      	mov	r1, r3
 8005e52:	f7fa fbd1 	bl	80005f8 <__aeabi_dmul>
 8005e56:	e7e7      	b.n	8005e28 <__ieee754_pow+0x108>
 8005e58:	493e      	ldr	r1, [pc, #248]	; (8005f54 <__ieee754_pow+0x234>)
 8005e5a:	428f      	cmp	r7, r1
 8005e5c:	d10d      	bne.n	8005e7a <__ieee754_pow+0x15a>
 8005e5e:	f1b9 0f00 	cmp.w	r9, #0
 8005e62:	db0a      	blt.n	8005e7a <__ieee754_pow+0x15a>
 8005e64:	ec43 2b10 	vmov	d0, r2, r3
 8005e68:	b00d      	add	sp, #52	; 0x34
 8005e6a:	ecbd 8b06 	vpop	{d8-d10}
 8005e6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e72:	f000 bc77 	b.w	8006764 <__ieee754_sqrt>
 8005e76:	2100      	movs	r1, #0
 8005e78:	9100      	str	r1, [sp, #0]
 8005e7a:	ec43 2b10 	vmov	d0, r2, r3
 8005e7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e82:	f000 fd23 	bl	80068cc <fabs>
 8005e86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e8a:	ec51 0b10 	vmov	r0, r1, d0
 8005e8e:	f1b8 0f00 	cmp.w	r8, #0
 8005e92:	d12a      	bne.n	8005eea <__ieee754_pow+0x1ca>
 8005e94:	b12c      	cbz	r4, 8005ea2 <__ieee754_pow+0x182>
 8005e96:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8005f4c <__ieee754_pow+0x22c>
 8005e9a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8005e9e:	45e6      	cmp	lr, ip
 8005ea0:	d123      	bne.n	8005eea <__ieee754_pow+0x1ca>
 8005ea2:	2f00      	cmp	r7, #0
 8005ea4:	da05      	bge.n	8005eb2 <__ieee754_pow+0x192>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	2000      	movs	r0, #0
 8005eac:	4927      	ldr	r1, [pc, #156]	; (8005f4c <__ieee754_pow+0x22c>)
 8005eae:	f7fa fccd 	bl	800084c <__aeabi_ddiv>
 8005eb2:	f1b9 0f00 	cmp.w	r9, #0
 8005eb6:	dab7      	bge.n	8005e28 <__ieee754_pow+0x108>
 8005eb8:	9b00      	ldr	r3, [sp, #0]
 8005eba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005ebe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005ec2:	4323      	orrs	r3, r4
 8005ec4:	d108      	bne.n	8005ed8 <__ieee754_pow+0x1b8>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4610      	mov	r0, r2
 8005ecc:	4619      	mov	r1, r3
 8005ece:	f7fa f9db 	bl	8000288 <__aeabi_dsub>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	e78d      	b.n	8005df4 <__ieee754_pow+0xd4>
 8005ed8:	9b00      	ldr	r3, [sp, #0]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d1a4      	bne.n	8005e28 <__ieee754_pow+0x108>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	e79e      	b.n	8005e28 <__ieee754_pow+0x108>
 8005eea:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8005eee:	f10c 35ff 	add.w	r5, ip, #4294967295
 8005ef2:	950a      	str	r5, [sp, #40]	; 0x28
 8005ef4:	9d00      	ldr	r5, [sp, #0]
 8005ef6:	46ac      	mov	ip, r5
 8005ef8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005efa:	ea5c 0505 	orrs.w	r5, ip, r5
 8005efe:	d0e4      	beq.n	8005eca <__ieee754_pow+0x1aa>
 8005f00:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <__ieee754_pow+0x238>)
 8005f02:	429e      	cmp	r6, r3
 8005f04:	f340 80fc 	ble.w	8006100 <__ieee754_pow+0x3e0>
 8005f08:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005f0c:	429e      	cmp	r6, r3
 8005f0e:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <__ieee754_pow+0x230>)
 8005f10:	dd07      	ble.n	8005f22 <__ieee754_pow+0x202>
 8005f12:	429c      	cmp	r4, r3
 8005f14:	dc0a      	bgt.n	8005f2c <__ieee754_pow+0x20c>
 8005f16:	2f00      	cmp	r7, #0
 8005f18:	da84      	bge.n	8005e24 <__ieee754_pow+0x104>
 8005f1a:	a307      	add	r3, pc, #28	; (adr r3, 8005f38 <__ieee754_pow+0x218>)
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	e795      	b.n	8005e4e <__ieee754_pow+0x12e>
 8005f22:	429c      	cmp	r4, r3
 8005f24:	dbf7      	blt.n	8005f16 <__ieee754_pow+0x1f6>
 8005f26:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <__ieee754_pow+0x22c>)
 8005f28:	429c      	cmp	r4, r3
 8005f2a:	dd17      	ble.n	8005f5c <__ieee754_pow+0x23c>
 8005f2c:	2f00      	cmp	r7, #0
 8005f2e:	dcf4      	bgt.n	8005f1a <__ieee754_pow+0x1fa>
 8005f30:	e778      	b.n	8005e24 <__ieee754_pow+0x104>
 8005f32:	bf00      	nop
 8005f34:	f3af 8000 	nop.w
 8005f38:	8800759c 	.word	0x8800759c
 8005f3c:	7e37e43c 	.word	0x7e37e43c
 8005f40:	7ff00000 	.word	0x7ff00000
 8005f44:	08006c0d 	.word	0x08006c0d
 8005f48:	433fffff 	.word	0x433fffff
 8005f4c:	3ff00000 	.word	0x3ff00000
 8005f50:	3fefffff 	.word	0x3fefffff
 8005f54:	3fe00000 	.word	0x3fe00000
 8005f58:	41e00000 	.word	0x41e00000
 8005f5c:	4b64      	ldr	r3, [pc, #400]	; (80060f0 <__ieee754_pow+0x3d0>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f7fa f992 	bl	8000288 <__aeabi_dsub>
 8005f64:	a356      	add	r3, pc, #344	; (adr r3, 80060c0 <__ieee754_pow+0x3a0>)
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	460d      	mov	r5, r1
 8005f6e:	f7fa fb43 	bl	80005f8 <__aeabi_dmul>
 8005f72:	a355      	add	r3, pc, #340	; (adr r3, 80060c8 <__ieee754_pow+0x3a8>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	4606      	mov	r6, r0
 8005f7a:	460f      	mov	r7, r1
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	f7fa fb3a 	bl	80005f8 <__aeabi_dmul>
 8005f84:	4b5b      	ldr	r3, [pc, #364]	; (80060f4 <__ieee754_pow+0x3d4>)
 8005f86:	4682      	mov	sl, r0
 8005f88:	468b      	mov	fp, r1
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	4629      	mov	r1, r5
 8005f90:	f7fa fb32 	bl	80005f8 <__aeabi_dmul>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	a14d      	add	r1, pc, #308	; (adr r1, 80060d0 <__ieee754_pow+0x3b0>)
 8005f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f9e:	f7fa f973 	bl	8000288 <__aeabi_dsub>
 8005fa2:	4622      	mov	r2, r4
 8005fa4:	462b      	mov	r3, r5
 8005fa6:	f7fa fb27 	bl	80005f8 <__aeabi_dmul>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	2000      	movs	r0, #0
 8005fb0:	4951      	ldr	r1, [pc, #324]	; (80060f8 <__ieee754_pow+0x3d8>)
 8005fb2:	f7fa f969 	bl	8000288 <__aeabi_dsub>
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	4680      	mov	r8, r0
 8005fba:	4689      	mov	r9, r1
 8005fbc:	462b      	mov	r3, r5
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	f7fa fb19 	bl	80005f8 <__aeabi_dmul>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4640      	mov	r0, r8
 8005fcc:	4649      	mov	r1, r9
 8005fce:	f7fa fb13 	bl	80005f8 <__aeabi_dmul>
 8005fd2:	a341      	add	r3, pc, #260	; (adr r3, 80060d8 <__ieee754_pow+0x3b8>)
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	f7fa fb0e 	bl	80005f8 <__aeabi_dmul>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4650      	mov	r0, sl
 8005fe2:	4659      	mov	r1, fp
 8005fe4:	f7fa f950 	bl	8000288 <__aeabi_dsub>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4680      	mov	r8, r0
 8005fee:	4689      	mov	r9, r1
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	f7fa f94a 	bl	800028c <__adddf3>
 8005ff8:	2400      	movs	r4, #0
 8005ffa:	4632      	mov	r2, r6
 8005ffc:	463b      	mov	r3, r7
 8005ffe:	4620      	mov	r0, r4
 8006000:	460d      	mov	r5, r1
 8006002:	f7fa f941 	bl	8000288 <__aeabi_dsub>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4640      	mov	r0, r8
 800600c:	4649      	mov	r1, r9
 800600e:	f7fa f93b 	bl	8000288 <__aeabi_dsub>
 8006012:	9b00      	ldr	r3, [sp, #0]
 8006014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006016:	3b01      	subs	r3, #1
 8006018:	4313      	orrs	r3, r2
 800601a:	4682      	mov	sl, r0
 800601c:	468b      	mov	fp, r1
 800601e:	f040 81f1 	bne.w	8006404 <__ieee754_pow+0x6e4>
 8006022:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80060e0 <__ieee754_pow+0x3c0>
 8006026:	eeb0 8a47 	vmov.f32	s16, s14
 800602a:	eef0 8a67 	vmov.f32	s17, s15
 800602e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006032:	2600      	movs	r6, #0
 8006034:	4632      	mov	r2, r6
 8006036:	463b      	mov	r3, r7
 8006038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800603c:	f7fa f924 	bl	8000288 <__aeabi_dsub>
 8006040:	4622      	mov	r2, r4
 8006042:	462b      	mov	r3, r5
 8006044:	f7fa fad8 	bl	80005f8 <__aeabi_dmul>
 8006048:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800604c:	4680      	mov	r8, r0
 800604e:	4689      	mov	r9, r1
 8006050:	4650      	mov	r0, sl
 8006052:	4659      	mov	r1, fp
 8006054:	f7fa fad0 	bl	80005f8 <__aeabi_dmul>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4640      	mov	r0, r8
 800605e:	4649      	mov	r1, r9
 8006060:	f7fa f914 	bl	800028c <__adddf3>
 8006064:	4632      	mov	r2, r6
 8006066:	463b      	mov	r3, r7
 8006068:	4680      	mov	r8, r0
 800606a:	4689      	mov	r9, r1
 800606c:	4620      	mov	r0, r4
 800606e:	4629      	mov	r1, r5
 8006070:	f7fa fac2 	bl	80005f8 <__aeabi_dmul>
 8006074:	460b      	mov	r3, r1
 8006076:	4604      	mov	r4, r0
 8006078:	460d      	mov	r5, r1
 800607a:	4602      	mov	r2, r0
 800607c:	4649      	mov	r1, r9
 800607e:	4640      	mov	r0, r8
 8006080:	f7fa f904 	bl	800028c <__adddf3>
 8006084:	4b1d      	ldr	r3, [pc, #116]	; (80060fc <__ieee754_pow+0x3dc>)
 8006086:	4299      	cmp	r1, r3
 8006088:	ec45 4b19 	vmov	d9, r4, r5
 800608c:	4606      	mov	r6, r0
 800608e:	460f      	mov	r7, r1
 8006090:	468b      	mov	fp, r1
 8006092:	f340 82fe 	ble.w	8006692 <__ieee754_pow+0x972>
 8006096:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800609a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800609e:	4303      	orrs	r3, r0
 80060a0:	f000 81f0 	beq.w	8006484 <__ieee754_pow+0x764>
 80060a4:	a310      	add	r3, pc, #64	; (adr r3, 80060e8 <__ieee754_pow+0x3c8>)
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	ec51 0b18 	vmov	r0, r1, d8
 80060ae:	f7fa faa3 	bl	80005f8 <__aeabi_dmul>
 80060b2:	a30d      	add	r3, pc, #52	; (adr r3, 80060e8 <__ieee754_pow+0x3c8>)
 80060b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b8:	e6cb      	b.n	8005e52 <__ieee754_pow+0x132>
 80060ba:	bf00      	nop
 80060bc:	f3af 8000 	nop.w
 80060c0:	60000000 	.word	0x60000000
 80060c4:	3ff71547 	.word	0x3ff71547
 80060c8:	f85ddf44 	.word	0xf85ddf44
 80060cc:	3e54ae0b 	.word	0x3e54ae0b
 80060d0:	55555555 	.word	0x55555555
 80060d4:	3fd55555 	.word	0x3fd55555
 80060d8:	652b82fe 	.word	0x652b82fe
 80060dc:	3ff71547 	.word	0x3ff71547
 80060e0:	00000000 	.word	0x00000000
 80060e4:	bff00000 	.word	0xbff00000
 80060e8:	8800759c 	.word	0x8800759c
 80060ec:	7e37e43c 	.word	0x7e37e43c
 80060f0:	3ff00000 	.word	0x3ff00000
 80060f4:	3fd00000 	.word	0x3fd00000
 80060f8:	3fe00000 	.word	0x3fe00000
 80060fc:	408fffff 	.word	0x408fffff
 8006100:	4bd7      	ldr	r3, [pc, #860]	; (8006460 <__ieee754_pow+0x740>)
 8006102:	ea03 0309 	and.w	r3, r3, r9
 8006106:	2200      	movs	r2, #0
 8006108:	b92b      	cbnz	r3, 8006116 <__ieee754_pow+0x3f6>
 800610a:	4bd6      	ldr	r3, [pc, #856]	; (8006464 <__ieee754_pow+0x744>)
 800610c:	f7fa fa74 	bl	80005f8 <__aeabi_dmul>
 8006110:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006114:	460c      	mov	r4, r1
 8006116:	1523      	asrs	r3, r4, #20
 8006118:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800611c:	4413      	add	r3, r2
 800611e:	9309      	str	r3, [sp, #36]	; 0x24
 8006120:	4bd1      	ldr	r3, [pc, #836]	; (8006468 <__ieee754_pow+0x748>)
 8006122:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006126:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800612a:	429c      	cmp	r4, r3
 800612c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006130:	dd08      	ble.n	8006144 <__ieee754_pow+0x424>
 8006132:	4bce      	ldr	r3, [pc, #824]	; (800646c <__ieee754_pow+0x74c>)
 8006134:	429c      	cmp	r4, r3
 8006136:	f340 8163 	ble.w	8006400 <__ieee754_pow+0x6e0>
 800613a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613c:	3301      	adds	r3, #1
 800613e:	9309      	str	r3, [sp, #36]	; 0x24
 8006140:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006144:	2400      	movs	r4, #0
 8006146:	00e3      	lsls	r3, r4, #3
 8006148:	930b      	str	r3, [sp, #44]	; 0x2c
 800614a:	4bc9      	ldr	r3, [pc, #804]	; (8006470 <__ieee754_pow+0x750>)
 800614c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006150:	ed93 7b00 	vldr	d7, [r3]
 8006154:	4629      	mov	r1, r5
 8006156:	ec53 2b17 	vmov	r2, r3, d7
 800615a:	eeb0 8a47 	vmov.f32	s16, s14
 800615e:	eef0 8a67 	vmov.f32	s17, s15
 8006162:	4682      	mov	sl, r0
 8006164:	f7fa f890 	bl	8000288 <__aeabi_dsub>
 8006168:	4652      	mov	r2, sl
 800616a:	4606      	mov	r6, r0
 800616c:	460f      	mov	r7, r1
 800616e:	462b      	mov	r3, r5
 8006170:	ec51 0b18 	vmov	r0, r1, d8
 8006174:	f7fa f88a 	bl	800028c <__adddf3>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	2000      	movs	r0, #0
 800617e:	49bd      	ldr	r1, [pc, #756]	; (8006474 <__ieee754_pow+0x754>)
 8006180:	f7fa fb64 	bl	800084c <__aeabi_ddiv>
 8006184:	ec41 0b19 	vmov	d9, r0, r1
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4630      	mov	r0, r6
 800618e:	4639      	mov	r1, r7
 8006190:	f7fa fa32 	bl	80005f8 <__aeabi_dmul>
 8006194:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006198:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800619c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80061a0:	2300      	movs	r3, #0
 80061a2:	9304      	str	r3, [sp, #16]
 80061a4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80061a8:	46ab      	mov	fp, r5
 80061aa:	106d      	asrs	r5, r5, #1
 80061ac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80061b0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80061b4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80061b8:	2200      	movs	r2, #0
 80061ba:	4640      	mov	r0, r8
 80061bc:	4649      	mov	r1, r9
 80061be:	4614      	mov	r4, r2
 80061c0:	461d      	mov	r5, r3
 80061c2:	f7fa fa19 	bl	80005f8 <__aeabi_dmul>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4630      	mov	r0, r6
 80061cc:	4639      	mov	r1, r7
 80061ce:	f7fa f85b 	bl	8000288 <__aeabi_dsub>
 80061d2:	ec53 2b18 	vmov	r2, r3, d8
 80061d6:	4606      	mov	r6, r0
 80061d8:	460f      	mov	r7, r1
 80061da:	4620      	mov	r0, r4
 80061dc:	4629      	mov	r1, r5
 80061de:	f7fa f853 	bl	8000288 <__aeabi_dsub>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4650      	mov	r0, sl
 80061e8:	4659      	mov	r1, fp
 80061ea:	f7fa f84d 	bl	8000288 <__aeabi_dsub>
 80061ee:	4642      	mov	r2, r8
 80061f0:	464b      	mov	r3, r9
 80061f2:	f7fa fa01 	bl	80005f8 <__aeabi_dmul>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	4630      	mov	r0, r6
 80061fc:	4639      	mov	r1, r7
 80061fe:	f7fa f843 	bl	8000288 <__aeabi_dsub>
 8006202:	ec53 2b19 	vmov	r2, r3, d9
 8006206:	f7fa f9f7 	bl	80005f8 <__aeabi_dmul>
 800620a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800620e:	ec41 0b18 	vmov	d8, r0, r1
 8006212:	4610      	mov	r0, r2
 8006214:	4619      	mov	r1, r3
 8006216:	f7fa f9ef 	bl	80005f8 <__aeabi_dmul>
 800621a:	a37d      	add	r3, pc, #500	; (adr r3, 8006410 <__ieee754_pow+0x6f0>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	4604      	mov	r4, r0
 8006222:	460d      	mov	r5, r1
 8006224:	f7fa f9e8 	bl	80005f8 <__aeabi_dmul>
 8006228:	a37b      	add	r3, pc, #492	; (adr r3, 8006418 <__ieee754_pow+0x6f8>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f7fa f82d 	bl	800028c <__adddf3>
 8006232:	4622      	mov	r2, r4
 8006234:	462b      	mov	r3, r5
 8006236:	f7fa f9df 	bl	80005f8 <__aeabi_dmul>
 800623a:	a379      	add	r3, pc, #484	; (adr r3, 8006420 <__ieee754_pow+0x700>)
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f7fa f824 	bl	800028c <__adddf3>
 8006244:	4622      	mov	r2, r4
 8006246:	462b      	mov	r3, r5
 8006248:	f7fa f9d6 	bl	80005f8 <__aeabi_dmul>
 800624c:	a376      	add	r3, pc, #472	; (adr r3, 8006428 <__ieee754_pow+0x708>)
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	f7fa f81b 	bl	800028c <__adddf3>
 8006256:	4622      	mov	r2, r4
 8006258:	462b      	mov	r3, r5
 800625a:	f7fa f9cd 	bl	80005f8 <__aeabi_dmul>
 800625e:	a374      	add	r3, pc, #464	; (adr r3, 8006430 <__ieee754_pow+0x710>)
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f7fa f812 	bl	800028c <__adddf3>
 8006268:	4622      	mov	r2, r4
 800626a:	462b      	mov	r3, r5
 800626c:	f7fa f9c4 	bl	80005f8 <__aeabi_dmul>
 8006270:	a371      	add	r3, pc, #452	; (adr r3, 8006438 <__ieee754_pow+0x718>)
 8006272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006276:	f7fa f809 	bl	800028c <__adddf3>
 800627a:	4622      	mov	r2, r4
 800627c:	4606      	mov	r6, r0
 800627e:	460f      	mov	r7, r1
 8006280:	462b      	mov	r3, r5
 8006282:	4620      	mov	r0, r4
 8006284:	4629      	mov	r1, r5
 8006286:	f7fa f9b7 	bl	80005f8 <__aeabi_dmul>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4630      	mov	r0, r6
 8006290:	4639      	mov	r1, r7
 8006292:	f7fa f9b1 	bl	80005f8 <__aeabi_dmul>
 8006296:	4642      	mov	r2, r8
 8006298:	4604      	mov	r4, r0
 800629a:	460d      	mov	r5, r1
 800629c:	464b      	mov	r3, r9
 800629e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062a2:	f7f9 fff3 	bl	800028c <__adddf3>
 80062a6:	ec53 2b18 	vmov	r2, r3, d8
 80062aa:	f7fa f9a5 	bl	80005f8 <__aeabi_dmul>
 80062ae:	4622      	mov	r2, r4
 80062b0:	462b      	mov	r3, r5
 80062b2:	f7f9 ffeb 	bl	800028c <__adddf3>
 80062b6:	4642      	mov	r2, r8
 80062b8:	4682      	mov	sl, r0
 80062ba:	468b      	mov	fp, r1
 80062bc:	464b      	mov	r3, r9
 80062be:	4640      	mov	r0, r8
 80062c0:	4649      	mov	r1, r9
 80062c2:	f7fa f999 	bl	80005f8 <__aeabi_dmul>
 80062c6:	4b6c      	ldr	r3, [pc, #432]	; (8006478 <__ieee754_pow+0x758>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	4606      	mov	r6, r0
 80062cc:	460f      	mov	r7, r1
 80062ce:	f7f9 ffdd 	bl	800028c <__adddf3>
 80062d2:	4652      	mov	r2, sl
 80062d4:	465b      	mov	r3, fp
 80062d6:	f7f9 ffd9 	bl	800028c <__adddf3>
 80062da:	9c04      	ldr	r4, [sp, #16]
 80062dc:	460d      	mov	r5, r1
 80062de:	4622      	mov	r2, r4
 80062e0:	460b      	mov	r3, r1
 80062e2:	4640      	mov	r0, r8
 80062e4:	4649      	mov	r1, r9
 80062e6:	f7fa f987 	bl	80005f8 <__aeabi_dmul>
 80062ea:	4b63      	ldr	r3, [pc, #396]	; (8006478 <__ieee754_pow+0x758>)
 80062ec:	4680      	mov	r8, r0
 80062ee:	4689      	mov	r9, r1
 80062f0:	2200      	movs	r2, #0
 80062f2:	4620      	mov	r0, r4
 80062f4:	4629      	mov	r1, r5
 80062f6:	f7f9 ffc7 	bl	8000288 <__aeabi_dsub>
 80062fa:	4632      	mov	r2, r6
 80062fc:	463b      	mov	r3, r7
 80062fe:	f7f9 ffc3 	bl	8000288 <__aeabi_dsub>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4650      	mov	r0, sl
 8006308:	4659      	mov	r1, fp
 800630a:	f7f9 ffbd 	bl	8000288 <__aeabi_dsub>
 800630e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006312:	f7fa f971 	bl	80005f8 <__aeabi_dmul>
 8006316:	4622      	mov	r2, r4
 8006318:	4606      	mov	r6, r0
 800631a:	460f      	mov	r7, r1
 800631c:	462b      	mov	r3, r5
 800631e:	ec51 0b18 	vmov	r0, r1, d8
 8006322:	f7fa f969 	bl	80005f8 <__aeabi_dmul>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	4630      	mov	r0, r6
 800632c:	4639      	mov	r1, r7
 800632e:	f7f9 ffad 	bl	800028c <__adddf3>
 8006332:	4606      	mov	r6, r0
 8006334:	460f      	mov	r7, r1
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	f7f9 ffa5 	bl	800028c <__adddf3>
 8006342:	9c04      	ldr	r4, [sp, #16]
 8006344:	a33e      	add	r3, pc, #248	; (adr r3, 8006440 <__ieee754_pow+0x720>)
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	4620      	mov	r0, r4
 800634c:	460d      	mov	r5, r1
 800634e:	f7fa f953 	bl	80005f8 <__aeabi_dmul>
 8006352:	4642      	mov	r2, r8
 8006354:	ec41 0b18 	vmov	d8, r0, r1
 8006358:	464b      	mov	r3, r9
 800635a:	4620      	mov	r0, r4
 800635c:	4629      	mov	r1, r5
 800635e:	f7f9 ff93 	bl	8000288 <__aeabi_dsub>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4630      	mov	r0, r6
 8006368:	4639      	mov	r1, r7
 800636a:	f7f9 ff8d 	bl	8000288 <__aeabi_dsub>
 800636e:	a336      	add	r3, pc, #216	; (adr r3, 8006448 <__ieee754_pow+0x728>)
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f7fa f940 	bl	80005f8 <__aeabi_dmul>
 8006378:	a335      	add	r3, pc, #212	; (adr r3, 8006450 <__ieee754_pow+0x730>)
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	4606      	mov	r6, r0
 8006380:	460f      	mov	r7, r1
 8006382:	4620      	mov	r0, r4
 8006384:	4629      	mov	r1, r5
 8006386:	f7fa f937 	bl	80005f8 <__aeabi_dmul>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4630      	mov	r0, r6
 8006390:	4639      	mov	r1, r7
 8006392:	f7f9 ff7b 	bl	800028c <__adddf3>
 8006396:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006398:	4b38      	ldr	r3, [pc, #224]	; (800647c <__ieee754_pow+0x75c>)
 800639a:	4413      	add	r3, r2
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	f7f9 ff74 	bl	800028c <__adddf3>
 80063a4:	4682      	mov	sl, r0
 80063a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063a8:	468b      	mov	fp, r1
 80063aa:	f7fa f8bb 	bl	8000524 <__aeabi_i2d>
 80063ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063b0:	4b33      	ldr	r3, [pc, #204]	; (8006480 <__ieee754_pow+0x760>)
 80063b2:	4413      	add	r3, r2
 80063b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063b8:	4606      	mov	r6, r0
 80063ba:	460f      	mov	r7, r1
 80063bc:	4652      	mov	r2, sl
 80063be:	465b      	mov	r3, fp
 80063c0:	ec51 0b18 	vmov	r0, r1, d8
 80063c4:	f7f9 ff62 	bl	800028c <__adddf3>
 80063c8:	4642      	mov	r2, r8
 80063ca:	464b      	mov	r3, r9
 80063cc:	f7f9 ff5e 	bl	800028c <__adddf3>
 80063d0:	4632      	mov	r2, r6
 80063d2:	463b      	mov	r3, r7
 80063d4:	f7f9 ff5a 	bl	800028c <__adddf3>
 80063d8:	9c04      	ldr	r4, [sp, #16]
 80063da:	4632      	mov	r2, r6
 80063dc:	463b      	mov	r3, r7
 80063de:	4620      	mov	r0, r4
 80063e0:	460d      	mov	r5, r1
 80063e2:	f7f9 ff51 	bl	8000288 <__aeabi_dsub>
 80063e6:	4642      	mov	r2, r8
 80063e8:	464b      	mov	r3, r9
 80063ea:	f7f9 ff4d 	bl	8000288 <__aeabi_dsub>
 80063ee:	ec53 2b18 	vmov	r2, r3, d8
 80063f2:	f7f9 ff49 	bl	8000288 <__aeabi_dsub>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4650      	mov	r0, sl
 80063fc:	4659      	mov	r1, fp
 80063fe:	e606      	b.n	800600e <__ieee754_pow+0x2ee>
 8006400:	2401      	movs	r4, #1
 8006402:	e6a0      	b.n	8006146 <__ieee754_pow+0x426>
 8006404:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006458 <__ieee754_pow+0x738>
 8006408:	e60d      	b.n	8006026 <__ieee754_pow+0x306>
 800640a:	bf00      	nop
 800640c:	f3af 8000 	nop.w
 8006410:	4a454eef 	.word	0x4a454eef
 8006414:	3fca7e28 	.word	0x3fca7e28
 8006418:	93c9db65 	.word	0x93c9db65
 800641c:	3fcd864a 	.word	0x3fcd864a
 8006420:	a91d4101 	.word	0xa91d4101
 8006424:	3fd17460 	.word	0x3fd17460
 8006428:	518f264d 	.word	0x518f264d
 800642c:	3fd55555 	.word	0x3fd55555
 8006430:	db6fabff 	.word	0xdb6fabff
 8006434:	3fdb6db6 	.word	0x3fdb6db6
 8006438:	33333303 	.word	0x33333303
 800643c:	3fe33333 	.word	0x3fe33333
 8006440:	e0000000 	.word	0xe0000000
 8006444:	3feec709 	.word	0x3feec709
 8006448:	dc3a03fd 	.word	0xdc3a03fd
 800644c:	3feec709 	.word	0x3feec709
 8006450:	145b01f5 	.word	0x145b01f5
 8006454:	be3e2fe0 	.word	0xbe3e2fe0
 8006458:	00000000 	.word	0x00000000
 800645c:	3ff00000 	.word	0x3ff00000
 8006460:	7ff00000 	.word	0x7ff00000
 8006464:	43400000 	.word	0x43400000
 8006468:	0003988e 	.word	0x0003988e
 800646c:	000bb679 	.word	0x000bb679
 8006470:	08006c40 	.word	0x08006c40
 8006474:	3ff00000 	.word	0x3ff00000
 8006478:	40080000 	.word	0x40080000
 800647c:	08006c60 	.word	0x08006c60
 8006480:	08006c50 	.word	0x08006c50
 8006484:	a3b5      	add	r3, pc, #724	; (adr r3, 800675c <__ieee754_pow+0xa3c>)
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	4640      	mov	r0, r8
 800648c:	4649      	mov	r1, r9
 800648e:	f7f9 fefd 	bl	800028c <__adddf3>
 8006492:	4622      	mov	r2, r4
 8006494:	ec41 0b1a 	vmov	d10, r0, r1
 8006498:	462b      	mov	r3, r5
 800649a:	4630      	mov	r0, r6
 800649c:	4639      	mov	r1, r7
 800649e:	f7f9 fef3 	bl	8000288 <__aeabi_dsub>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	ec51 0b1a 	vmov	r0, r1, d10
 80064aa:	f7fa fb35 	bl	8000b18 <__aeabi_dcmpgt>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	f47f adf8 	bne.w	80060a4 <__ieee754_pow+0x384>
 80064b4:	4aa4      	ldr	r2, [pc, #656]	; (8006748 <__ieee754_pow+0xa28>)
 80064b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80064ba:	4293      	cmp	r3, r2
 80064bc:	f340 810b 	ble.w	80066d6 <__ieee754_pow+0x9b6>
 80064c0:	151b      	asrs	r3, r3, #20
 80064c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80064c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80064ca:	fa4a f303 	asr.w	r3, sl, r3
 80064ce:	445b      	add	r3, fp
 80064d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80064d4:	4e9d      	ldr	r6, [pc, #628]	; (800674c <__ieee754_pow+0xa2c>)
 80064d6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80064da:	4116      	asrs	r6, r2
 80064dc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80064e0:	2000      	movs	r0, #0
 80064e2:	ea23 0106 	bic.w	r1, r3, r6
 80064e6:	f1c2 0214 	rsb	r2, r2, #20
 80064ea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80064ee:	fa4a fa02 	asr.w	sl, sl, r2
 80064f2:	f1bb 0f00 	cmp.w	fp, #0
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4620      	mov	r0, r4
 80064fc:	4629      	mov	r1, r5
 80064fe:	bfb8      	it	lt
 8006500:	f1ca 0a00 	rsblt	sl, sl, #0
 8006504:	f7f9 fec0 	bl	8000288 <__aeabi_dsub>
 8006508:	ec41 0b19 	vmov	d9, r0, r1
 800650c:	4642      	mov	r2, r8
 800650e:	464b      	mov	r3, r9
 8006510:	ec51 0b19 	vmov	r0, r1, d9
 8006514:	f7f9 feba 	bl	800028c <__adddf3>
 8006518:	2400      	movs	r4, #0
 800651a:	a379      	add	r3, pc, #484	; (adr r3, 8006700 <__ieee754_pow+0x9e0>)
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	4620      	mov	r0, r4
 8006522:	460d      	mov	r5, r1
 8006524:	f7fa f868 	bl	80005f8 <__aeabi_dmul>
 8006528:	ec53 2b19 	vmov	r2, r3, d9
 800652c:	4606      	mov	r6, r0
 800652e:	460f      	mov	r7, r1
 8006530:	4620      	mov	r0, r4
 8006532:	4629      	mov	r1, r5
 8006534:	f7f9 fea8 	bl	8000288 <__aeabi_dsub>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4640      	mov	r0, r8
 800653e:	4649      	mov	r1, r9
 8006540:	f7f9 fea2 	bl	8000288 <__aeabi_dsub>
 8006544:	a370      	add	r3, pc, #448	; (adr r3, 8006708 <__ieee754_pow+0x9e8>)
 8006546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654a:	f7fa f855 	bl	80005f8 <__aeabi_dmul>
 800654e:	a370      	add	r3, pc, #448	; (adr r3, 8006710 <__ieee754_pow+0x9f0>)
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	4680      	mov	r8, r0
 8006556:	4689      	mov	r9, r1
 8006558:	4620      	mov	r0, r4
 800655a:	4629      	mov	r1, r5
 800655c:	f7fa f84c 	bl	80005f8 <__aeabi_dmul>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4640      	mov	r0, r8
 8006566:	4649      	mov	r1, r9
 8006568:	f7f9 fe90 	bl	800028c <__adddf3>
 800656c:	4604      	mov	r4, r0
 800656e:	460d      	mov	r5, r1
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4630      	mov	r0, r6
 8006576:	4639      	mov	r1, r7
 8006578:	f7f9 fe88 	bl	800028c <__adddf3>
 800657c:	4632      	mov	r2, r6
 800657e:	463b      	mov	r3, r7
 8006580:	4680      	mov	r8, r0
 8006582:	4689      	mov	r9, r1
 8006584:	f7f9 fe80 	bl	8000288 <__aeabi_dsub>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4620      	mov	r0, r4
 800658e:	4629      	mov	r1, r5
 8006590:	f7f9 fe7a 	bl	8000288 <__aeabi_dsub>
 8006594:	4642      	mov	r2, r8
 8006596:	4606      	mov	r6, r0
 8006598:	460f      	mov	r7, r1
 800659a:	464b      	mov	r3, r9
 800659c:	4640      	mov	r0, r8
 800659e:	4649      	mov	r1, r9
 80065a0:	f7fa f82a 	bl	80005f8 <__aeabi_dmul>
 80065a4:	a35c      	add	r3, pc, #368	; (adr r3, 8006718 <__ieee754_pow+0x9f8>)
 80065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065aa:	4604      	mov	r4, r0
 80065ac:	460d      	mov	r5, r1
 80065ae:	f7fa f823 	bl	80005f8 <__aeabi_dmul>
 80065b2:	a35b      	add	r3, pc, #364	; (adr r3, 8006720 <__ieee754_pow+0xa00>)
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	f7f9 fe66 	bl	8000288 <__aeabi_dsub>
 80065bc:	4622      	mov	r2, r4
 80065be:	462b      	mov	r3, r5
 80065c0:	f7fa f81a 	bl	80005f8 <__aeabi_dmul>
 80065c4:	a358      	add	r3, pc, #352	; (adr r3, 8006728 <__ieee754_pow+0xa08>)
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f7f9 fe5f 	bl	800028c <__adddf3>
 80065ce:	4622      	mov	r2, r4
 80065d0:	462b      	mov	r3, r5
 80065d2:	f7fa f811 	bl	80005f8 <__aeabi_dmul>
 80065d6:	a356      	add	r3, pc, #344	; (adr r3, 8006730 <__ieee754_pow+0xa10>)
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	f7f9 fe54 	bl	8000288 <__aeabi_dsub>
 80065e0:	4622      	mov	r2, r4
 80065e2:	462b      	mov	r3, r5
 80065e4:	f7fa f808 	bl	80005f8 <__aeabi_dmul>
 80065e8:	a353      	add	r3, pc, #332	; (adr r3, 8006738 <__ieee754_pow+0xa18>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f7f9 fe4d 	bl	800028c <__adddf3>
 80065f2:	4622      	mov	r2, r4
 80065f4:	462b      	mov	r3, r5
 80065f6:	f7f9 ffff 	bl	80005f8 <__aeabi_dmul>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4640      	mov	r0, r8
 8006600:	4649      	mov	r1, r9
 8006602:	f7f9 fe41 	bl	8000288 <__aeabi_dsub>
 8006606:	4604      	mov	r4, r0
 8006608:	460d      	mov	r5, r1
 800660a:	4602      	mov	r2, r0
 800660c:	460b      	mov	r3, r1
 800660e:	4640      	mov	r0, r8
 8006610:	4649      	mov	r1, r9
 8006612:	f7f9 fff1 	bl	80005f8 <__aeabi_dmul>
 8006616:	2200      	movs	r2, #0
 8006618:	ec41 0b19 	vmov	d9, r0, r1
 800661c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006620:	4620      	mov	r0, r4
 8006622:	4629      	mov	r1, r5
 8006624:	f7f9 fe30 	bl	8000288 <__aeabi_dsub>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	ec51 0b19 	vmov	r0, r1, d9
 8006630:	f7fa f90c 	bl	800084c <__aeabi_ddiv>
 8006634:	4632      	mov	r2, r6
 8006636:	4604      	mov	r4, r0
 8006638:	460d      	mov	r5, r1
 800663a:	463b      	mov	r3, r7
 800663c:	4640      	mov	r0, r8
 800663e:	4649      	mov	r1, r9
 8006640:	f7f9 ffda 	bl	80005f8 <__aeabi_dmul>
 8006644:	4632      	mov	r2, r6
 8006646:	463b      	mov	r3, r7
 8006648:	f7f9 fe20 	bl	800028c <__adddf3>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4620      	mov	r0, r4
 8006652:	4629      	mov	r1, r5
 8006654:	f7f9 fe18 	bl	8000288 <__aeabi_dsub>
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	f7f9 fe14 	bl	8000288 <__aeabi_dsub>
 8006660:	460b      	mov	r3, r1
 8006662:	4602      	mov	r2, r0
 8006664:	493a      	ldr	r1, [pc, #232]	; (8006750 <__ieee754_pow+0xa30>)
 8006666:	2000      	movs	r0, #0
 8006668:	f7f9 fe0e 	bl	8000288 <__aeabi_dsub>
 800666c:	e9cd 0100 	strd	r0, r1, [sp]
 8006670:	9b01      	ldr	r3, [sp, #4]
 8006672:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800667a:	da2f      	bge.n	80066dc <__ieee754_pow+0x9bc>
 800667c:	4650      	mov	r0, sl
 800667e:	ed9d 0b00 	vldr	d0, [sp]
 8006682:	f000 f9cd 	bl	8006a20 <scalbn>
 8006686:	ec51 0b10 	vmov	r0, r1, d0
 800668a:	ec53 2b18 	vmov	r2, r3, d8
 800668e:	f7ff bbe0 	b.w	8005e52 <__ieee754_pow+0x132>
 8006692:	4b30      	ldr	r3, [pc, #192]	; (8006754 <__ieee754_pow+0xa34>)
 8006694:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006698:	429e      	cmp	r6, r3
 800669a:	f77f af0b 	ble.w	80064b4 <__ieee754_pow+0x794>
 800669e:	4b2e      	ldr	r3, [pc, #184]	; (8006758 <__ieee754_pow+0xa38>)
 80066a0:	440b      	add	r3, r1
 80066a2:	4303      	orrs	r3, r0
 80066a4:	d00b      	beq.n	80066be <__ieee754_pow+0x99e>
 80066a6:	a326      	add	r3, pc, #152	; (adr r3, 8006740 <__ieee754_pow+0xa20>)
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	ec51 0b18 	vmov	r0, r1, d8
 80066b0:	f7f9 ffa2 	bl	80005f8 <__aeabi_dmul>
 80066b4:	a322      	add	r3, pc, #136	; (adr r3, 8006740 <__ieee754_pow+0xa20>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	f7ff bbca 	b.w	8005e52 <__ieee754_pow+0x132>
 80066be:	4622      	mov	r2, r4
 80066c0:	462b      	mov	r3, r5
 80066c2:	f7f9 fde1 	bl	8000288 <__aeabi_dsub>
 80066c6:	4642      	mov	r2, r8
 80066c8:	464b      	mov	r3, r9
 80066ca:	f7fa fa1b 	bl	8000b04 <__aeabi_dcmpge>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f43f aef0 	beq.w	80064b4 <__ieee754_pow+0x794>
 80066d4:	e7e7      	b.n	80066a6 <__ieee754_pow+0x986>
 80066d6:	f04f 0a00 	mov.w	sl, #0
 80066da:	e717      	b.n	800650c <__ieee754_pow+0x7ec>
 80066dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066e0:	4619      	mov	r1, r3
 80066e2:	e7d2      	b.n	800668a <__ieee754_pow+0x96a>
 80066e4:	491a      	ldr	r1, [pc, #104]	; (8006750 <__ieee754_pow+0xa30>)
 80066e6:	2000      	movs	r0, #0
 80066e8:	f7ff bb9e 	b.w	8005e28 <__ieee754_pow+0x108>
 80066ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066f0:	f7ff bb9a 	b.w	8005e28 <__ieee754_pow+0x108>
 80066f4:	9000      	str	r0, [sp, #0]
 80066f6:	f7ff bb76 	b.w	8005de6 <__ieee754_pow+0xc6>
 80066fa:	2100      	movs	r1, #0
 80066fc:	f7ff bb60 	b.w	8005dc0 <__ieee754_pow+0xa0>
 8006700:	00000000 	.word	0x00000000
 8006704:	3fe62e43 	.word	0x3fe62e43
 8006708:	fefa39ef 	.word	0xfefa39ef
 800670c:	3fe62e42 	.word	0x3fe62e42
 8006710:	0ca86c39 	.word	0x0ca86c39
 8006714:	be205c61 	.word	0xbe205c61
 8006718:	72bea4d0 	.word	0x72bea4d0
 800671c:	3e663769 	.word	0x3e663769
 8006720:	c5d26bf1 	.word	0xc5d26bf1
 8006724:	3ebbbd41 	.word	0x3ebbbd41
 8006728:	af25de2c 	.word	0xaf25de2c
 800672c:	3f11566a 	.word	0x3f11566a
 8006730:	16bebd93 	.word	0x16bebd93
 8006734:	3f66c16c 	.word	0x3f66c16c
 8006738:	5555553e 	.word	0x5555553e
 800673c:	3fc55555 	.word	0x3fc55555
 8006740:	c2f8f359 	.word	0xc2f8f359
 8006744:	01a56e1f 	.word	0x01a56e1f
 8006748:	3fe00000 	.word	0x3fe00000
 800674c:	000fffff 	.word	0x000fffff
 8006750:	3ff00000 	.word	0x3ff00000
 8006754:	4090cbff 	.word	0x4090cbff
 8006758:	3f6f3400 	.word	0x3f6f3400
 800675c:	652b82fe 	.word	0x652b82fe
 8006760:	3c971547 	.word	0x3c971547

08006764 <__ieee754_sqrt>:
 8006764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006768:	ec55 4b10 	vmov	r4, r5, d0
 800676c:	4e56      	ldr	r6, [pc, #344]	; (80068c8 <__ieee754_sqrt+0x164>)
 800676e:	43ae      	bics	r6, r5
 8006770:	ee10 0a10 	vmov	r0, s0
 8006774:	ee10 3a10 	vmov	r3, s0
 8006778:	4629      	mov	r1, r5
 800677a:	462a      	mov	r2, r5
 800677c:	d110      	bne.n	80067a0 <__ieee754_sqrt+0x3c>
 800677e:	ee10 2a10 	vmov	r2, s0
 8006782:	462b      	mov	r3, r5
 8006784:	f7f9 ff38 	bl	80005f8 <__aeabi_dmul>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4620      	mov	r0, r4
 800678e:	4629      	mov	r1, r5
 8006790:	f7f9 fd7c 	bl	800028c <__adddf3>
 8006794:	4604      	mov	r4, r0
 8006796:	460d      	mov	r5, r1
 8006798:	ec45 4b10 	vmov	d0, r4, r5
 800679c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a0:	2d00      	cmp	r5, #0
 80067a2:	dc10      	bgt.n	80067c6 <__ieee754_sqrt+0x62>
 80067a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80067a8:	4330      	orrs	r0, r6
 80067aa:	d0f5      	beq.n	8006798 <__ieee754_sqrt+0x34>
 80067ac:	b15d      	cbz	r5, 80067c6 <__ieee754_sqrt+0x62>
 80067ae:	ee10 2a10 	vmov	r2, s0
 80067b2:	462b      	mov	r3, r5
 80067b4:	ee10 0a10 	vmov	r0, s0
 80067b8:	f7f9 fd66 	bl	8000288 <__aeabi_dsub>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	f7fa f844 	bl	800084c <__aeabi_ddiv>
 80067c4:	e7e6      	b.n	8006794 <__ieee754_sqrt+0x30>
 80067c6:	1509      	asrs	r1, r1, #20
 80067c8:	d076      	beq.n	80068b8 <__ieee754_sqrt+0x154>
 80067ca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80067ce:	07ce      	lsls	r6, r1, #31
 80067d0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80067d4:	bf5e      	ittt	pl
 80067d6:	0fda      	lsrpl	r2, r3, #31
 80067d8:	005b      	lslpl	r3, r3, #1
 80067da:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80067de:	0fda      	lsrs	r2, r3, #31
 80067e0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80067e4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80067e8:	2000      	movs	r0, #0
 80067ea:	106d      	asrs	r5, r5, #1
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	f04f 0e16 	mov.w	lr, #22
 80067f2:	4684      	mov	ip, r0
 80067f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067f8:	eb0c 0401 	add.w	r4, ip, r1
 80067fc:	4294      	cmp	r4, r2
 80067fe:	bfde      	ittt	le
 8006800:	1b12      	suble	r2, r2, r4
 8006802:	eb04 0c01 	addle.w	ip, r4, r1
 8006806:	1840      	addle	r0, r0, r1
 8006808:	0052      	lsls	r2, r2, #1
 800680a:	f1be 0e01 	subs.w	lr, lr, #1
 800680e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006812:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006816:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800681a:	d1ed      	bne.n	80067f8 <__ieee754_sqrt+0x94>
 800681c:	4671      	mov	r1, lr
 800681e:	2720      	movs	r7, #32
 8006820:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006824:	4562      	cmp	r2, ip
 8006826:	eb04 060e 	add.w	r6, r4, lr
 800682a:	dc02      	bgt.n	8006832 <__ieee754_sqrt+0xce>
 800682c:	d113      	bne.n	8006856 <__ieee754_sqrt+0xf2>
 800682e:	429e      	cmp	r6, r3
 8006830:	d811      	bhi.n	8006856 <__ieee754_sqrt+0xf2>
 8006832:	2e00      	cmp	r6, #0
 8006834:	eb06 0e04 	add.w	lr, r6, r4
 8006838:	da43      	bge.n	80068c2 <__ieee754_sqrt+0x15e>
 800683a:	f1be 0f00 	cmp.w	lr, #0
 800683e:	db40      	blt.n	80068c2 <__ieee754_sqrt+0x15e>
 8006840:	f10c 0801 	add.w	r8, ip, #1
 8006844:	eba2 020c 	sub.w	r2, r2, ip
 8006848:	429e      	cmp	r6, r3
 800684a:	bf88      	it	hi
 800684c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006850:	1b9b      	subs	r3, r3, r6
 8006852:	4421      	add	r1, r4
 8006854:	46c4      	mov	ip, r8
 8006856:	0052      	lsls	r2, r2, #1
 8006858:	3f01      	subs	r7, #1
 800685a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800685e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006862:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006866:	d1dd      	bne.n	8006824 <__ieee754_sqrt+0xc0>
 8006868:	4313      	orrs	r3, r2
 800686a:	d006      	beq.n	800687a <__ieee754_sqrt+0x116>
 800686c:	1c4c      	adds	r4, r1, #1
 800686e:	bf13      	iteet	ne
 8006870:	3101      	addne	r1, #1
 8006872:	3001      	addeq	r0, #1
 8006874:	4639      	moveq	r1, r7
 8006876:	f021 0101 	bicne.w	r1, r1, #1
 800687a:	1043      	asrs	r3, r0, #1
 800687c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006880:	0849      	lsrs	r1, r1, #1
 8006882:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006886:	07c2      	lsls	r2, r0, #31
 8006888:	bf48      	it	mi
 800688a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800688e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8006892:	460c      	mov	r4, r1
 8006894:	463d      	mov	r5, r7
 8006896:	e77f      	b.n	8006798 <__ieee754_sqrt+0x34>
 8006898:	0ada      	lsrs	r2, r3, #11
 800689a:	3815      	subs	r0, #21
 800689c:	055b      	lsls	r3, r3, #21
 800689e:	2a00      	cmp	r2, #0
 80068a0:	d0fa      	beq.n	8006898 <__ieee754_sqrt+0x134>
 80068a2:	02d7      	lsls	r7, r2, #11
 80068a4:	d50a      	bpl.n	80068bc <__ieee754_sqrt+0x158>
 80068a6:	f1c1 0420 	rsb	r4, r1, #32
 80068aa:	fa23 f404 	lsr.w	r4, r3, r4
 80068ae:	1e4d      	subs	r5, r1, #1
 80068b0:	408b      	lsls	r3, r1
 80068b2:	4322      	orrs	r2, r4
 80068b4:	1b41      	subs	r1, r0, r5
 80068b6:	e788      	b.n	80067ca <__ieee754_sqrt+0x66>
 80068b8:	4608      	mov	r0, r1
 80068ba:	e7f0      	b.n	800689e <__ieee754_sqrt+0x13a>
 80068bc:	0052      	lsls	r2, r2, #1
 80068be:	3101      	adds	r1, #1
 80068c0:	e7ef      	b.n	80068a2 <__ieee754_sqrt+0x13e>
 80068c2:	46e0      	mov	r8, ip
 80068c4:	e7be      	b.n	8006844 <__ieee754_sqrt+0xe0>
 80068c6:	bf00      	nop
 80068c8:	7ff00000 	.word	0x7ff00000

080068cc <fabs>:
 80068cc:	ec51 0b10 	vmov	r0, r1, d0
 80068d0:	ee10 2a10 	vmov	r2, s0
 80068d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80068d8:	ec43 2b10 	vmov	d0, r2, r3
 80068dc:	4770      	bx	lr

080068de <finite>:
 80068de:	b082      	sub	sp, #8
 80068e0:	ed8d 0b00 	vstr	d0, [sp]
 80068e4:	9801      	ldr	r0, [sp, #4]
 80068e6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80068ea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80068ee:	0fc0      	lsrs	r0, r0, #31
 80068f0:	b002      	add	sp, #8
 80068f2:	4770      	bx	lr
 80068f4:	0000      	movs	r0, r0
	...

080068f8 <nan>:
 80068f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006900 <nan+0x8>
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	00000000 	.word	0x00000000
 8006904:	7ff80000 	.word	0x7ff80000

08006908 <rint>:
 8006908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800690a:	ec51 0b10 	vmov	r0, r1, d0
 800690e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006912:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006916:	2e13      	cmp	r6, #19
 8006918:	ee10 4a10 	vmov	r4, s0
 800691c:	460b      	mov	r3, r1
 800691e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8006922:	dc58      	bgt.n	80069d6 <rint+0xce>
 8006924:	2e00      	cmp	r6, #0
 8006926:	da2b      	bge.n	8006980 <rint+0x78>
 8006928:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800692c:	4302      	orrs	r2, r0
 800692e:	d023      	beq.n	8006978 <rint+0x70>
 8006930:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006934:	4302      	orrs	r2, r0
 8006936:	4254      	negs	r4, r2
 8006938:	4314      	orrs	r4, r2
 800693a:	0c4b      	lsrs	r3, r1, #17
 800693c:	0b24      	lsrs	r4, r4, #12
 800693e:	045b      	lsls	r3, r3, #17
 8006940:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8006944:	ea44 0103 	orr.w	r1, r4, r3
 8006948:	4b32      	ldr	r3, [pc, #200]	; (8006a14 <rint+0x10c>)
 800694a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800694e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	4630      	mov	r0, r6
 8006958:	4639      	mov	r1, r7
 800695a:	f7f9 fc97 	bl	800028c <__adddf3>
 800695e:	e9cd 0100 	strd	r0, r1, [sp]
 8006962:	463b      	mov	r3, r7
 8006964:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006968:	4632      	mov	r2, r6
 800696a:	f7f9 fc8d 	bl	8000288 <__aeabi_dsub>
 800696e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006972:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8006976:	4639      	mov	r1, r7
 8006978:	ec41 0b10 	vmov	d0, r0, r1
 800697c:	b003      	add	sp, #12
 800697e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006980:	4a25      	ldr	r2, [pc, #148]	; (8006a18 <rint+0x110>)
 8006982:	4132      	asrs	r2, r6
 8006984:	ea01 0702 	and.w	r7, r1, r2
 8006988:	4307      	orrs	r7, r0
 800698a:	d0f5      	beq.n	8006978 <rint+0x70>
 800698c:	0851      	lsrs	r1, r2, #1
 800698e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8006992:	4314      	orrs	r4, r2
 8006994:	d00c      	beq.n	80069b0 <rint+0xa8>
 8006996:	ea23 0201 	bic.w	r2, r3, r1
 800699a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800699e:	2e13      	cmp	r6, #19
 80069a0:	fa43 f606 	asr.w	r6, r3, r6
 80069a4:	bf0c      	ite	eq
 80069a6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80069aa:	2400      	movne	r4, #0
 80069ac:	ea42 0306 	orr.w	r3, r2, r6
 80069b0:	4918      	ldr	r1, [pc, #96]	; (8006a14 <rint+0x10c>)
 80069b2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80069b6:	4622      	mov	r2, r4
 80069b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80069bc:	4620      	mov	r0, r4
 80069be:	4629      	mov	r1, r5
 80069c0:	f7f9 fc64 	bl	800028c <__adddf3>
 80069c4:	e9cd 0100 	strd	r0, r1, [sp]
 80069c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069cc:	4622      	mov	r2, r4
 80069ce:	462b      	mov	r3, r5
 80069d0:	f7f9 fc5a 	bl	8000288 <__aeabi_dsub>
 80069d4:	e7d0      	b.n	8006978 <rint+0x70>
 80069d6:	2e33      	cmp	r6, #51	; 0x33
 80069d8:	dd07      	ble.n	80069ea <rint+0xe2>
 80069da:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80069de:	d1cb      	bne.n	8006978 <rint+0x70>
 80069e0:	ee10 2a10 	vmov	r2, s0
 80069e4:	f7f9 fc52 	bl	800028c <__adddf3>
 80069e8:	e7c6      	b.n	8006978 <rint+0x70>
 80069ea:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80069ee:	f04f 36ff 	mov.w	r6, #4294967295
 80069f2:	40d6      	lsrs	r6, r2
 80069f4:	4230      	tst	r0, r6
 80069f6:	d0bf      	beq.n	8006978 <rint+0x70>
 80069f8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80069fc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8006a00:	bf1f      	itttt	ne
 8006a02:	ea24 0101 	bicne.w	r1, r4, r1
 8006a06:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006a0a:	fa44 f202 	asrne.w	r2, r4, r2
 8006a0e:	ea41 0402 	orrne.w	r4, r1, r2
 8006a12:	e7cd      	b.n	80069b0 <rint+0xa8>
 8006a14:	08006c70 	.word	0x08006c70
 8006a18:	000fffff 	.word	0x000fffff
 8006a1c:	00000000 	.word	0x00000000

08006a20 <scalbn>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	ec55 4b10 	vmov	r4, r5, d0
 8006a26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	462b      	mov	r3, r5
 8006a2e:	b99a      	cbnz	r2, 8006a58 <scalbn+0x38>
 8006a30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006a34:	4323      	orrs	r3, r4
 8006a36:	d036      	beq.n	8006aa6 <scalbn+0x86>
 8006a38:	4b39      	ldr	r3, [pc, #228]	; (8006b20 <scalbn+0x100>)
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	ee10 0a10 	vmov	r0, s0
 8006a40:	2200      	movs	r2, #0
 8006a42:	f7f9 fdd9 	bl	80005f8 <__aeabi_dmul>
 8006a46:	4b37      	ldr	r3, [pc, #220]	; (8006b24 <scalbn+0x104>)
 8006a48:	429e      	cmp	r6, r3
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	460d      	mov	r5, r1
 8006a4e:	da10      	bge.n	8006a72 <scalbn+0x52>
 8006a50:	a32b      	add	r3, pc, #172	; (adr r3, 8006b00 <scalbn+0xe0>)
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	e03a      	b.n	8006ace <scalbn+0xae>
 8006a58:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006a5c:	428a      	cmp	r2, r1
 8006a5e:	d10c      	bne.n	8006a7a <scalbn+0x5a>
 8006a60:	ee10 2a10 	vmov	r2, s0
 8006a64:	4620      	mov	r0, r4
 8006a66:	4629      	mov	r1, r5
 8006a68:	f7f9 fc10 	bl	800028c <__adddf3>
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	460d      	mov	r5, r1
 8006a70:	e019      	b.n	8006aa6 <scalbn+0x86>
 8006a72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006a76:	460b      	mov	r3, r1
 8006a78:	3a36      	subs	r2, #54	; 0x36
 8006a7a:	4432      	add	r2, r6
 8006a7c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006a80:	428a      	cmp	r2, r1
 8006a82:	dd08      	ble.n	8006a96 <scalbn+0x76>
 8006a84:	2d00      	cmp	r5, #0
 8006a86:	a120      	add	r1, pc, #128	; (adr r1, 8006b08 <scalbn+0xe8>)
 8006a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a8c:	da1c      	bge.n	8006ac8 <scalbn+0xa8>
 8006a8e:	a120      	add	r1, pc, #128	; (adr r1, 8006b10 <scalbn+0xf0>)
 8006a90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a94:	e018      	b.n	8006ac8 <scalbn+0xa8>
 8006a96:	2a00      	cmp	r2, #0
 8006a98:	dd08      	ble.n	8006aac <scalbn+0x8c>
 8006a9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006a9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006aa2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006aa6:	ec45 4b10 	vmov	d0, r4, r5
 8006aaa:	bd70      	pop	{r4, r5, r6, pc}
 8006aac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006ab0:	da19      	bge.n	8006ae6 <scalbn+0xc6>
 8006ab2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006ab6:	429e      	cmp	r6, r3
 8006ab8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006abc:	dd0a      	ble.n	8006ad4 <scalbn+0xb4>
 8006abe:	a112      	add	r1, pc, #72	; (adr r1, 8006b08 <scalbn+0xe8>)
 8006ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e2      	bne.n	8006a8e <scalbn+0x6e>
 8006ac8:	a30f      	add	r3, pc, #60	; (adr r3, 8006b08 <scalbn+0xe8>)
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	f7f9 fd93 	bl	80005f8 <__aeabi_dmul>
 8006ad2:	e7cb      	b.n	8006a6c <scalbn+0x4c>
 8006ad4:	a10a      	add	r1, pc, #40	; (adr r1, 8006b00 <scalbn+0xe0>)
 8006ad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0b8      	beq.n	8006a50 <scalbn+0x30>
 8006ade:	a10e      	add	r1, pc, #56	; (adr r1, 8006b18 <scalbn+0xf8>)
 8006ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ae4:	e7b4      	b.n	8006a50 <scalbn+0x30>
 8006ae6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006aea:	3236      	adds	r2, #54	; 0x36
 8006aec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006af0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006af4:	4620      	mov	r0, r4
 8006af6:	4b0c      	ldr	r3, [pc, #48]	; (8006b28 <scalbn+0x108>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	e7e8      	b.n	8006ace <scalbn+0xae>
 8006afc:	f3af 8000 	nop.w
 8006b00:	c2f8f359 	.word	0xc2f8f359
 8006b04:	01a56e1f 	.word	0x01a56e1f
 8006b08:	8800759c 	.word	0x8800759c
 8006b0c:	7e37e43c 	.word	0x7e37e43c
 8006b10:	8800759c 	.word	0x8800759c
 8006b14:	fe37e43c 	.word	0xfe37e43c
 8006b18:	c2f8f359 	.word	0xc2f8f359
 8006b1c:	81a56e1f 	.word	0x81a56e1f
 8006b20:	43500000 	.word	0x43500000
 8006b24:	ffff3cb0 	.word	0xffff3cb0
 8006b28:	3c900000 	.word	0x3c900000

08006b2c <_init>:
 8006b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2e:	bf00      	nop
 8006b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b32:	bc08      	pop	{r3}
 8006b34:	469e      	mov	lr, r3
 8006b36:	4770      	bx	lr

08006b38 <_fini>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	bf00      	nop
 8006b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3e:	bc08      	pop	{r3}
 8006b40:	469e      	mov	lr, r3
 8006b42:	4770      	bx	lr
